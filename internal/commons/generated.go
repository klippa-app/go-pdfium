// Code generated by tool. DO NOT EDIT.
// See the code_generation package.

package commons

import (
	"fmt"

	"github.com/klippa-app/go-pdfium/requests"
	"github.com/klippa-app/go-pdfium/responses"
)

type Pdfium interface {
	Ping() (string, error)
	FORM_CanRedo(*requests.FORM_CanRedo) (*responses.FORM_CanRedo, error)
	FORM_CanUndo(*requests.FORM_CanUndo) (*responses.FORM_CanUndo, error)
	FORM_DoDocumentAAction(*requests.FORM_DoDocumentAAction) (*responses.FORM_DoDocumentAAction, error)
	FORM_DoDocumentJSAction(*requests.FORM_DoDocumentJSAction) (*responses.FORM_DoDocumentJSAction, error)
	FORM_DoDocumentOpenAction(*requests.FORM_DoDocumentOpenAction) (*responses.FORM_DoDocumentOpenAction, error)
	FORM_DoPageAAction(*requests.FORM_DoPageAAction) (*responses.FORM_DoPageAAction, error)
	FORM_ForceToKillFocus(*requests.FORM_ForceToKillFocus) (*responses.FORM_ForceToKillFocus, error)
	FORM_GetFocusedAnnot(*requests.FORM_GetFocusedAnnot) (*responses.FORM_GetFocusedAnnot, error)
	FORM_GetFocusedText(*requests.FORM_GetFocusedText) (*responses.FORM_GetFocusedText, error)
	FORM_GetSelectedText(*requests.FORM_GetSelectedText) (*responses.FORM_GetSelectedText, error)
	FORM_IsIndexSelected(*requests.FORM_IsIndexSelected) (*responses.FORM_IsIndexSelected, error)
	FORM_OnAfterLoadPage(*requests.FORM_OnAfterLoadPage) (*responses.FORM_OnAfterLoadPage, error)
	FORM_OnBeforeClosePage(*requests.FORM_OnBeforeClosePage) (*responses.FORM_OnBeforeClosePage, error)
	FORM_OnChar(*requests.FORM_OnChar) (*responses.FORM_OnChar, error)
	FORM_OnFocus(*requests.FORM_OnFocus) (*responses.FORM_OnFocus, error)
	FORM_OnKeyDown(*requests.FORM_OnKeyDown) (*responses.FORM_OnKeyDown, error)
	FORM_OnKeyUp(*requests.FORM_OnKeyUp) (*responses.FORM_OnKeyUp, error)
	FORM_OnLButtonDoubleClick(*requests.FORM_OnLButtonDoubleClick) (*responses.FORM_OnLButtonDoubleClick, error)
	FORM_OnLButtonDown(*requests.FORM_OnLButtonDown) (*responses.FORM_OnLButtonDown, error)
	FORM_OnLButtonUp(*requests.FORM_OnLButtonUp) (*responses.FORM_OnLButtonUp, error)
	FORM_OnMouseMove(*requests.FORM_OnMouseMove) (*responses.FORM_OnMouseMove, error)
	FORM_OnMouseWheel(*requests.FORM_OnMouseWheel) (*responses.FORM_OnMouseWheel, error)
	FORM_OnRButtonDown(*requests.FORM_OnRButtonDown) (*responses.FORM_OnRButtonDown, error)
	FORM_OnRButtonUp(*requests.FORM_OnRButtonUp) (*responses.FORM_OnRButtonUp, error)
	FORM_Redo(*requests.FORM_Redo) (*responses.FORM_Redo, error)
	FORM_ReplaceAndKeepSelection(*requests.FORM_ReplaceAndKeepSelection) (*responses.FORM_ReplaceAndKeepSelection, error)
	FORM_ReplaceSelection(*requests.FORM_ReplaceSelection) (*responses.FORM_ReplaceSelection, error)
	FORM_SelectAllText(*requests.FORM_SelectAllText) (*responses.FORM_SelectAllText, error)
	FORM_SetFocusedAnnot(*requests.FORM_SetFocusedAnnot) (*responses.FORM_SetFocusedAnnot, error)
	FORM_SetIndexSelected(*requests.FORM_SetIndexSelected) (*responses.FORM_SetIndexSelected, error)
	FORM_Undo(*requests.FORM_Undo) (*responses.FORM_Undo, error)
	FPDFAction_GetDest(*requests.FPDFAction_GetDest) (*responses.FPDFAction_GetDest, error)
	FPDFAction_GetFilePath(*requests.FPDFAction_GetFilePath) (*responses.FPDFAction_GetFilePath, error)
	FPDFAction_GetType(*requests.FPDFAction_GetType) (*responses.FPDFAction_GetType, error)
	FPDFAction_GetURIPath(*requests.FPDFAction_GetURIPath) (*responses.FPDFAction_GetURIPath, error)
	FPDFAnnot_AddFileAttachment(*requests.FPDFAnnot_AddFileAttachment) (*responses.FPDFAnnot_AddFileAttachment, error)
	FPDFAnnot_AddInkStroke(*requests.FPDFAnnot_AddInkStroke) (*responses.FPDFAnnot_AddInkStroke, error)
	FPDFAnnot_AppendAttachmentPoints(*requests.FPDFAnnot_AppendAttachmentPoints) (*responses.FPDFAnnot_AppendAttachmentPoints, error)
	FPDFAnnot_AppendObject(*requests.FPDFAnnot_AppendObject) (*responses.FPDFAnnot_AppendObject, error)
	FPDFAnnot_CountAttachmentPoints(*requests.FPDFAnnot_CountAttachmentPoints) (*responses.FPDFAnnot_CountAttachmentPoints, error)
	FPDFAnnot_GetAP(*requests.FPDFAnnot_GetAP) (*responses.FPDFAnnot_GetAP, error)
	FPDFAnnot_GetAttachmentPoints(*requests.FPDFAnnot_GetAttachmentPoints) (*responses.FPDFAnnot_GetAttachmentPoints, error)
	FPDFAnnot_GetBorder(*requests.FPDFAnnot_GetBorder) (*responses.FPDFAnnot_GetBorder, error)
	FPDFAnnot_GetColor(*requests.FPDFAnnot_GetColor) (*responses.FPDFAnnot_GetColor, error)
	FPDFAnnot_GetFileAttachment(*requests.FPDFAnnot_GetFileAttachment) (*responses.FPDFAnnot_GetFileAttachment, error)
	FPDFAnnot_GetFlags(*requests.FPDFAnnot_GetFlags) (*responses.FPDFAnnot_GetFlags, error)
	FPDFAnnot_GetFocusableSubtypes(*requests.FPDFAnnot_GetFocusableSubtypes) (*responses.FPDFAnnot_GetFocusableSubtypes, error)
	FPDFAnnot_GetFocusableSubtypesCount(*requests.FPDFAnnot_GetFocusableSubtypesCount) (*responses.FPDFAnnot_GetFocusableSubtypesCount, error)
	FPDFAnnot_GetFontColor(*requests.FPDFAnnot_GetFontColor) (*responses.FPDFAnnot_GetFontColor, error)
	FPDFAnnot_GetFontSize(*requests.FPDFAnnot_GetFontSize) (*responses.FPDFAnnot_GetFontSize, error)
	FPDFAnnot_GetFormAdditionalActionJavaScript(*requests.FPDFAnnot_GetFormAdditionalActionJavaScript) (*responses.FPDFAnnot_GetFormAdditionalActionJavaScript, error)
	FPDFAnnot_GetFormControlCount(*requests.FPDFAnnot_GetFormControlCount) (*responses.FPDFAnnot_GetFormControlCount, error)
	FPDFAnnot_GetFormControlIndex(*requests.FPDFAnnot_GetFormControlIndex) (*responses.FPDFAnnot_GetFormControlIndex, error)
	FPDFAnnot_GetFormFieldAlternateName(*requests.FPDFAnnot_GetFormFieldAlternateName) (*responses.FPDFAnnot_GetFormFieldAlternateName, error)
	FPDFAnnot_GetFormFieldAtPoint(*requests.FPDFAnnot_GetFormFieldAtPoint) (*responses.FPDFAnnot_GetFormFieldAtPoint, error)
	FPDFAnnot_GetFormFieldExportValue(*requests.FPDFAnnot_GetFormFieldExportValue) (*responses.FPDFAnnot_GetFormFieldExportValue, error)
	FPDFAnnot_GetFormFieldFlags(*requests.FPDFAnnot_GetFormFieldFlags) (*responses.FPDFAnnot_GetFormFieldFlags, error)
	FPDFAnnot_GetFormFieldName(*requests.FPDFAnnot_GetFormFieldName) (*responses.FPDFAnnot_GetFormFieldName, error)
	FPDFAnnot_GetFormFieldType(*requests.FPDFAnnot_GetFormFieldType) (*responses.FPDFAnnot_GetFormFieldType, error)
	FPDFAnnot_GetFormFieldValue(*requests.FPDFAnnot_GetFormFieldValue) (*responses.FPDFAnnot_GetFormFieldValue, error)
	FPDFAnnot_GetInkListCount(*requests.FPDFAnnot_GetInkListCount) (*responses.FPDFAnnot_GetInkListCount, error)
	FPDFAnnot_GetInkListPath(*requests.FPDFAnnot_GetInkListPath) (*responses.FPDFAnnot_GetInkListPath, error)
	FPDFAnnot_GetLine(*requests.FPDFAnnot_GetLine) (*responses.FPDFAnnot_GetLine, error)
	FPDFAnnot_GetLink(*requests.FPDFAnnot_GetLink) (*responses.FPDFAnnot_GetLink, error)
	FPDFAnnot_GetLinkedAnnot(*requests.FPDFAnnot_GetLinkedAnnot) (*responses.FPDFAnnot_GetLinkedAnnot, error)
	FPDFAnnot_GetNumberValue(*requests.FPDFAnnot_GetNumberValue) (*responses.FPDFAnnot_GetNumberValue, error)
	FPDFAnnot_GetObject(*requests.FPDFAnnot_GetObject) (*responses.FPDFAnnot_GetObject, error)
	FPDFAnnot_GetObjectCount(*requests.FPDFAnnot_GetObjectCount) (*responses.FPDFAnnot_GetObjectCount, error)
	FPDFAnnot_GetOptionCount(*requests.FPDFAnnot_GetOptionCount) (*responses.FPDFAnnot_GetOptionCount, error)
	FPDFAnnot_GetOptionLabel(*requests.FPDFAnnot_GetOptionLabel) (*responses.FPDFAnnot_GetOptionLabel, error)
	FPDFAnnot_GetRect(*requests.FPDFAnnot_GetRect) (*responses.FPDFAnnot_GetRect, error)
	FPDFAnnot_GetStringValue(*requests.FPDFAnnot_GetStringValue) (*responses.FPDFAnnot_GetStringValue, error)
	FPDFAnnot_GetSubtype(*requests.FPDFAnnot_GetSubtype) (*responses.FPDFAnnot_GetSubtype, error)
	FPDFAnnot_GetValueType(*requests.FPDFAnnot_GetValueType) (*responses.FPDFAnnot_GetValueType, error)
	FPDFAnnot_GetVertices(*requests.FPDFAnnot_GetVertices) (*responses.FPDFAnnot_GetVertices, error)
	FPDFAnnot_HasAttachmentPoints(*requests.FPDFAnnot_HasAttachmentPoints) (*responses.FPDFAnnot_HasAttachmentPoints, error)
	FPDFAnnot_HasKey(*requests.FPDFAnnot_HasKey) (*responses.FPDFAnnot_HasKey, error)
	FPDFAnnot_IsChecked(*requests.FPDFAnnot_IsChecked) (*responses.FPDFAnnot_IsChecked, error)
	FPDFAnnot_IsObjectSupportedSubtype(*requests.FPDFAnnot_IsObjectSupportedSubtype) (*responses.FPDFAnnot_IsObjectSupportedSubtype, error)
	FPDFAnnot_IsOptionSelected(*requests.FPDFAnnot_IsOptionSelected) (*responses.FPDFAnnot_IsOptionSelected, error)
	FPDFAnnot_IsSupportedSubtype(*requests.FPDFAnnot_IsSupportedSubtype) (*responses.FPDFAnnot_IsSupportedSubtype, error)
	FPDFAnnot_RemoveInkList(*requests.FPDFAnnot_RemoveInkList) (*responses.FPDFAnnot_RemoveInkList, error)
	FPDFAnnot_RemoveObject(*requests.FPDFAnnot_RemoveObject) (*responses.FPDFAnnot_RemoveObject, error)
	FPDFAnnot_SetAP(*requests.FPDFAnnot_SetAP) (*responses.FPDFAnnot_SetAP, error)
	FPDFAnnot_SetAttachmentPoints(*requests.FPDFAnnot_SetAttachmentPoints) (*responses.FPDFAnnot_SetAttachmentPoints, error)
	FPDFAnnot_SetBorder(*requests.FPDFAnnot_SetBorder) (*responses.FPDFAnnot_SetBorder, error)
	FPDFAnnot_SetColor(*requests.FPDFAnnot_SetColor) (*responses.FPDFAnnot_SetColor, error)
	FPDFAnnot_SetFlags(*requests.FPDFAnnot_SetFlags) (*responses.FPDFAnnot_SetFlags, error)
	FPDFAnnot_SetFocusableSubtypes(*requests.FPDFAnnot_SetFocusableSubtypes) (*responses.FPDFAnnot_SetFocusableSubtypes, error)
	FPDFAnnot_SetFontColor(*requests.FPDFAnnot_SetFontColor) (*responses.FPDFAnnot_SetFontColor, error)
	FPDFAnnot_SetFormFieldFlags(*requests.FPDFAnnot_SetFormFieldFlags) (*responses.FPDFAnnot_SetFormFieldFlags, error)
	FPDFAnnot_SetRect(*requests.FPDFAnnot_SetRect) (*responses.FPDFAnnot_SetRect, error)
	FPDFAnnot_SetStringValue(*requests.FPDFAnnot_SetStringValue) (*responses.FPDFAnnot_SetStringValue, error)
	FPDFAnnot_SetURI(*requests.FPDFAnnot_SetURI) (*responses.FPDFAnnot_SetURI, error)
	FPDFAnnot_UpdateObject(*requests.FPDFAnnot_UpdateObject) (*responses.FPDFAnnot_UpdateObject, error)
	FPDFAttachment_GetFile(*requests.FPDFAttachment_GetFile) (*responses.FPDFAttachment_GetFile, error)
	FPDFAttachment_GetName(*requests.FPDFAttachment_GetName) (*responses.FPDFAttachment_GetName, error)
	FPDFAttachment_GetStringValue(*requests.FPDFAttachment_GetStringValue) (*responses.FPDFAttachment_GetStringValue, error)
	FPDFAttachment_GetSubtype(*requests.FPDFAttachment_GetSubtype) (*responses.FPDFAttachment_GetSubtype, error)
	FPDFAttachment_GetValueType(*requests.FPDFAttachment_GetValueType) (*responses.FPDFAttachment_GetValueType, error)
	FPDFAttachment_HasKey(*requests.FPDFAttachment_HasKey) (*responses.FPDFAttachment_HasKey, error)
	FPDFAttachment_SetFile(*requests.FPDFAttachment_SetFile) (*responses.FPDFAttachment_SetFile, error)
	FPDFAttachment_SetStringValue(*requests.FPDFAttachment_SetStringValue) (*responses.FPDFAttachment_SetStringValue, error)
	FPDFAvail_Create(*requests.FPDFAvail_Create) (*responses.FPDFAvail_Create, error)
	FPDFAvail_Destroy(*requests.FPDFAvail_Destroy) (*responses.FPDFAvail_Destroy, error)
	FPDFAvail_GetDocument(*requests.FPDFAvail_GetDocument) (*responses.FPDFAvail_GetDocument, error)
	FPDFAvail_GetFirstPageNum(*requests.FPDFAvail_GetFirstPageNum) (*responses.FPDFAvail_GetFirstPageNum, error)
	FPDFAvail_IsDocAvail(*requests.FPDFAvail_IsDocAvail) (*responses.FPDFAvail_IsDocAvail, error)
	FPDFAvail_IsFormAvail(*requests.FPDFAvail_IsFormAvail) (*responses.FPDFAvail_IsFormAvail, error)
	FPDFAvail_IsLinearized(*requests.FPDFAvail_IsLinearized) (*responses.FPDFAvail_IsLinearized, error)
	FPDFAvail_IsPageAvail(*requests.FPDFAvail_IsPageAvail) (*responses.FPDFAvail_IsPageAvail, error)
	FPDFBitmap_Create(*requests.FPDFBitmap_Create) (*responses.FPDFBitmap_Create, error)
	FPDFBitmap_CreateEx(*requests.FPDFBitmap_CreateEx) (*responses.FPDFBitmap_CreateEx, error)
	FPDFBitmap_Destroy(*requests.FPDFBitmap_Destroy) (*responses.FPDFBitmap_Destroy, error)
	FPDFBitmap_FillRect(*requests.FPDFBitmap_FillRect) (*responses.FPDFBitmap_FillRect, error)
	FPDFBitmap_GetBuffer(*requests.FPDFBitmap_GetBuffer) (*responses.FPDFBitmap_GetBuffer, error)
	FPDFBitmap_GetFormat(*requests.FPDFBitmap_GetFormat) (*responses.FPDFBitmap_GetFormat, error)
	FPDFBitmap_GetHeight(*requests.FPDFBitmap_GetHeight) (*responses.FPDFBitmap_GetHeight, error)
	FPDFBitmap_GetStride(*requests.FPDFBitmap_GetStride) (*responses.FPDFBitmap_GetStride, error)
	FPDFBitmap_GetWidth(*requests.FPDFBitmap_GetWidth) (*responses.FPDFBitmap_GetWidth, error)
	FPDFBookmark_Find(*requests.FPDFBookmark_Find) (*responses.FPDFBookmark_Find, error)
	FPDFBookmark_GetAction(*requests.FPDFBookmark_GetAction) (*responses.FPDFBookmark_GetAction, error)
	FPDFBookmark_GetCount(*requests.FPDFBookmark_GetCount) (*responses.FPDFBookmark_GetCount, error)
	FPDFBookmark_GetDest(*requests.FPDFBookmark_GetDest) (*responses.FPDFBookmark_GetDest, error)
	FPDFBookmark_GetFirstChild(*requests.FPDFBookmark_GetFirstChild) (*responses.FPDFBookmark_GetFirstChild, error)
	FPDFBookmark_GetNextSibling(*requests.FPDFBookmark_GetNextSibling) (*responses.FPDFBookmark_GetNextSibling, error)
	FPDFBookmark_GetTitle(*requests.FPDFBookmark_GetTitle) (*responses.FPDFBookmark_GetTitle, error)
	FPDFCatalog_IsTagged(*requests.FPDFCatalog_IsTagged) (*responses.FPDFCatalog_IsTagged, error)
	FPDFCatalog_SetLanguage(*requests.FPDFCatalog_SetLanguage) (*responses.FPDFCatalog_SetLanguage, error)
	FPDFClipPath_CountPathSegments(*requests.FPDFClipPath_CountPathSegments) (*responses.FPDFClipPath_CountPathSegments, error)
	FPDFClipPath_CountPaths(*requests.FPDFClipPath_CountPaths) (*responses.FPDFClipPath_CountPaths, error)
	FPDFClipPath_GetPathSegment(*requests.FPDFClipPath_GetPathSegment) (*responses.FPDFClipPath_GetPathSegment, error)
	FPDFDOC_ExitFormFillEnvironment(*requests.FPDFDOC_ExitFormFillEnvironment) (*responses.FPDFDOC_ExitFormFillEnvironment, error)
	FPDFDOC_InitFormFillEnvironment(*requests.FPDFDOC_InitFormFillEnvironment) (*responses.FPDFDOC_InitFormFillEnvironment, error)
	FPDFDest_GetDestPageIndex(*requests.FPDFDest_GetDestPageIndex) (*responses.FPDFDest_GetDestPageIndex, error)
	FPDFDest_GetLocationInPage(*requests.FPDFDest_GetLocationInPage) (*responses.FPDFDest_GetLocationInPage, error)
	FPDFDest_GetView(*requests.FPDFDest_GetView) (*responses.FPDFDest_GetView, error)
	FPDFDoc_AddAttachment(*requests.FPDFDoc_AddAttachment) (*responses.FPDFDoc_AddAttachment, error)
	FPDFDoc_CloseJavaScriptAction(*requests.FPDFDoc_CloseJavaScriptAction) (*responses.FPDFDoc_CloseJavaScriptAction, error)
	FPDFDoc_DeleteAttachment(*requests.FPDFDoc_DeleteAttachment) (*responses.FPDFDoc_DeleteAttachment, error)
	FPDFDoc_GetAttachment(*requests.FPDFDoc_GetAttachment) (*responses.FPDFDoc_GetAttachment, error)
	FPDFDoc_GetAttachmentCount(*requests.FPDFDoc_GetAttachmentCount) (*responses.FPDFDoc_GetAttachmentCount, error)
	FPDFDoc_GetJavaScriptAction(*requests.FPDFDoc_GetJavaScriptAction) (*responses.FPDFDoc_GetJavaScriptAction, error)
	FPDFDoc_GetJavaScriptActionCount(*requests.FPDFDoc_GetJavaScriptActionCount) (*responses.FPDFDoc_GetJavaScriptActionCount, error)
	FPDFDoc_GetPageMode(*requests.FPDFDoc_GetPageMode) (*responses.FPDFDoc_GetPageMode, error)
	FPDFFont_Close(*requests.FPDFFont_Close) (*responses.FPDFFont_Close, error)
	FPDFFont_GetAscent(*requests.FPDFFont_GetAscent) (*responses.FPDFFont_GetAscent, error)
	FPDFFont_GetBaseFontName(*requests.FPDFFont_GetBaseFontName) (*responses.FPDFFont_GetBaseFontName, error)
	FPDFFont_GetDescent(*requests.FPDFFont_GetDescent) (*responses.FPDFFont_GetDescent, error)
	FPDFFont_GetFamilyName(*requests.FPDFFont_GetFamilyName) (*responses.FPDFFont_GetFamilyName, error)
	FPDFFont_GetFlags(*requests.FPDFFont_GetFlags) (*responses.FPDFFont_GetFlags, error)
	FPDFFont_GetFontData(*requests.FPDFFont_GetFontData) (*responses.FPDFFont_GetFontData, error)
	FPDFFont_GetGlyphPath(*requests.FPDFFont_GetGlyphPath) (*responses.FPDFFont_GetGlyphPath, error)
	FPDFFont_GetGlyphWidth(*requests.FPDFFont_GetGlyphWidth) (*responses.FPDFFont_GetGlyphWidth, error)
	FPDFFont_GetIsEmbedded(*requests.FPDFFont_GetIsEmbedded) (*responses.FPDFFont_GetIsEmbedded, error)
	FPDFFont_GetItalicAngle(*requests.FPDFFont_GetItalicAngle) (*responses.FPDFFont_GetItalicAngle, error)
	FPDFFont_GetWeight(*requests.FPDFFont_GetWeight) (*responses.FPDFFont_GetWeight, error)
	FPDFFormObj_CountObjects(*requests.FPDFFormObj_CountObjects) (*responses.FPDFFormObj_CountObjects, error)
	FPDFFormObj_GetObject(*requests.FPDFFormObj_GetObject) (*responses.FPDFFormObj_GetObject, error)
	FPDFFormObj_RemoveObject(*requests.FPDFFormObj_RemoveObject) (*responses.FPDFFormObj_RemoveObject, error)
	FPDFGlyphPath_CountGlyphSegments(*requests.FPDFGlyphPath_CountGlyphSegments) (*responses.FPDFGlyphPath_CountGlyphSegments, error)
	FPDFGlyphPath_GetGlyphPathSegment(*requests.FPDFGlyphPath_GetGlyphPathSegment) (*responses.FPDFGlyphPath_GetGlyphPathSegment, error)
	FPDFImageObj_GetBitmap(*requests.FPDFImageObj_GetBitmap) (*responses.FPDFImageObj_GetBitmap, error)
	FPDFImageObj_GetIccProfileDataDecoded(*requests.FPDFImageObj_GetIccProfileDataDecoded) (*responses.FPDFImageObj_GetIccProfileDataDecoded, error)
	FPDFImageObj_GetImageDataDecoded(*requests.FPDFImageObj_GetImageDataDecoded) (*responses.FPDFImageObj_GetImageDataDecoded, error)
	FPDFImageObj_GetImageDataRaw(*requests.FPDFImageObj_GetImageDataRaw) (*responses.FPDFImageObj_GetImageDataRaw, error)
	FPDFImageObj_GetImageFilter(*requests.FPDFImageObj_GetImageFilter) (*responses.FPDFImageObj_GetImageFilter, error)
	FPDFImageObj_GetImageFilterCount(*requests.FPDFImageObj_GetImageFilterCount) (*responses.FPDFImageObj_GetImageFilterCount, error)
	FPDFImageObj_GetImageMetadata(*requests.FPDFImageObj_GetImageMetadata) (*responses.FPDFImageObj_GetImageMetadata, error)
	FPDFImageObj_GetImagePixelSize(*requests.FPDFImageObj_GetImagePixelSize) (*responses.FPDFImageObj_GetImagePixelSize, error)
	FPDFImageObj_GetRenderedBitmap(*requests.FPDFImageObj_GetRenderedBitmap) (*responses.FPDFImageObj_GetRenderedBitmap, error)
	FPDFImageObj_LoadJpegFile(*requests.FPDFImageObj_LoadJpegFile) (*responses.FPDFImageObj_LoadJpegFile, error)
	FPDFImageObj_LoadJpegFileInline(*requests.FPDFImageObj_LoadJpegFileInline) (*responses.FPDFImageObj_LoadJpegFileInline, error)
	FPDFImageObj_SetBitmap(*requests.FPDFImageObj_SetBitmap) (*responses.FPDFImageObj_SetBitmap, error)
	FPDFImageObj_SetMatrix(*requests.FPDFImageObj_SetMatrix) (*responses.FPDFImageObj_SetMatrix, error)
	FPDFJavaScriptAction_GetName(*requests.FPDFJavaScriptAction_GetName) (*responses.FPDFJavaScriptAction_GetName, error)
	FPDFJavaScriptAction_GetScript(*requests.FPDFJavaScriptAction_GetScript) (*responses.FPDFJavaScriptAction_GetScript, error)
	FPDFLink_CloseWebLinks(*requests.FPDFLink_CloseWebLinks) (*responses.FPDFLink_CloseWebLinks, error)
	FPDFLink_CountQuadPoints(*requests.FPDFLink_CountQuadPoints) (*responses.FPDFLink_CountQuadPoints, error)
	FPDFLink_CountRects(*requests.FPDFLink_CountRects) (*responses.FPDFLink_CountRects, error)
	FPDFLink_CountWebLinks(*requests.FPDFLink_CountWebLinks) (*responses.FPDFLink_CountWebLinks, error)
	FPDFLink_Enumerate(*requests.FPDFLink_Enumerate) (*responses.FPDFLink_Enumerate, error)
	FPDFLink_GetAction(*requests.FPDFLink_GetAction) (*responses.FPDFLink_GetAction, error)
	FPDFLink_GetAnnot(*requests.FPDFLink_GetAnnot) (*responses.FPDFLink_GetAnnot, error)
	FPDFLink_GetAnnotRect(*requests.FPDFLink_GetAnnotRect) (*responses.FPDFLink_GetAnnotRect, error)
	FPDFLink_GetDest(*requests.FPDFLink_GetDest) (*responses.FPDFLink_GetDest, error)
	FPDFLink_GetLinkAtPoint(*requests.FPDFLink_GetLinkAtPoint) (*responses.FPDFLink_GetLinkAtPoint, error)
	FPDFLink_GetLinkZOrderAtPoint(*requests.FPDFLink_GetLinkZOrderAtPoint) (*responses.FPDFLink_GetLinkZOrderAtPoint, error)
	FPDFLink_GetQuadPoints(*requests.FPDFLink_GetQuadPoints) (*responses.FPDFLink_GetQuadPoints, error)
	FPDFLink_GetRect(*requests.FPDFLink_GetRect) (*responses.FPDFLink_GetRect, error)
	FPDFLink_GetTextRange(*requests.FPDFLink_GetTextRange) (*responses.FPDFLink_GetTextRange, error)
	FPDFLink_GetURL(*requests.FPDFLink_GetURL) (*responses.FPDFLink_GetURL, error)
	FPDFLink_LoadWebLinks(*requests.FPDFLink_LoadWebLinks) (*responses.FPDFLink_LoadWebLinks, error)
	FPDFPageObjMark_CountParams(*requests.FPDFPageObjMark_CountParams) (*responses.FPDFPageObjMark_CountParams, error)
	FPDFPageObjMark_GetName(*requests.FPDFPageObjMark_GetName) (*responses.FPDFPageObjMark_GetName, error)
	FPDFPageObjMark_GetParamBlobValue(*requests.FPDFPageObjMark_GetParamBlobValue) (*responses.FPDFPageObjMark_GetParamBlobValue, error)
	FPDFPageObjMark_GetParamIntValue(*requests.FPDFPageObjMark_GetParamIntValue) (*responses.FPDFPageObjMark_GetParamIntValue, error)
	FPDFPageObjMark_GetParamKey(*requests.FPDFPageObjMark_GetParamKey) (*responses.FPDFPageObjMark_GetParamKey, error)
	FPDFPageObjMark_GetParamStringValue(*requests.FPDFPageObjMark_GetParamStringValue) (*responses.FPDFPageObjMark_GetParamStringValue, error)
	FPDFPageObjMark_GetParamValueType(*requests.FPDFPageObjMark_GetParamValueType) (*responses.FPDFPageObjMark_GetParamValueType, error)
	FPDFPageObjMark_RemoveParam(*requests.FPDFPageObjMark_RemoveParam) (*responses.FPDFPageObjMark_RemoveParam, error)
	FPDFPageObjMark_SetBlobParam(*requests.FPDFPageObjMark_SetBlobParam) (*responses.FPDFPageObjMark_SetBlobParam, error)
	FPDFPageObjMark_SetIntParam(*requests.FPDFPageObjMark_SetIntParam) (*responses.FPDFPageObjMark_SetIntParam, error)
	FPDFPageObjMark_SetStringParam(*requests.FPDFPageObjMark_SetStringParam) (*responses.FPDFPageObjMark_SetStringParam, error)
	FPDFPageObj_AddMark(*requests.FPDFPageObj_AddMark) (*responses.FPDFPageObj_AddMark, error)
	FPDFPageObj_CountMarks(*requests.FPDFPageObj_CountMarks) (*responses.FPDFPageObj_CountMarks, error)
	FPDFPageObj_CreateNewPath(*requests.FPDFPageObj_CreateNewPath) (*responses.FPDFPageObj_CreateNewPath, error)
	FPDFPageObj_CreateNewRect(*requests.FPDFPageObj_CreateNewRect) (*responses.FPDFPageObj_CreateNewRect, error)
	FPDFPageObj_CreateTextObj(*requests.FPDFPageObj_CreateTextObj) (*responses.FPDFPageObj_CreateTextObj, error)
	FPDFPageObj_Destroy(*requests.FPDFPageObj_Destroy) (*responses.FPDFPageObj_Destroy, error)
	FPDFPageObj_GetBounds(*requests.FPDFPageObj_GetBounds) (*responses.FPDFPageObj_GetBounds, error)
	FPDFPageObj_GetClipPath(*requests.FPDFPageObj_GetClipPath) (*responses.FPDFPageObj_GetClipPath, error)
	FPDFPageObj_GetDashArray(*requests.FPDFPageObj_GetDashArray) (*responses.FPDFPageObj_GetDashArray, error)
	FPDFPageObj_GetDashCount(*requests.FPDFPageObj_GetDashCount) (*responses.FPDFPageObj_GetDashCount, error)
	FPDFPageObj_GetDashPhase(*requests.FPDFPageObj_GetDashPhase) (*responses.FPDFPageObj_GetDashPhase, error)
	FPDFPageObj_GetFillColor(*requests.FPDFPageObj_GetFillColor) (*responses.FPDFPageObj_GetFillColor, error)
	FPDFPageObj_GetIsActive(*requests.FPDFPageObj_GetIsActive) (*responses.FPDFPageObj_GetIsActive, error)
	FPDFPageObj_GetLineCap(*requests.FPDFPageObj_GetLineCap) (*responses.FPDFPageObj_GetLineCap, error)
	FPDFPageObj_GetLineJoin(*requests.FPDFPageObj_GetLineJoin) (*responses.FPDFPageObj_GetLineJoin, error)
	FPDFPageObj_GetMark(*requests.FPDFPageObj_GetMark) (*responses.FPDFPageObj_GetMark, error)
	FPDFPageObj_GetMarkedContentID(*requests.FPDFPageObj_GetMarkedContentID) (*responses.FPDFPageObj_GetMarkedContentID, error)
	FPDFPageObj_GetMatrix(*requests.FPDFPageObj_GetMatrix) (*responses.FPDFPageObj_GetMatrix, error)
	FPDFPageObj_GetRotatedBounds(*requests.FPDFPageObj_GetRotatedBounds) (*responses.FPDFPageObj_GetRotatedBounds, error)
	FPDFPageObj_GetStrokeColor(*requests.FPDFPageObj_GetStrokeColor) (*responses.FPDFPageObj_GetStrokeColor, error)
	FPDFPageObj_GetStrokeWidth(*requests.FPDFPageObj_GetStrokeWidth) (*responses.FPDFPageObj_GetStrokeWidth, error)
	FPDFPageObj_GetType(*requests.FPDFPageObj_GetType) (*responses.FPDFPageObj_GetType, error)
	FPDFPageObj_HasTransparency(*requests.FPDFPageObj_HasTransparency) (*responses.FPDFPageObj_HasTransparency, error)
	FPDFPageObj_NewImageObj(*requests.FPDFPageObj_NewImageObj) (*responses.FPDFPageObj_NewImageObj, error)
	FPDFPageObj_NewTextObj(*requests.FPDFPageObj_NewTextObj) (*responses.FPDFPageObj_NewTextObj, error)
	FPDFPageObj_RemoveMark(*requests.FPDFPageObj_RemoveMark) (*responses.FPDFPageObj_RemoveMark, error)
	FPDFPageObj_SetBlendMode(*requests.FPDFPageObj_SetBlendMode) (*responses.FPDFPageObj_SetBlendMode, error)
	FPDFPageObj_SetDashArray(*requests.FPDFPageObj_SetDashArray) (*responses.FPDFPageObj_SetDashArray, error)
	FPDFPageObj_SetDashPhase(*requests.FPDFPageObj_SetDashPhase) (*responses.FPDFPageObj_SetDashPhase, error)
	FPDFPageObj_SetFillColor(*requests.FPDFPageObj_SetFillColor) (*responses.FPDFPageObj_SetFillColor, error)
	FPDFPageObj_SetIsActive(*requests.FPDFPageObj_SetIsActive) (*responses.FPDFPageObj_SetIsActive, error)
	FPDFPageObj_SetLineCap(*requests.FPDFPageObj_SetLineCap) (*responses.FPDFPageObj_SetLineCap, error)
	FPDFPageObj_SetLineJoin(*requests.FPDFPageObj_SetLineJoin) (*responses.FPDFPageObj_SetLineJoin, error)
	FPDFPageObj_SetMatrix(*requests.FPDFPageObj_SetMatrix) (*responses.FPDFPageObj_SetMatrix, error)
	FPDFPageObj_SetStrokeColor(*requests.FPDFPageObj_SetStrokeColor) (*responses.FPDFPageObj_SetStrokeColor, error)
	FPDFPageObj_SetStrokeWidth(*requests.FPDFPageObj_SetStrokeWidth) (*responses.FPDFPageObj_SetStrokeWidth, error)
	FPDFPageObj_Transform(*requests.FPDFPageObj_Transform) (*responses.FPDFPageObj_Transform, error)
	FPDFPageObj_TransformClipPath(*requests.FPDFPageObj_TransformClipPath) (*responses.FPDFPageObj_TransformClipPath, error)
	FPDFPageObj_TransformF(*requests.FPDFPageObj_TransformF) (*responses.FPDFPageObj_TransformF, error)
	FPDFPage_CloseAnnot(*requests.FPDFPage_CloseAnnot) (*responses.FPDFPage_CloseAnnot, error)
	FPDFPage_CountObjects(*requests.FPDFPage_CountObjects) (*responses.FPDFPage_CountObjects, error)
	FPDFPage_CreateAnnot(*requests.FPDFPage_CreateAnnot) (*responses.FPDFPage_CreateAnnot, error)
	FPDFPage_Delete(*requests.FPDFPage_Delete) (*responses.FPDFPage_Delete, error)
	FPDFPage_Flatten(*requests.FPDFPage_Flatten) (*responses.FPDFPage_Flatten, error)
	FPDFPage_FormFieldZOrderAtPoint(*requests.FPDFPage_FormFieldZOrderAtPoint) (*responses.FPDFPage_FormFieldZOrderAtPoint, error)
	FPDFPage_GenerateContent(*requests.FPDFPage_GenerateContent) (*responses.FPDFPage_GenerateContent, error)
	FPDFPage_GetAnnot(*requests.FPDFPage_GetAnnot) (*responses.FPDFPage_GetAnnot, error)
	FPDFPage_GetAnnotCount(*requests.FPDFPage_GetAnnotCount) (*responses.FPDFPage_GetAnnotCount, error)
	FPDFPage_GetAnnotIndex(*requests.FPDFPage_GetAnnotIndex) (*responses.FPDFPage_GetAnnotIndex, error)
	FPDFPage_GetArtBox(*requests.FPDFPage_GetArtBox) (*responses.FPDFPage_GetArtBox, error)
	FPDFPage_GetBleedBox(*requests.FPDFPage_GetBleedBox) (*responses.FPDFPage_GetBleedBox, error)
	FPDFPage_GetCropBox(*requests.FPDFPage_GetCropBox) (*responses.FPDFPage_GetCropBox, error)
	FPDFPage_GetDecodedThumbnailData(*requests.FPDFPage_GetDecodedThumbnailData) (*responses.FPDFPage_GetDecodedThumbnailData, error)
	FPDFPage_GetMediaBox(*requests.FPDFPage_GetMediaBox) (*responses.FPDFPage_GetMediaBox, error)
	FPDFPage_GetObject(*requests.FPDFPage_GetObject) (*responses.FPDFPage_GetObject, error)
	FPDFPage_GetRawThumbnailData(*requests.FPDFPage_GetRawThumbnailData) (*responses.FPDFPage_GetRawThumbnailData, error)
	FPDFPage_GetRotation(*requests.FPDFPage_GetRotation) (*responses.FPDFPage_GetRotation, error)
	FPDFPage_GetThumbnailAsBitmap(*requests.FPDFPage_GetThumbnailAsBitmap) (*responses.FPDFPage_GetThumbnailAsBitmap, error)
	FPDFPage_GetTrimBox(*requests.FPDFPage_GetTrimBox) (*responses.FPDFPage_GetTrimBox, error)
	FPDFPage_HasFormFieldAtPoint(*requests.FPDFPage_HasFormFieldAtPoint) (*responses.FPDFPage_HasFormFieldAtPoint, error)
	FPDFPage_HasTransparency(*requests.FPDFPage_HasTransparency) (*responses.FPDFPage_HasTransparency, error)
	FPDFPage_InsertClipPath(*requests.FPDFPage_InsertClipPath) (*responses.FPDFPage_InsertClipPath, error)
	FPDFPage_InsertObject(*requests.FPDFPage_InsertObject) (*responses.FPDFPage_InsertObject, error)
	FPDFPage_InsertObjectAtIndex(*requests.FPDFPage_InsertObjectAtIndex) (*responses.FPDFPage_InsertObjectAtIndex, error)
	FPDFPage_New(*requests.FPDFPage_New) (*responses.FPDFPage_New, error)
	FPDFPage_RemoveAnnot(*requests.FPDFPage_RemoveAnnot) (*responses.FPDFPage_RemoveAnnot, error)
	FPDFPage_RemoveObject(*requests.FPDFPage_RemoveObject) (*responses.FPDFPage_RemoveObject, error)
	FPDFPage_SetArtBox(*requests.FPDFPage_SetArtBox) (*responses.FPDFPage_SetArtBox, error)
	FPDFPage_SetBleedBox(*requests.FPDFPage_SetBleedBox) (*responses.FPDFPage_SetBleedBox, error)
	FPDFPage_SetCropBox(*requests.FPDFPage_SetCropBox) (*responses.FPDFPage_SetCropBox, error)
	FPDFPage_SetMediaBox(*requests.FPDFPage_SetMediaBox) (*responses.FPDFPage_SetMediaBox, error)
	FPDFPage_SetRotation(*requests.FPDFPage_SetRotation) (*responses.FPDFPage_SetRotation, error)
	FPDFPage_SetTrimBox(*requests.FPDFPage_SetTrimBox) (*responses.FPDFPage_SetTrimBox, error)
	FPDFPage_TransFormWithClip(*requests.FPDFPage_TransFormWithClip) (*responses.FPDFPage_TransFormWithClip, error)
	FPDFPage_TransformAnnots(*requests.FPDFPage_TransformAnnots) (*responses.FPDFPage_TransformAnnots, error)
	FPDFPathSegment_GetClose(*requests.FPDFPathSegment_GetClose) (*responses.FPDFPathSegment_GetClose, error)
	FPDFPathSegment_GetPoint(*requests.FPDFPathSegment_GetPoint) (*responses.FPDFPathSegment_GetPoint, error)
	FPDFPathSegment_GetType(*requests.FPDFPathSegment_GetType) (*responses.FPDFPathSegment_GetType, error)
	FPDFPath_BezierTo(*requests.FPDFPath_BezierTo) (*responses.FPDFPath_BezierTo, error)
	FPDFPath_Close(*requests.FPDFPath_Close) (*responses.FPDFPath_Close, error)
	FPDFPath_CountSegments(*requests.FPDFPath_CountSegments) (*responses.FPDFPath_CountSegments, error)
	FPDFPath_GetDrawMode(*requests.FPDFPath_GetDrawMode) (*responses.FPDFPath_GetDrawMode, error)
	FPDFPath_GetPathSegment(*requests.FPDFPath_GetPathSegment) (*responses.FPDFPath_GetPathSegment, error)
	FPDFPath_LineTo(*requests.FPDFPath_LineTo) (*responses.FPDFPath_LineTo, error)
	FPDFPath_MoveTo(*requests.FPDFPath_MoveTo) (*responses.FPDFPath_MoveTo, error)
	FPDFPath_SetDrawMode(*requests.FPDFPath_SetDrawMode) (*responses.FPDFPath_SetDrawMode, error)
	FPDFSignatureObj_GetByteRange(*requests.FPDFSignatureObj_GetByteRange) (*responses.FPDFSignatureObj_GetByteRange, error)
	FPDFSignatureObj_GetContents(*requests.FPDFSignatureObj_GetContents) (*responses.FPDFSignatureObj_GetContents, error)
	FPDFSignatureObj_GetDocMDPPermission(*requests.FPDFSignatureObj_GetDocMDPPermission) (*responses.FPDFSignatureObj_GetDocMDPPermission, error)
	FPDFSignatureObj_GetReason(*requests.FPDFSignatureObj_GetReason) (*responses.FPDFSignatureObj_GetReason, error)
	FPDFSignatureObj_GetSubFilter(*requests.FPDFSignatureObj_GetSubFilter) (*responses.FPDFSignatureObj_GetSubFilter, error)
	FPDFSignatureObj_GetTime(*requests.FPDFSignatureObj_GetTime) (*responses.FPDFSignatureObj_GetTime, error)
	FPDFTextObj_GetFont(*requests.FPDFTextObj_GetFont) (*responses.FPDFTextObj_GetFont, error)
	FPDFTextObj_GetFontSize(*requests.FPDFTextObj_GetFontSize) (*responses.FPDFTextObj_GetFontSize, error)
	FPDFTextObj_GetRenderedBitmap(*requests.FPDFTextObj_GetRenderedBitmap) (*responses.FPDFTextObj_GetRenderedBitmap, error)
	FPDFTextObj_GetText(*requests.FPDFTextObj_GetText) (*responses.FPDFTextObj_GetText, error)
	FPDFTextObj_GetTextRenderMode(*requests.FPDFTextObj_GetTextRenderMode) (*responses.FPDFTextObj_GetTextRenderMode, error)
	FPDFTextObj_SetTextRenderMode(*requests.FPDFTextObj_SetTextRenderMode) (*responses.FPDFTextObj_SetTextRenderMode, error)
	FPDFText_ClosePage(*requests.FPDFText_ClosePage) (*responses.FPDFText_ClosePage, error)
	FPDFText_CountChars(*requests.FPDFText_CountChars) (*responses.FPDFText_CountChars, error)
	FPDFText_CountRects(*requests.FPDFText_CountRects) (*responses.FPDFText_CountRects, error)
	FPDFText_FindClose(*requests.FPDFText_FindClose) (*responses.FPDFText_FindClose, error)
	FPDFText_FindNext(*requests.FPDFText_FindNext) (*responses.FPDFText_FindNext, error)
	FPDFText_FindPrev(*requests.FPDFText_FindPrev) (*responses.FPDFText_FindPrev, error)
	FPDFText_FindStart(*requests.FPDFText_FindStart) (*responses.FPDFText_FindStart, error)
	FPDFText_GetBoundedText(*requests.FPDFText_GetBoundedText) (*responses.FPDFText_GetBoundedText, error)
	FPDFText_GetCharAngle(*requests.FPDFText_GetCharAngle) (*responses.FPDFText_GetCharAngle, error)
	FPDFText_GetCharBox(*requests.FPDFText_GetCharBox) (*responses.FPDFText_GetCharBox, error)
	FPDFText_GetCharIndexAtPos(*requests.FPDFText_GetCharIndexAtPos) (*responses.FPDFText_GetCharIndexAtPos, error)
	FPDFText_GetCharIndexFromTextIndex(*requests.FPDFText_GetCharIndexFromTextIndex) (*responses.FPDFText_GetCharIndexFromTextIndex, error)
	FPDFText_GetCharOrigin(*requests.FPDFText_GetCharOrigin) (*responses.FPDFText_GetCharOrigin, error)
	FPDFText_GetFillColor(*requests.FPDFText_GetFillColor) (*responses.FPDFText_GetFillColor, error)
	FPDFText_GetFontInfo(*requests.FPDFText_GetFontInfo) (*responses.FPDFText_GetFontInfo, error)
	FPDFText_GetFontSize(*requests.FPDFText_GetFontSize) (*responses.FPDFText_GetFontSize, error)
	FPDFText_GetFontWeight(*requests.FPDFText_GetFontWeight) (*responses.FPDFText_GetFontWeight, error)
	FPDFText_GetLooseCharBox(*requests.FPDFText_GetLooseCharBox) (*responses.FPDFText_GetLooseCharBox, error)
	FPDFText_GetMatrix(*requests.FPDFText_GetMatrix) (*responses.FPDFText_GetMatrix, error)
	FPDFText_GetRect(*requests.FPDFText_GetRect) (*responses.FPDFText_GetRect, error)
	FPDFText_GetSchCount(*requests.FPDFText_GetSchCount) (*responses.FPDFText_GetSchCount, error)
	FPDFText_GetSchResultIndex(*requests.FPDFText_GetSchResultIndex) (*responses.FPDFText_GetSchResultIndex, error)
	FPDFText_GetStrokeColor(*requests.FPDFText_GetStrokeColor) (*responses.FPDFText_GetStrokeColor, error)
	FPDFText_GetText(*requests.FPDFText_GetText) (*responses.FPDFText_GetText, error)
	FPDFText_GetTextIndexFromCharIndex(*requests.FPDFText_GetTextIndexFromCharIndex) (*responses.FPDFText_GetTextIndexFromCharIndex, error)
	FPDFText_GetTextObject(*requests.FPDFText_GetTextObject) (*responses.FPDFText_GetTextObject, error)
	FPDFText_GetUnicode(*requests.FPDFText_GetUnicode) (*responses.FPDFText_GetUnicode, error)
	FPDFText_HasUnicodeMapError(*requests.FPDFText_HasUnicodeMapError) (*responses.FPDFText_HasUnicodeMapError, error)
	FPDFText_IsGenerated(*requests.FPDFText_IsGenerated) (*responses.FPDFText_IsGenerated, error)
	FPDFText_IsHyphen(*requests.FPDFText_IsHyphen) (*responses.FPDFText_IsHyphen, error)
	FPDFText_LoadCidType2Font(*requests.FPDFText_LoadCidType2Font) (*responses.FPDFText_LoadCidType2Font, error)
	FPDFText_LoadFont(*requests.FPDFText_LoadFont) (*responses.FPDFText_LoadFont, error)
	FPDFText_LoadPage(*requests.FPDFText_LoadPage) (*responses.FPDFText_LoadPage, error)
	FPDFText_LoadStandardFont(*requests.FPDFText_LoadStandardFont) (*responses.FPDFText_LoadStandardFont, error)
	FPDFText_SetCharcodes(*requests.FPDFText_SetCharcodes) (*responses.FPDFText_SetCharcodes, error)
	FPDFText_SetText(*requests.FPDFText_SetText) (*responses.FPDFText_SetText, error)
	FPDF_CloseDocument(*requests.FPDF_CloseDocument) (*responses.FPDF_CloseDocument, error)
	FPDF_ClosePage(*requests.FPDF_ClosePage) (*responses.FPDF_ClosePage, error)
	FPDF_CloseXObject(*requests.FPDF_CloseXObject) (*responses.FPDF_CloseXObject, error)
	FPDF_CopyViewerPreferences(*requests.FPDF_CopyViewerPreferences) (*responses.FPDF_CopyViewerPreferences, error)
	FPDF_CountNamedDests(*requests.FPDF_CountNamedDests) (*responses.FPDF_CountNamedDests, error)
	FPDF_CreateClipPath(*requests.FPDF_CreateClipPath) (*responses.FPDF_CreateClipPath, error)
	FPDF_CreateNewDocument(*requests.FPDF_CreateNewDocument) (*responses.FPDF_CreateNewDocument, error)
	FPDF_DestroyClipPath(*requests.FPDF_DestroyClipPath) (*responses.FPDF_DestroyClipPath, error)
	FPDF_DeviceToPage(*requests.FPDF_DeviceToPage) (*responses.FPDF_DeviceToPage, error)
	FPDF_DocumentHasValidCrossReferenceTable(*requests.FPDF_DocumentHasValidCrossReferenceTable) (*responses.FPDF_DocumentHasValidCrossReferenceTable, error)
	FPDF_FFLDraw(*requests.FPDF_FFLDraw) (*responses.FPDF_FFLDraw, error)
	FPDF_GetDocPermissions(*requests.FPDF_GetDocPermissions) (*responses.FPDF_GetDocPermissions, error)
	FPDF_GetDocUserPermissions(*requests.FPDF_GetDocUserPermissions) (*responses.FPDF_GetDocUserPermissions, error)
	FPDF_GetFileIdentifier(*requests.FPDF_GetFileIdentifier) (*responses.FPDF_GetFileIdentifier, error)
	FPDF_GetFileVersion(*requests.FPDF_GetFileVersion) (*responses.FPDF_GetFileVersion, error)
	FPDF_GetFormType(*requests.FPDF_GetFormType) (*responses.FPDF_GetFormType, error)
	FPDF_GetLastError(*requests.FPDF_GetLastError) (*responses.FPDF_GetLastError, error)
	FPDF_GetMetaText(*requests.FPDF_GetMetaText) (*responses.FPDF_GetMetaText, error)
	FPDF_GetNamedDest(*requests.FPDF_GetNamedDest) (*responses.FPDF_GetNamedDest, error)
	FPDF_GetNamedDestByName(*requests.FPDF_GetNamedDestByName) (*responses.FPDF_GetNamedDestByName, error)
	FPDF_GetPageAAction(*requests.FPDF_GetPageAAction) (*responses.FPDF_GetPageAAction, error)
	FPDF_GetPageBoundingBox(*requests.FPDF_GetPageBoundingBox) (*responses.FPDF_GetPageBoundingBox, error)
	FPDF_GetPageCount(*requests.FPDF_GetPageCount) (*responses.FPDF_GetPageCount, error)
	FPDF_GetPageHeight(*requests.FPDF_GetPageHeight) (*responses.FPDF_GetPageHeight, error)
	FPDF_GetPageHeightF(*requests.FPDF_GetPageHeightF) (*responses.FPDF_GetPageHeightF, error)
	FPDF_GetPageLabel(*requests.FPDF_GetPageLabel) (*responses.FPDF_GetPageLabel, error)
	FPDF_GetPageSizeByIndex(*requests.FPDF_GetPageSizeByIndex) (*responses.FPDF_GetPageSizeByIndex, error)
	FPDF_GetPageSizeByIndexF(*requests.FPDF_GetPageSizeByIndexF) (*responses.FPDF_GetPageSizeByIndexF, error)
	FPDF_GetPageWidth(*requests.FPDF_GetPageWidth) (*responses.FPDF_GetPageWidth, error)
	FPDF_GetPageWidthF(*requests.FPDF_GetPageWidthF) (*responses.FPDF_GetPageWidthF, error)
	FPDF_GetSecurityHandlerRevision(*requests.FPDF_GetSecurityHandlerRevision) (*responses.FPDF_GetSecurityHandlerRevision, error)
	FPDF_GetSignatureCount(*requests.FPDF_GetSignatureCount) (*responses.FPDF_GetSignatureCount, error)
	FPDF_GetSignatureObject(*requests.FPDF_GetSignatureObject) (*responses.FPDF_GetSignatureObject, error)
	FPDF_GetTrailerEnds(*requests.FPDF_GetTrailerEnds) (*responses.FPDF_GetTrailerEnds, error)
	FPDF_GetXFAPacketContent(*requests.FPDF_GetXFAPacketContent) (*responses.FPDF_GetXFAPacketContent, error)
	FPDF_GetXFAPacketCount(*requests.FPDF_GetXFAPacketCount) (*responses.FPDF_GetXFAPacketCount, error)
	FPDF_GetXFAPacketName(*requests.FPDF_GetXFAPacketName) (*responses.FPDF_GetXFAPacketName, error)
	FPDF_ImportNPagesToOne(*requests.FPDF_ImportNPagesToOne) (*responses.FPDF_ImportNPagesToOne, error)
	FPDF_ImportPages(*requests.FPDF_ImportPages) (*responses.FPDF_ImportPages, error)
	FPDF_ImportPagesByIndex(*requests.FPDF_ImportPagesByIndex) (*responses.FPDF_ImportPagesByIndex, error)
	FPDF_LoadCustomDocument(*requests.FPDF_LoadCustomDocument) (*responses.FPDF_LoadCustomDocument, error)
	FPDF_LoadDocument(*requests.FPDF_LoadDocument) (*responses.FPDF_LoadDocument, error)
	FPDF_LoadMemDocument(*requests.FPDF_LoadMemDocument) (*responses.FPDF_LoadMemDocument, error)
	FPDF_LoadMemDocument64(*requests.FPDF_LoadMemDocument64) (*responses.FPDF_LoadMemDocument64, error)
	FPDF_LoadPage(*requests.FPDF_LoadPage) (*responses.FPDF_LoadPage, error)
	FPDF_LoadXFA(*requests.FPDF_LoadXFA) (*responses.FPDF_LoadXFA, error)
	FPDF_MovePages(*requests.FPDF_MovePages) (*responses.FPDF_MovePages, error)
	FPDF_NewFormObjectFromXObject(*requests.FPDF_NewFormObjectFromXObject) (*responses.FPDF_NewFormObjectFromXObject, error)
	FPDF_NewXObjectFromPage(*requests.FPDF_NewXObjectFromPage) (*responses.FPDF_NewXObjectFromPage, error)
	FPDF_PageToDevice(*requests.FPDF_PageToDevice) (*responses.FPDF_PageToDevice, error)
	FPDF_RemoveFormFieldHighlight(*requests.FPDF_RemoveFormFieldHighlight) (*responses.FPDF_RemoveFormFieldHighlight, error)
	FPDF_RenderPage(*requests.FPDF_RenderPage) (*responses.FPDF_RenderPage, error)
	FPDF_RenderPageBitmap(*requests.FPDF_RenderPageBitmap) (*responses.FPDF_RenderPageBitmap, error)
	FPDF_RenderPageBitmapWithColorScheme_Start(*requests.FPDF_RenderPageBitmapWithColorScheme_Start) (*responses.FPDF_RenderPageBitmapWithColorScheme_Start, error)
	FPDF_RenderPageBitmapWithMatrix(*requests.FPDF_RenderPageBitmapWithMatrix) (*responses.FPDF_RenderPageBitmapWithMatrix, error)
	FPDF_RenderPageBitmap_Start(*requests.FPDF_RenderPageBitmap_Start) (*responses.FPDF_RenderPageBitmap_Start, error)
	FPDF_RenderPage_Close(*requests.FPDF_RenderPage_Close) (*responses.FPDF_RenderPage_Close, error)
	FPDF_RenderPage_Continue(*requests.FPDF_RenderPage_Continue) (*responses.FPDF_RenderPage_Continue, error)
	FPDF_SaveAsCopy(*requests.FPDF_SaveAsCopy) (*responses.FPDF_SaveAsCopy, error)
	FPDF_SaveWithVersion(*requests.FPDF_SaveWithVersion) (*responses.FPDF_SaveWithVersion, error)
	FPDF_SetFormFieldHighlightAlpha(*requests.FPDF_SetFormFieldHighlightAlpha) (*responses.FPDF_SetFormFieldHighlightAlpha, error)
	FPDF_SetFormFieldHighlightColor(*requests.FPDF_SetFormFieldHighlightColor) (*responses.FPDF_SetFormFieldHighlightColor, error)
	FPDF_SetPrintMode(*requests.FPDF_SetPrintMode) (*responses.FPDF_SetPrintMode, error)
	FPDF_SetSandBoxPolicy(*requests.FPDF_SetSandBoxPolicy) (*responses.FPDF_SetSandBoxPolicy, error)
	FPDF_StructElement_Attr_CountChildren(*requests.FPDF_StructElement_Attr_CountChildren) (*responses.FPDF_StructElement_Attr_CountChildren, error)
	FPDF_StructElement_Attr_GetBlobValue(*requests.FPDF_StructElement_Attr_GetBlobValue) (*responses.FPDF_StructElement_Attr_GetBlobValue, error)
	FPDF_StructElement_Attr_GetBooleanValue(*requests.FPDF_StructElement_Attr_GetBooleanValue) (*responses.FPDF_StructElement_Attr_GetBooleanValue, error)
	FPDF_StructElement_Attr_GetChildAtIndex(*requests.FPDF_StructElement_Attr_GetChildAtIndex) (*responses.FPDF_StructElement_Attr_GetChildAtIndex, error)
	FPDF_StructElement_Attr_GetCount(*requests.FPDF_StructElement_Attr_GetCount) (*responses.FPDF_StructElement_Attr_GetCount, error)
	FPDF_StructElement_Attr_GetName(*requests.FPDF_StructElement_Attr_GetName) (*responses.FPDF_StructElement_Attr_GetName, error)
	FPDF_StructElement_Attr_GetNumberValue(*requests.FPDF_StructElement_Attr_GetNumberValue) (*responses.FPDF_StructElement_Attr_GetNumberValue, error)
	FPDF_StructElement_Attr_GetStringValue(*requests.FPDF_StructElement_Attr_GetStringValue) (*responses.FPDF_StructElement_Attr_GetStringValue, error)
	FPDF_StructElement_Attr_GetType(*requests.FPDF_StructElement_Attr_GetType) (*responses.FPDF_StructElement_Attr_GetType, error)
	FPDF_StructElement_Attr_GetValue(*requests.FPDF_StructElement_Attr_GetValue) (*responses.FPDF_StructElement_Attr_GetValue, error)
	FPDF_StructElement_CountChildren(*requests.FPDF_StructElement_CountChildren) (*responses.FPDF_StructElement_CountChildren, error)
	FPDF_StructElement_GetActualText(*requests.FPDF_StructElement_GetActualText) (*responses.FPDF_StructElement_GetActualText, error)
	FPDF_StructElement_GetAltText(*requests.FPDF_StructElement_GetAltText) (*responses.FPDF_StructElement_GetAltText, error)
	FPDF_StructElement_GetAttributeAtIndex(*requests.FPDF_StructElement_GetAttributeAtIndex) (*responses.FPDF_StructElement_GetAttributeAtIndex, error)
	FPDF_StructElement_GetAttributeCount(*requests.FPDF_StructElement_GetAttributeCount) (*responses.FPDF_StructElement_GetAttributeCount, error)
	FPDF_StructElement_GetChildAtIndex(*requests.FPDF_StructElement_GetChildAtIndex) (*responses.FPDF_StructElement_GetChildAtIndex, error)
	FPDF_StructElement_GetChildMarkedContentID(*requests.FPDF_StructElement_GetChildMarkedContentID) (*responses.FPDF_StructElement_GetChildMarkedContentID, error)
	FPDF_StructElement_GetID(*requests.FPDF_StructElement_GetID) (*responses.FPDF_StructElement_GetID, error)
	FPDF_StructElement_GetLang(*requests.FPDF_StructElement_GetLang) (*responses.FPDF_StructElement_GetLang, error)
	FPDF_StructElement_GetMarkedContentID(*requests.FPDF_StructElement_GetMarkedContentID) (*responses.FPDF_StructElement_GetMarkedContentID, error)
	FPDF_StructElement_GetMarkedContentIdAtIndex(*requests.FPDF_StructElement_GetMarkedContentIdAtIndex) (*responses.FPDF_StructElement_GetMarkedContentIdAtIndex, error)
	FPDF_StructElement_GetMarkedContentIdCount(*requests.FPDF_StructElement_GetMarkedContentIdCount) (*responses.FPDF_StructElement_GetMarkedContentIdCount, error)
	FPDF_StructElement_GetObjType(*requests.FPDF_StructElement_GetObjType) (*responses.FPDF_StructElement_GetObjType, error)
	FPDF_StructElement_GetParent(*requests.FPDF_StructElement_GetParent) (*responses.FPDF_StructElement_GetParent, error)
	FPDF_StructElement_GetStringAttribute(*requests.FPDF_StructElement_GetStringAttribute) (*responses.FPDF_StructElement_GetStringAttribute, error)
	FPDF_StructElement_GetTitle(*requests.FPDF_StructElement_GetTitle) (*responses.FPDF_StructElement_GetTitle, error)
	FPDF_StructElement_GetType(*requests.FPDF_StructElement_GetType) (*responses.FPDF_StructElement_GetType, error)
	FPDF_StructTree_Close(*requests.FPDF_StructTree_Close) (*responses.FPDF_StructTree_Close, error)
	FPDF_StructTree_CountChildren(*requests.FPDF_StructTree_CountChildren) (*responses.FPDF_StructTree_CountChildren, error)
	FPDF_StructTree_GetChildAtIndex(*requests.FPDF_StructTree_GetChildAtIndex) (*responses.FPDF_StructTree_GetChildAtIndex, error)
	FPDF_StructTree_GetForPage(*requests.FPDF_StructTree_GetForPage) (*responses.FPDF_StructTree_GetForPage, error)
	FPDF_VIEWERREF_GetDuplex(*requests.FPDF_VIEWERREF_GetDuplex) (*responses.FPDF_VIEWERREF_GetDuplex, error)
	FPDF_VIEWERREF_GetName(*requests.FPDF_VIEWERREF_GetName) (*responses.FPDF_VIEWERREF_GetName, error)
	FPDF_VIEWERREF_GetNumCopies(*requests.FPDF_VIEWERREF_GetNumCopies) (*responses.FPDF_VIEWERREF_GetNumCopies, error)
	FPDF_VIEWERREF_GetPrintPageRange(*requests.FPDF_VIEWERREF_GetPrintPageRange) (*responses.FPDF_VIEWERREF_GetPrintPageRange, error)
	FPDF_VIEWERREF_GetPrintPageRangeCount(*requests.FPDF_VIEWERREF_GetPrintPageRangeCount) (*responses.FPDF_VIEWERREF_GetPrintPageRangeCount, error)
	FPDF_VIEWERREF_GetPrintPageRangeElement(*requests.FPDF_VIEWERREF_GetPrintPageRangeElement) (*responses.FPDF_VIEWERREF_GetPrintPageRangeElement, error)
	FPDF_VIEWERREF_GetPrintScaling(*requests.FPDF_VIEWERREF_GetPrintScaling) (*responses.FPDF_VIEWERREF_GetPrintScaling, error)
	FSDK_SetLocaltimeFunction(*requests.FSDK_SetLocaltimeFunction) (*responses.FSDK_SetLocaltimeFunction, error)
	FSDK_SetTimeFunction(*requests.FSDK_SetTimeFunction) (*responses.FSDK_SetTimeFunction, error)
	FSDK_SetUnSpObjProcessHandler(*requests.FSDK_SetUnSpObjProcessHandler) (*responses.FSDK_SetUnSpObjProcessHandler, error)
	GetActionInfo(*requests.GetActionInfo) (*responses.GetActionInfo, error)
	GetAttachments(*requests.GetAttachments) (*responses.GetAttachments, error)
	GetBookmarks(*requests.GetBookmarks) (*responses.GetBookmarks, error)
	GetDestInfo(*requests.GetDestInfo) (*responses.GetDestInfo, error)
	GetForm(*requests.GetForm) (*responses.GetForm, error)
	GetJavaScriptActions(*requests.GetJavaScriptActions) (*responses.GetJavaScriptActions, error)
	GetMetaData(*requests.GetMetaData) (*responses.GetMetaData, error)
	GetPageSize(*requests.GetPageSize) (*responses.GetPageSize, error)
	GetPageSizeInPixels(*requests.GetPageSizeInPixels) (*responses.GetPageSizeInPixels, error)
	GetPageText(*requests.GetPageText) (*responses.GetPageText, error)
	GetPageTextStructured(*requests.GetPageTextStructured) (*responses.GetPageTextStructured, error)
	OpenDocument(*requests.OpenDocument) (*responses.OpenDocument, error)
	RenderPageInDPI(*requests.RenderPageInDPI) (*responses.RenderPageInDPI, error)
	RenderPageInPixels(*requests.RenderPageInPixels) (*responses.RenderPageInPixels, error)
	RenderPagesInDPI(*requests.RenderPagesInDPI) (*responses.RenderPagesInDPI, error)
	RenderPagesInPixels(*requests.RenderPagesInPixels) (*responses.RenderPagesInPixels, error)
	RenderToFile(*requests.RenderToFile) (*responses.RenderToFile, error)
	Close() error
}

func (g *PdfiumRPC) FORM_CanRedo(request *requests.FORM_CanRedo) (*responses.FORM_CanRedo, error) {
	resp := &responses.FORM_CanRedo{}
	err := g.client.Call("Plugin.FORM_CanRedo", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FORM_CanUndo(request *requests.FORM_CanUndo) (*responses.FORM_CanUndo, error) {
	resp := &responses.FORM_CanUndo{}
	err := g.client.Call("Plugin.FORM_CanUndo", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FORM_DoDocumentAAction(request *requests.FORM_DoDocumentAAction) (*responses.FORM_DoDocumentAAction, error) {
	resp := &responses.FORM_DoDocumentAAction{}
	err := g.client.Call("Plugin.FORM_DoDocumentAAction", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FORM_DoDocumentJSAction(request *requests.FORM_DoDocumentJSAction) (*responses.FORM_DoDocumentJSAction, error) {
	resp := &responses.FORM_DoDocumentJSAction{}
	err := g.client.Call("Plugin.FORM_DoDocumentJSAction", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FORM_DoDocumentOpenAction(request *requests.FORM_DoDocumentOpenAction) (*responses.FORM_DoDocumentOpenAction, error) {
	resp := &responses.FORM_DoDocumentOpenAction{}
	err := g.client.Call("Plugin.FORM_DoDocumentOpenAction", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FORM_DoPageAAction(request *requests.FORM_DoPageAAction) (*responses.FORM_DoPageAAction, error) {
	resp := &responses.FORM_DoPageAAction{}
	err := g.client.Call("Plugin.FORM_DoPageAAction", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FORM_ForceToKillFocus(request *requests.FORM_ForceToKillFocus) (*responses.FORM_ForceToKillFocus, error) {
	resp := &responses.FORM_ForceToKillFocus{}
	err := g.client.Call("Plugin.FORM_ForceToKillFocus", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FORM_GetFocusedAnnot(request *requests.FORM_GetFocusedAnnot) (*responses.FORM_GetFocusedAnnot, error) {
	resp := &responses.FORM_GetFocusedAnnot{}
	err := g.client.Call("Plugin.FORM_GetFocusedAnnot", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FORM_GetFocusedText(request *requests.FORM_GetFocusedText) (*responses.FORM_GetFocusedText, error) {
	resp := &responses.FORM_GetFocusedText{}
	err := g.client.Call("Plugin.FORM_GetFocusedText", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FORM_GetSelectedText(request *requests.FORM_GetSelectedText) (*responses.FORM_GetSelectedText, error) {
	resp := &responses.FORM_GetSelectedText{}
	err := g.client.Call("Plugin.FORM_GetSelectedText", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FORM_IsIndexSelected(request *requests.FORM_IsIndexSelected) (*responses.FORM_IsIndexSelected, error) {
	resp := &responses.FORM_IsIndexSelected{}
	err := g.client.Call("Plugin.FORM_IsIndexSelected", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FORM_OnAfterLoadPage(request *requests.FORM_OnAfterLoadPage) (*responses.FORM_OnAfterLoadPage, error) {
	resp := &responses.FORM_OnAfterLoadPage{}
	err := g.client.Call("Plugin.FORM_OnAfterLoadPage", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FORM_OnBeforeClosePage(request *requests.FORM_OnBeforeClosePage) (*responses.FORM_OnBeforeClosePage, error) {
	resp := &responses.FORM_OnBeforeClosePage{}
	err := g.client.Call("Plugin.FORM_OnBeforeClosePage", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FORM_OnChar(request *requests.FORM_OnChar) (*responses.FORM_OnChar, error) {
	resp := &responses.FORM_OnChar{}
	err := g.client.Call("Plugin.FORM_OnChar", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FORM_OnFocus(request *requests.FORM_OnFocus) (*responses.FORM_OnFocus, error) {
	resp := &responses.FORM_OnFocus{}
	err := g.client.Call("Plugin.FORM_OnFocus", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FORM_OnKeyDown(request *requests.FORM_OnKeyDown) (*responses.FORM_OnKeyDown, error) {
	resp := &responses.FORM_OnKeyDown{}
	err := g.client.Call("Plugin.FORM_OnKeyDown", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FORM_OnKeyUp(request *requests.FORM_OnKeyUp) (*responses.FORM_OnKeyUp, error) {
	resp := &responses.FORM_OnKeyUp{}
	err := g.client.Call("Plugin.FORM_OnKeyUp", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FORM_OnLButtonDoubleClick(request *requests.FORM_OnLButtonDoubleClick) (*responses.FORM_OnLButtonDoubleClick, error) {
	resp := &responses.FORM_OnLButtonDoubleClick{}
	err := g.client.Call("Plugin.FORM_OnLButtonDoubleClick", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FORM_OnLButtonDown(request *requests.FORM_OnLButtonDown) (*responses.FORM_OnLButtonDown, error) {
	resp := &responses.FORM_OnLButtonDown{}
	err := g.client.Call("Plugin.FORM_OnLButtonDown", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FORM_OnLButtonUp(request *requests.FORM_OnLButtonUp) (*responses.FORM_OnLButtonUp, error) {
	resp := &responses.FORM_OnLButtonUp{}
	err := g.client.Call("Plugin.FORM_OnLButtonUp", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FORM_OnMouseMove(request *requests.FORM_OnMouseMove) (*responses.FORM_OnMouseMove, error) {
	resp := &responses.FORM_OnMouseMove{}
	err := g.client.Call("Plugin.FORM_OnMouseMove", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FORM_OnMouseWheel(request *requests.FORM_OnMouseWheel) (*responses.FORM_OnMouseWheel, error) {
	resp := &responses.FORM_OnMouseWheel{}
	err := g.client.Call("Plugin.FORM_OnMouseWheel", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FORM_OnRButtonDown(request *requests.FORM_OnRButtonDown) (*responses.FORM_OnRButtonDown, error) {
	resp := &responses.FORM_OnRButtonDown{}
	err := g.client.Call("Plugin.FORM_OnRButtonDown", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FORM_OnRButtonUp(request *requests.FORM_OnRButtonUp) (*responses.FORM_OnRButtonUp, error) {
	resp := &responses.FORM_OnRButtonUp{}
	err := g.client.Call("Plugin.FORM_OnRButtonUp", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FORM_Redo(request *requests.FORM_Redo) (*responses.FORM_Redo, error) {
	resp := &responses.FORM_Redo{}
	err := g.client.Call("Plugin.FORM_Redo", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FORM_ReplaceAndKeepSelection(request *requests.FORM_ReplaceAndKeepSelection) (*responses.FORM_ReplaceAndKeepSelection, error) {
	resp := &responses.FORM_ReplaceAndKeepSelection{}
	err := g.client.Call("Plugin.FORM_ReplaceAndKeepSelection", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FORM_ReplaceSelection(request *requests.FORM_ReplaceSelection) (*responses.FORM_ReplaceSelection, error) {
	resp := &responses.FORM_ReplaceSelection{}
	err := g.client.Call("Plugin.FORM_ReplaceSelection", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FORM_SelectAllText(request *requests.FORM_SelectAllText) (*responses.FORM_SelectAllText, error) {
	resp := &responses.FORM_SelectAllText{}
	err := g.client.Call("Plugin.FORM_SelectAllText", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FORM_SetFocusedAnnot(request *requests.FORM_SetFocusedAnnot) (*responses.FORM_SetFocusedAnnot, error) {
	resp := &responses.FORM_SetFocusedAnnot{}
	err := g.client.Call("Plugin.FORM_SetFocusedAnnot", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FORM_SetIndexSelected(request *requests.FORM_SetIndexSelected) (*responses.FORM_SetIndexSelected, error) {
	resp := &responses.FORM_SetIndexSelected{}
	err := g.client.Call("Plugin.FORM_SetIndexSelected", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FORM_Undo(request *requests.FORM_Undo) (*responses.FORM_Undo, error) {
	resp := &responses.FORM_Undo{}
	err := g.client.Call("Plugin.FORM_Undo", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAction_GetDest(request *requests.FPDFAction_GetDest) (*responses.FPDFAction_GetDest, error) {
	resp := &responses.FPDFAction_GetDest{}
	err := g.client.Call("Plugin.FPDFAction_GetDest", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAction_GetFilePath(request *requests.FPDFAction_GetFilePath) (*responses.FPDFAction_GetFilePath, error) {
	resp := &responses.FPDFAction_GetFilePath{}
	err := g.client.Call("Plugin.FPDFAction_GetFilePath", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAction_GetType(request *requests.FPDFAction_GetType) (*responses.FPDFAction_GetType, error) {
	resp := &responses.FPDFAction_GetType{}
	err := g.client.Call("Plugin.FPDFAction_GetType", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAction_GetURIPath(request *requests.FPDFAction_GetURIPath) (*responses.FPDFAction_GetURIPath, error) {
	resp := &responses.FPDFAction_GetURIPath{}
	err := g.client.Call("Plugin.FPDFAction_GetURIPath", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_AddFileAttachment(request *requests.FPDFAnnot_AddFileAttachment) (*responses.FPDFAnnot_AddFileAttachment, error) {
	resp := &responses.FPDFAnnot_AddFileAttachment{}
	err := g.client.Call("Plugin.FPDFAnnot_AddFileAttachment", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_AddInkStroke(request *requests.FPDFAnnot_AddInkStroke) (*responses.FPDFAnnot_AddInkStroke, error) {
	resp := &responses.FPDFAnnot_AddInkStroke{}
	err := g.client.Call("Plugin.FPDFAnnot_AddInkStroke", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_AppendAttachmentPoints(request *requests.FPDFAnnot_AppendAttachmentPoints) (*responses.FPDFAnnot_AppendAttachmentPoints, error) {
	resp := &responses.FPDFAnnot_AppendAttachmentPoints{}
	err := g.client.Call("Plugin.FPDFAnnot_AppendAttachmentPoints", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_AppendObject(request *requests.FPDFAnnot_AppendObject) (*responses.FPDFAnnot_AppendObject, error) {
	resp := &responses.FPDFAnnot_AppendObject{}
	err := g.client.Call("Plugin.FPDFAnnot_AppendObject", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_CountAttachmentPoints(request *requests.FPDFAnnot_CountAttachmentPoints) (*responses.FPDFAnnot_CountAttachmentPoints, error) {
	resp := &responses.FPDFAnnot_CountAttachmentPoints{}
	err := g.client.Call("Plugin.FPDFAnnot_CountAttachmentPoints", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetAP(request *requests.FPDFAnnot_GetAP) (*responses.FPDFAnnot_GetAP, error) {
	resp := &responses.FPDFAnnot_GetAP{}
	err := g.client.Call("Plugin.FPDFAnnot_GetAP", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetAttachmentPoints(request *requests.FPDFAnnot_GetAttachmentPoints) (*responses.FPDFAnnot_GetAttachmentPoints, error) {
	resp := &responses.FPDFAnnot_GetAttachmentPoints{}
	err := g.client.Call("Plugin.FPDFAnnot_GetAttachmentPoints", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetBorder(request *requests.FPDFAnnot_GetBorder) (*responses.FPDFAnnot_GetBorder, error) {
	resp := &responses.FPDFAnnot_GetBorder{}
	err := g.client.Call("Plugin.FPDFAnnot_GetBorder", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetColor(request *requests.FPDFAnnot_GetColor) (*responses.FPDFAnnot_GetColor, error) {
	resp := &responses.FPDFAnnot_GetColor{}
	err := g.client.Call("Plugin.FPDFAnnot_GetColor", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetFileAttachment(request *requests.FPDFAnnot_GetFileAttachment) (*responses.FPDFAnnot_GetFileAttachment, error) {
	resp := &responses.FPDFAnnot_GetFileAttachment{}
	err := g.client.Call("Plugin.FPDFAnnot_GetFileAttachment", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetFlags(request *requests.FPDFAnnot_GetFlags) (*responses.FPDFAnnot_GetFlags, error) {
	resp := &responses.FPDFAnnot_GetFlags{}
	err := g.client.Call("Plugin.FPDFAnnot_GetFlags", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetFocusableSubtypes(request *requests.FPDFAnnot_GetFocusableSubtypes) (*responses.FPDFAnnot_GetFocusableSubtypes, error) {
	resp := &responses.FPDFAnnot_GetFocusableSubtypes{}
	err := g.client.Call("Plugin.FPDFAnnot_GetFocusableSubtypes", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetFocusableSubtypesCount(request *requests.FPDFAnnot_GetFocusableSubtypesCount) (*responses.FPDFAnnot_GetFocusableSubtypesCount, error) {
	resp := &responses.FPDFAnnot_GetFocusableSubtypesCount{}
	err := g.client.Call("Plugin.FPDFAnnot_GetFocusableSubtypesCount", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetFontColor(request *requests.FPDFAnnot_GetFontColor) (*responses.FPDFAnnot_GetFontColor, error) {
	resp := &responses.FPDFAnnot_GetFontColor{}
	err := g.client.Call("Plugin.FPDFAnnot_GetFontColor", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetFontSize(request *requests.FPDFAnnot_GetFontSize) (*responses.FPDFAnnot_GetFontSize, error) {
	resp := &responses.FPDFAnnot_GetFontSize{}
	err := g.client.Call("Plugin.FPDFAnnot_GetFontSize", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetFormAdditionalActionJavaScript(request *requests.FPDFAnnot_GetFormAdditionalActionJavaScript) (*responses.FPDFAnnot_GetFormAdditionalActionJavaScript, error) {
	resp := &responses.FPDFAnnot_GetFormAdditionalActionJavaScript{}
	err := g.client.Call("Plugin.FPDFAnnot_GetFormAdditionalActionJavaScript", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetFormControlCount(request *requests.FPDFAnnot_GetFormControlCount) (*responses.FPDFAnnot_GetFormControlCount, error) {
	resp := &responses.FPDFAnnot_GetFormControlCount{}
	err := g.client.Call("Plugin.FPDFAnnot_GetFormControlCount", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetFormControlIndex(request *requests.FPDFAnnot_GetFormControlIndex) (*responses.FPDFAnnot_GetFormControlIndex, error) {
	resp := &responses.FPDFAnnot_GetFormControlIndex{}
	err := g.client.Call("Plugin.FPDFAnnot_GetFormControlIndex", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetFormFieldAlternateName(request *requests.FPDFAnnot_GetFormFieldAlternateName) (*responses.FPDFAnnot_GetFormFieldAlternateName, error) {
	resp := &responses.FPDFAnnot_GetFormFieldAlternateName{}
	err := g.client.Call("Plugin.FPDFAnnot_GetFormFieldAlternateName", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetFormFieldAtPoint(request *requests.FPDFAnnot_GetFormFieldAtPoint) (*responses.FPDFAnnot_GetFormFieldAtPoint, error) {
	resp := &responses.FPDFAnnot_GetFormFieldAtPoint{}
	err := g.client.Call("Plugin.FPDFAnnot_GetFormFieldAtPoint", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetFormFieldExportValue(request *requests.FPDFAnnot_GetFormFieldExportValue) (*responses.FPDFAnnot_GetFormFieldExportValue, error) {
	resp := &responses.FPDFAnnot_GetFormFieldExportValue{}
	err := g.client.Call("Plugin.FPDFAnnot_GetFormFieldExportValue", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetFormFieldFlags(request *requests.FPDFAnnot_GetFormFieldFlags) (*responses.FPDFAnnot_GetFormFieldFlags, error) {
	resp := &responses.FPDFAnnot_GetFormFieldFlags{}
	err := g.client.Call("Plugin.FPDFAnnot_GetFormFieldFlags", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetFormFieldName(request *requests.FPDFAnnot_GetFormFieldName) (*responses.FPDFAnnot_GetFormFieldName, error) {
	resp := &responses.FPDFAnnot_GetFormFieldName{}
	err := g.client.Call("Plugin.FPDFAnnot_GetFormFieldName", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetFormFieldType(request *requests.FPDFAnnot_GetFormFieldType) (*responses.FPDFAnnot_GetFormFieldType, error) {
	resp := &responses.FPDFAnnot_GetFormFieldType{}
	err := g.client.Call("Plugin.FPDFAnnot_GetFormFieldType", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetFormFieldValue(request *requests.FPDFAnnot_GetFormFieldValue) (*responses.FPDFAnnot_GetFormFieldValue, error) {
	resp := &responses.FPDFAnnot_GetFormFieldValue{}
	err := g.client.Call("Plugin.FPDFAnnot_GetFormFieldValue", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetInkListCount(request *requests.FPDFAnnot_GetInkListCount) (*responses.FPDFAnnot_GetInkListCount, error) {
	resp := &responses.FPDFAnnot_GetInkListCount{}
	err := g.client.Call("Plugin.FPDFAnnot_GetInkListCount", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetInkListPath(request *requests.FPDFAnnot_GetInkListPath) (*responses.FPDFAnnot_GetInkListPath, error) {
	resp := &responses.FPDFAnnot_GetInkListPath{}
	err := g.client.Call("Plugin.FPDFAnnot_GetInkListPath", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetLine(request *requests.FPDFAnnot_GetLine) (*responses.FPDFAnnot_GetLine, error) {
	resp := &responses.FPDFAnnot_GetLine{}
	err := g.client.Call("Plugin.FPDFAnnot_GetLine", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetLink(request *requests.FPDFAnnot_GetLink) (*responses.FPDFAnnot_GetLink, error) {
	resp := &responses.FPDFAnnot_GetLink{}
	err := g.client.Call("Plugin.FPDFAnnot_GetLink", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetLinkedAnnot(request *requests.FPDFAnnot_GetLinkedAnnot) (*responses.FPDFAnnot_GetLinkedAnnot, error) {
	resp := &responses.FPDFAnnot_GetLinkedAnnot{}
	err := g.client.Call("Plugin.FPDFAnnot_GetLinkedAnnot", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetNumberValue(request *requests.FPDFAnnot_GetNumberValue) (*responses.FPDFAnnot_GetNumberValue, error) {
	resp := &responses.FPDFAnnot_GetNumberValue{}
	err := g.client.Call("Plugin.FPDFAnnot_GetNumberValue", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetObject(request *requests.FPDFAnnot_GetObject) (*responses.FPDFAnnot_GetObject, error) {
	resp := &responses.FPDFAnnot_GetObject{}
	err := g.client.Call("Plugin.FPDFAnnot_GetObject", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetObjectCount(request *requests.FPDFAnnot_GetObjectCount) (*responses.FPDFAnnot_GetObjectCount, error) {
	resp := &responses.FPDFAnnot_GetObjectCount{}
	err := g.client.Call("Plugin.FPDFAnnot_GetObjectCount", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetOptionCount(request *requests.FPDFAnnot_GetOptionCount) (*responses.FPDFAnnot_GetOptionCount, error) {
	resp := &responses.FPDFAnnot_GetOptionCount{}
	err := g.client.Call("Plugin.FPDFAnnot_GetOptionCount", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetOptionLabel(request *requests.FPDFAnnot_GetOptionLabel) (*responses.FPDFAnnot_GetOptionLabel, error) {
	resp := &responses.FPDFAnnot_GetOptionLabel{}
	err := g.client.Call("Plugin.FPDFAnnot_GetOptionLabel", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetRect(request *requests.FPDFAnnot_GetRect) (*responses.FPDFAnnot_GetRect, error) {
	resp := &responses.FPDFAnnot_GetRect{}
	err := g.client.Call("Plugin.FPDFAnnot_GetRect", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetStringValue(request *requests.FPDFAnnot_GetStringValue) (*responses.FPDFAnnot_GetStringValue, error) {
	resp := &responses.FPDFAnnot_GetStringValue{}
	err := g.client.Call("Plugin.FPDFAnnot_GetStringValue", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetSubtype(request *requests.FPDFAnnot_GetSubtype) (*responses.FPDFAnnot_GetSubtype, error) {
	resp := &responses.FPDFAnnot_GetSubtype{}
	err := g.client.Call("Plugin.FPDFAnnot_GetSubtype", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetValueType(request *requests.FPDFAnnot_GetValueType) (*responses.FPDFAnnot_GetValueType, error) {
	resp := &responses.FPDFAnnot_GetValueType{}
	err := g.client.Call("Plugin.FPDFAnnot_GetValueType", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_GetVertices(request *requests.FPDFAnnot_GetVertices) (*responses.FPDFAnnot_GetVertices, error) {
	resp := &responses.FPDFAnnot_GetVertices{}
	err := g.client.Call("Plugin.FPDFAnnot_GetVertices", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_HasAttachmentPoints(request *requests.FPDFAnnot_HasAttachmentPoints) (*responses.FPDFAnnot_HasAttachmentPoints, error) {
	resp := &responses.FPDFAnnot_HasAttachmentPoints{}
	err := g.client.Call("Plugin.FPDFAnnot_HasAttachmentPoints", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_HasKey(request *requests.FPDFAnnot_HasKey) (*responses.FPDFAnnot_HasKey, error) {
	resp := &responses.FPDFAnnot_HasKey{}
	err := g.client.Call("Plugin.FPDFAnnot_HasKey", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_IsChecked(request *requests.FPDFAnnot_IsChecked) (*responses.FPDFAnnot_IsChecked, error) {
	resp := &responses.FPDFAnnot_IsChecked{}
	err := g.client.Call("Plugin.FPDFAnnot_IsChecked", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_IsObjectSupportedSubtype(request *requests.FPDFAnnot_IsObjectSupportedSubtype) (*responses.FPDFAnnot_IsObjectSupportedSubtype, error) {
	resp := &responses.FPDFAnnot_IsObjectSupportedSubtype{}
	err := g.client.Call("Plugin.FPDFAnnot_IsObjectSupportedSubtype", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_IsOptionSelected(request *requests.FPDFAnnot_IsOptionSelected) (*responses.FPDFAnnot_IsOptionSelected, error) {
	resp := &responses.FPDFAnnot_IsOptionSelected{}
	err := g.client.Call("Plugin.FPDFAnnot_IsOptionSelected", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_IsSupportedSubtype(request *requests.FPDFAnnot_IsSupportedSubtype) (*responses.FPDFAnnot_IsSupportedSubtype, error) {
	resp := &responses.FPDFAnnot_IsSupportedSubtype{}
	err := g.client.Call("Plugin.FPDFAnnot_IsSupportedSubtype", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_RemoveInkList(request *requests.FPDFAnnot_RemoveInkList) (*responses.FPDFAnnot_RemoveInkList, error) {
	resp := &responses.FPDFAnnot_RemoveInkList{}
	err := g.client.Call("Plugin.FPDFAnnot_RemoveInkList", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_RemoveObject(request *requests.FPDFAnnot_RemoveObject) (*responses.FPDFAnnot_RemoveObject, error) {
	resp := &responses.FPDFAnnot_RemoveObject{}
	err := g.client.Call("Plugin.FPDFAnnot_RemoveObject", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_SetAP(request *requests.FPDFAnnot_SetAP) (*responses.FPDFAnnot_SetAP, error) {
	resp := &responses.FPDFAnnot_SetAP{}
	err := g.client.Call("Plugin.FPDFAnnot_SetAP", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_SetAttachmentPoints(request *requests.FPDFAnnot_SetAttachmentPoints) (*responses.FPDFAnnot_SetAttachmentPoints, error) {
	resp := &responses.FPDFAnnot_SetAttachmentPoints{}
	err := g.client.Call("Plugin.FPDFAnnot_SetAttachmentPoints", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_SetBorder(request *requests.FPDFAnnot_SetBorder) (*responses.FPDFAnnot_SetBorder, error) {
	resp := &responses.FPDFAnnot_SetBorder{}
	err := g.client.Call("Plugin.FPDFAnnot_SetBorder", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_SetColor(request *requests.FPDFAnnot_SetColor) (*responses.FPDFAnnot_SetColor, error) {
	resp := &responses.FPDFAnnot_SetColor{}
	err := g.client.Call("Plugin.FPDFAnnot_SetColor", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_SetFlags(request *requests.FPDFAnnot_SetFlags) (*responses.FPDFAnnot_SetFlags, error) {
	resp := &responses.FPDFAnnot_SetFlags{}
	err := g.client.Call("Plugin.FPDFAnnot_SetFlags", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_SetFocusableSubtypes(request *requests.FPDFAnnot_SetFocusableSubtypes) (*responses.FPDFAnnot_SetFocusableSubtypes, error) {
	resp := &responses.FPDFAnnot_SetFocusableSubtypes{}
	err := g.client.Call("Plugin.FPDFAnnot_SetFocusableSubtypes", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_SetFontColor(request *requests.FPDFAnnot_SetFontColor) (*responses.FPDFAnnot_SetFontColor, error) {
	resp := &responses.FPDFAnnot_SetFontColor{}
	err := g.client.Call("Plugin.FPDFAnnot_SetFontColor", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_SetFormFieldFlags(request *requests.FPDFAnnot_SetFormFieldFlags) (*responses.FPDFAnnot_SetFormFieldFlags, error) {
	resp := &responses.FPDFAnnot_SetFormFieldFlags{}
	err := g.client.Call("Plugin.FPDFAnnot_SetFormFieldFlags", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_SetRect(request *requests.FPDFAnnot_SetRect) (*responses.FPDFAnnot_SetRect, error) {
	resp := &responses.FPDFAnnot_SetRect{}
	err := g.client.Call("Plugin.FPDFAnnot_SetRect", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_SetStringValue(request *requests.FPDFAnnot_SetStringValue) (*responses.FPDFAnnot_SetStringValue, error) {
	resp := &responses.FPDFAnnot_SetStringValue{}
	err := g.client.Call("Plugin.FPDFAnnot_SetStringValue", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_SetURI(request *requests.FPDFAnnot_SetURI) (*responses.FPDFAnnot_SetURI, error) {
	resp := &responses.FPDFAnnot_SetURI{}
	err := g.client.Call("Plugin.FPDFAnnot_SetURI", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAnnot_UpdateObject(request *requests.FPDFAnnot_UpdateObject) (*responses.FPDFAnnot_UpdateObject, error) {
	resp := &responses.FPDFAnnot_UpdateObject{}
	err := g.client.Call("Plugin.FPDFAnnot_UpdateObject", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAttachment_GetFile(request *requests.FPDFAttachment_GetFile) (*responses.FPDFAttachment_GetFile, error) {
	resp := &responses.FPDFAttachment_GetFile{}
	err := g.client.Call("Plugin.FPDFAttachment_GetFile", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAttachment_GetName(request *requests.FPDFAttachment_GetName) (*responses.FPDFAttachment_GetName, error) {
	resp := &responses.FPDFAttachment_GetName{}
	err := g.client.Call("Plugin.FPDFAttachment_GetName", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAttachment_GetStringValue(request *requests.FPDFAttachment_GetStringValue) (*responses.FPDFAttachment_GetStringValue, error) {
	resp := &responses.FPDFAttachment_GetStringValue{}
	err := g.client.Call("Plugin.FPDFAttachment_GetStringValue", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAttachment_GetSubtype(request *requests.FPDFAttachment_GetSubtype) (*responses.FPDFAttachment_GetSubtype, error) {
	resp := &responses.FPDFAttachment_GetSubtype{}
	err := g.client.Call("Plugin.FPDFAttachment_GetSubtype", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAttachment_GetValueType(request *requests.FPDFAttachment_GetValueType) (*responses.FPDFAttachment_GetValueType, error) {
	resp := &responses.FPDFAttachment_GetValueType{}
	err := g.client.Call("Plugin.FPDFAttachment_GetValueType", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAttachment_HasKey(request *requests.FPDFAttachment_HasKey) (*responses.FPDFAttachment_HasKey, error) {
	resp := &responses.FPDFAttachment_HasKey{}
	err := g.client.Call("Plugin.FPDFAttachment_HasKey", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAttachment_SetFile(request *requests.FPDFAttachment_SetFile) (*responses.FPDFAttachment_SetFile, error) {
	resp := &responses.FPDFAttachment_SetFile{}
	err := g.client.Call("Plugin.FPDFAttachment_SetFile", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAttachment_SetStringValue(request *requests.FPDFAttachment_SetStringValue) (*responses.FPDFAttachment_SetStringValue, error) {
	resp := &responses.FPDFAttachment_SetStringValue{}
	err := g.client.Call("Plugin.FPDFAttachment_SetStringValue", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAvail_Create(request *requests.FPDFAvail_Create) (*responses.FPDFAvail_Create, error) {
	resp := &responses.FPDFAvail_Create{}
	err := g.client.Call("Plugin.FPDFAvail_Create", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAvail_Destroy(request *requests.FPDFAvail_Destroy) (*responses.FPDFAvail_Destroy, error) {
	resp := &responses.FPDFAvail_Destroy{}
	err := g.client.Call("Plugin.FPDFAvail_Destroy", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAvail_GetDocument(request *requests.FPDFAvail_GetDocument) (*responses.FPDFAvail_GetDocument, error) {
	resp := &responses.FPDFAvail_GetDocument{}
	err := g.client.Call("Plugin.FPDFAvail_GetDocument", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAvail_GetFirstPageNum(request *requests.FPDFAvail_GetFirstPageNum) (*responses.FPDFAvail_GetFirstPageNum, error) {
	resp := &responses.FPDFAvail_GetFirstPageNum{}
	err := g.client.Call("Plugin.FPDFAvail_GetFirstPageNum", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAvail_IsDocAvail(request *requests.FPDFAvail_IsDocAvail) (*responses.FPDFAvail_IsDocAvail, error) {
	resp := &responses.FPDFAvail_IsDocAvail{}
	err := g.client.Call("Plugin.FPDFAvail_IsDocAvail", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAvail_IsFormAvail(request *requests.FPDFAvail_IsFormAvail) (*responses.FPDFAvail_IsFormAvail, error) {
	resp := &responses.FPDFAvail_IsFormAvail{}
	err := g.client.Call("Plugin.FPDFAvail_IsFormAvail", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAvail_IsLinearized(request *requests.FPDFAvail_IsLinearized) (*responses.FPDFAvail_IsLinearized, error) {
	resp := &responses.FPDFAvail_IsLinearized{}
	err := g.client.Call("Plugin.FPDFAvail_IsLinearized", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAvail_IsPageAvail(request *requests.FPDFAvail_IsPageAvail) (*responses.FPDFAvail_IsPageAvail, error) {
	resp := &responses.FPDFAvail_IsPageAvail{}
	err := g.client.Call("Plugin.FPDFAvail_IsPageAvail", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFBitmap_Create(request *requests.FPDFBitmap_Create) (*responses.FPDFBitmap_Create, error) {
	resp := &responses.FPDFBitmap_Create{}
	err := g.client.Call("Plugin.FPDFBitmap_Create", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFBitmap_CreateEx(request *requests.FPDFBitmap_CreateEx) (*responses.FPDFBitmap_CreateEx, error) {
	resp := &responses.FPDFBitmap_CreateEx{}
	err := g.client.Call("Plugin.FPDFBitmap_CreateEx", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFBitmap_Destroy(request *requests.FPDFBitmap_Destroy) (*responses.FPDFBitmap_Destroy, error) {
	resp := &responses.FPDFBitmap_Destroy{}
	err := g.client.Call("Plugin.FPDFBitmap_Destroy", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFBitmap_FillRect(request *requests.FPDFBitmap_FillRect) (*responses.FPDFBitmap_FillRect, error) {
	resp := &responses.FPDFBitmap_FillRect{}
	err := g.client.Call("Plugin.FPDFBitmap_FillRect", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFBitmap_GetBuffer(request *requests.FPDFBitmap_GetBuffer) (*responses.FPDFBitmap_GetBuffer, error) {
	resp := &responses.FPDFBitmap_GetBuffer{}
	err := g.client.Call("Plugin.FPDFBitmap_GetBuffer", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFBitmap_GetFormat(request *requests.FPDFBitmap_GetFormat) (*responses.FPDFBitmap_GetFormat, error) {
	resp := &responses.FPDFBitmap_GetFormat{}
	err := g.client.Call("Plugin.FPDFBitmap_GetFormat", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFBitmap_GetHeight(request *requests.FPDFBitmap_GetHeight) (*responses.FPDFBitmap_GetHeight, error) {
	resp := &responses.FPDFBitmap_GetHeight{}
	err := g.client.Call("Plugin.FPDFBitmap_GetHeight", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFBitmap_GetStride(request *requests.FPDFBitmap_GetStride) (*responses.FPDFBitmap_GetStride, error) {
	resp := &responses.FPDFBitmap_GetStride{}
	err := g.client.Call("Plugin.FPDFBitmap_GetStride", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFBitmap_GetWidth(request *requests.FPDFBitmap_GetWidth) (*responses.FPDFBitmap_GetWidth, error) {
	resp := &responses.FPDFBitmap_GetWidth{}
	err := g.client.Call("Plugin.FPDFBitmap_GetWidth", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFBookmark_Find(request *requests.FPDFBookmark_Find) (*responses.FPDFBookmark_Find, error) {
	resp := &responses.FPDFBookmark_Find{}
	err := g.client.Call("Plugin.FPDFBookmark_Find", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFBookmark_GetAction(request *requests.FPDFBookmark_GetAction) (*responses.FPDFBookmark_GetAction, error) {
	resp := &responses.FPDFBookmark_GetAction{}
	err := g.client.Call("Plugin.FPDFBookmark_GetAction", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFBookmark_GetCount(request *requests.FPDFBookmark_GetCount) (*responses.FPDFBookmark_GetCount, error) {
	resp := &responses.FPDFBookmark_GetCount{}
	err := g.client.Call("Plugin.FPDFBookmark_GetCount", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFBookmark_GetDest(request *requests.FPDFBookmark_GetDest) (*responses.FPDFBookmark_GetDest, error) {
	resp := &responses.FPDFBookmark_GetDest{}
	err := g.client.Call("Plugin.FPDFBookmark_GetDest", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFBookmark_GetFirstChild(request *requests.FPDFBookmark_GetFirstChild) (*responses.FPDFBookmark_GetFirstChild, error) {
	resp := &responses.FPDFBookmark_GetFirstChild{}
	err := g.client.Call("Plugin.FPDFBookmark_GetFirstChild", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFBookmark_GetNextSibling(request *requests.FPDFBookmark_GetNextSibling) (*responses.FPDFBookmark_GetNextSibling, error) {
	resp := &responses.FPDFBookmark_GetNextSibling{}
	err := g.client.Call("Plugin.FPDFBookmark_GetNextSibling", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFBookmark_GetTitle(request *requests.FPDFBookmark_GetTitle) (*responses.FPDFBookmark_GetTitle, error) {
	resp := &responses.FPDFBookmark_GetTitle{}
	err := g.client.Call("Plugin.FPDFBookmark_GetTitle", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFCatalog_IsTagged(request *requests.FPDFCatalog_IsTagged) (*responses.FPDFCatalog_IsTagged, error) {
	resp := &responses.FPDFCatalog_IsTagged{}
	err := g.client.Call("Plugin.FPDFCatalog_IsTagged", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFCatalog_SetLanguage(request *requests.FPDFCatalog_SetLanguage) (*responses.FPDFCatalog_SetLanguage, error) {
	resp := &responses.FPDFCatalog_SetLanguage{}
	err := g.client.Call("Plugin.FPDFCatalog_SetLanguage", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFClipPath_CountPathSegments(request *requests.FPDFClipPath_CountPathSegments) (*responses.FPDFClipPath_CountPathSegments, error) {
	resp := &responses.FPDFClipPath_CountPathSegments{}
	err := g.client.Call("Plugin.FPDFClipPath_CountPathSegments", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFClipPath_CountPaths(request *requests.FPDFClipPath_CountPaths) (*responses.FPDFClipPath_CountPaths, error) {
	resp := &responses.FPDFClipPath_CountPaths{}
	err := g.client.Call("Plugin.FPDFClipPath_CountPaths", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFClipPath_GetPathSegment(request *requests.FPDFClipPath_GetPathSegment) (*responses.FPDFClipPath_GetPathSegment, error) {
	resp := &responses.FPDFClipPath_GetPathSegment{}
	err := g.client.Call("Plugin.FPDFClipPath_GetPathSegment", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFDOC_ExitFormFillEnvironment(request *requests.FPDFDOC_ExitFormFillEnvironment) (*responses.FPDFDOC_ExitFormFillEnvironment, error) {
	resp := &responses.FPDFDOC_ExitFormFillEnvironment{}
	err := g.client.Call("Plugin.FPDFDOC_ExitFormFillEnvironment", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFDOC_InitFormFillEnvironment(request *requests.FPDFDOC_InitFormFillEnvironment) (*responses.FPDFDOC_InitFormFillEnvironment, error) {
	resp := &responses.FPDFDOC_InitFormFillEnvironment{}
	err := g.client.Call("Plugin.FPDFDOC_InitFormFillEnvironment", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFDest_GetDestPageIndex(request *requests.FPDFDest_GetDestPageIndex) (*responses.FPDFDest_GetDestPageIndex, error) {
	resp := &responses.FPDFDest_GetDestPageIndex{}
	err := g.client.Call("Plugin.FPDFDest_GetDestPageIndex", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFDest_GetLocationInPage(request *requests.FPDFDest_GetLocationInPage) (*responses.FPDFDest_GetLocationInPage, error) {
	resp := &responses.FPDFDest_GetLocationInPage{}
	err := g.client.Call("Plugin.FPDFDest_GetLocationInPage", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFDest_GetView(request *requests.FPDFDest_GetView) (*responses.FPDFDest_GetView, error) {
	resp := &responses.FPDFDest_GetView{}
	err := g.client.Call("Plugin.FPDFDest_GetView", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFDoc_AddAttachment(request *requests.FPDFDoc_AddAttachment) (*responses.FPDFDoc_AddAttachment, error) {
	resp := &responses.FPDFDoc_AddAttachment{}
	err := g.client.Call("Plugin.FPDFDoc_AddAttachment", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFDoc_CloseJavaScriptAction(request *requests.FPDFDoc_CloseJavaScriptAction) (*responses.FPDFDoc_CloseJavaScriptAction, error) {
	resp := &responses.FPDFDoc_CloseJavaScriptAction{}
	err := g.client.Call("Plugin.FPDFDoc_CloseJavaScriptAction", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFDoc_DeleteAttachment(request *requests.FPDFDoc_DeleteAttachment) (*responses.FPDFDoc_DeleteAttachment, error) {
	resp := &responses.FPDFDoc_DeleteAttachment{}
	err := g.client.Call("Plugin.FPDFDoc_DeleteAttachment", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFDoc_GetAttachment(request *requests.FPDFDoc_GetAttachment) (*responses.FPDFDoc_GetAttachment, error) {
	resp := &responses.FPDFDoc_GetAttachment{}
	err := g.client.Call("Plugin.FPDFDoc_GetAttachment", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFDoc_GetAttachmentCount(request *requests.FPDFDoc_GetAttachmentCount) (*responses.FPDFDoc_GetAttachmentCount, error) {
	resp := &responses.FPDFDoc_GetAttachmentCount{}
	err := g.client.Call("Plugin.FPDFDoc_GetAttachmentCount", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFDoc_GetJavaScriptAction(request *requests.FPDFDoc_GetJavaScriptAction) (*responses.FPDFDoc_GetJavaScriptAction, error) {
	resp := &responses.FPDFDoc_GetJavaScriptAction{}
	err := g.client.Call("Plugin.FPDFDoc_GetJavaScriptAction", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFDoc_GetJavaScriptActionCount(request *requests.FPDFDoc_GetJavaScriptActionCount) (*responses.FPDFDoc_GetJavaScriptActionCount, error) {
	resp := &responses.FPDFDoc_GetJavaScriptActionCount{}
	err := g.client.Call("Plugin.FPDFDoc_GetJavaScriptActionCount", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFDoc_GetPageMode(request *requests.FPDFDoc_GetPageMode) (*responses.FPDFDoc_GetPageMode, error) {
	resp := &responses.FPDFDoc_GetPageMode{}
	err := g.client.Call("Plugin.FPDFDoc_GetPageMode", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFFont_Close(request *requests.FPDFFont_Close) (*responses.FPDFFont_Close, error) {
	resp := &responses.FPDFFont_Close{}
	err := g.client.Call("Plugin.FPDFFont_Close", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFFont_GetAscent(request *requests.FPDFFont_GetAscent) (*responses.FPDFFont_GetAscent, error) {
	resp := &responses.FPDFFont_GetAscent{}
	err := g.client.Call("Plugin.FPDFFont_GetAscent", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFFont_GetBaseFontName(request *requests.FPDFFont_GetBaseFontName) (*responses.FPDFFont_GetBaseFontName, error) {
	resp := &responses.FPDFFont_GetBaseFontName{}
	err := g.client.Call("Plugin.FPDFFont_GetBaseFontName", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFFont_GetDescent(request *requests.FPDFFont_GetDescent) (*responses.FPDFFont_GetDescent, error) {
	resp := &responses.FPDFFont_GetDescent{}
	err := g.client.Call("Plugin.FPDFFont_GetDescent", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFFont_GetFamilyName(request *requests.FPDFFont_GetFamilyName) (*responses.FPDFFont_GetFamilyName, error) {
	resp := &responses.FPDFFont_GetFamilyName{}
	err := g.client.Call("Plugin.FPDFFont_GetFamilyName", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFFont_GetFlags(request *requests.FPDFFont_GetFlags) (*responses.FPDFFont_GetFlags, error) {
	resp := &responses.FPDFFont_GetFlags{}
	err := g.client.Call("Plugin.FPDFFont_GetFlags", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFFont_GetFontData(request *requests.FPDFFont_GetFontData) (*responses.FPDFFont_GetFontData, error) {
	resp := &responses.FPDFFont_GetFontData{}
	err := g.client.Call("Plugin.FPDFFont_GetFontData", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFFont_GetGlyphPath(request *requests.FPDFFont_GetGlyphPath) (*responses.FPDFFont_GetGlyphPath, error) {
	resp := &responses.FPDFFont_GetGlyphPath{}
	err := g.client.Call("Plugin.FPDFFont_GetGlyphPath", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFFont_GetGlyphWidth(request *requests.FPDFFont_GetGlyphWidth) (*responses.FPDFFont_GetGlyphWidth, error) {
	resp := &responses.FPDFFont_GetGlyphWidth{}
	err := g.client.Call("Plugin.FPDFFont_GetGlyphWidth", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFFont_GetIsEmbedded(request *requests.FPDFFont_GetIsEmbedded) (*responses.FPDFFont_GetIsEmbedded, error) {
	resp := &responses.FPDFFont_GetIsEmbedded{}
	err := g.client.Call("Plugin.FPDFFont_GetIsEmbedded", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFFont_GetItalicAngle(request *requests.FPDFFont_GetItalicAngle) (*responses.FPDFFont_GetItalicAngle, error) {
	resp := &responses.FPDFFont_GetItalicAngle{}
	err := g.client.Call("Plugin.FPDFFont_GetItalicAngle", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFFont_GetWeight(request *requests.FPDFFont_GetWeight) (*responses.FPDFFont_GetWeight, error) {
	resp := &responses.FPDFFont_GetWeight{}
	err := g.client.Call("Plugin.FPDFFont_GetWeight", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFFormObj_CountObjects(request *requests.FPDFFormObj_CountObjects) (*responses.FPDFFormObj_CountObjects, error) {
	resp := &responses.FPDFFormObj_CountObjects{}
	err := g.client.Call("Plugin.FPDFFormObj_CountObjects", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFFormObj_GetObject(request *requests.FPDFFormObj_GetObject) (*responses.FPDFFormObj_GetObject, error) {
	resp := &responses.FPDFFormObj_GetObject{}
	err := g.client.Call("Plugin.FPDFFormObj_GetObject", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFFormObj_RemoveObject(request *requests.FPDFFormObj_RemoveObject) (*responses.FPDFFormObj_RemoveObject, error) {
	resp := &responses.FPDFFormObj_RemoveObject{}
	err := g.client.Call("Plugin.FPDFFormObj_RemoveObject", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFGlyphPath_CountGlyphSegments(request *requests.FPDFGlyphPath_CountGlyphSegments) (*responses.FPDFGlyphPath_CountGlyphSegments, error) {
	resp := &responses.FPDFGlyphPath_CountGlyphSegments{}
	err := g.client.Call("Plugin.FPDFGlyphPath_CountGlyphSegments", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFGlyphPath_GetGlyphPathSegment(request *requests.FPDFGlyphPath_GetGlyphPathSegment) (*responses.FPDFGlyphPath_GetGlyphPathSegment, error) {
	resp := &responses.FPDFGlyphPath_GetGlyphPathSegment{}
	err := g.client.Call("Plugin.FPDFGlyphPath_GetGlyphPathSegment", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFImageObj_GetBitmap(request *requests.FPDFImageObj_GetBitmap) (*responses.FPDFImageObj_GetBitmap, error) {
	resp := &responses.FPDFImageObj_GetBitmap{}
	err := g.client.Call("Plugin.FPDFImageObj_GetBitmap", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFImageObj_GetIccProfileDataDecoded(request *requests.FPDFImageObj_GetIccProfileDataDecoded) (*responses.FPDFImageObj_GetIccProfileDataDecoded, error) {
	resp := &responses.FPDFImageObj_GetIccProfileDataDecoded{}
	err := g.client.Call("Plugin.FPDFImageObj_GetIccProfileDataDecoded", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFImageObj_GetImageDataDecoded(request *requests.FPDFImageObj_GetImageDataDecoded) (*responses.FPDFImageObj_GetImageDataDecoded, error) {
	resp := &responses.FPDFImageObj_GetImageDataDecoded{}
	err := g.client.Call("Plugin.FPDFImageObj_GetImageDataDecoded", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFImageObj_GetImageDataRaw(request *requests.FPDFImageObj_GetImageDataRaw) (*responses.FPDFImageObj_GetImageDataRaw, error) {
	resp := &responses.FPDFImageObj_GetImageDataRaw{}
	err := g.client.Call("Plugin.FPDFImageObj_GetImageDataRaw", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFImageObj_GetImageFilter(request *requests.FPDFImageObj_GetImageFilter) (*responses.FPDFImageObj_GetImageFilter, error) {
	resp := &responses.FPDFImageObj_GetImageFilter{}
	err := g.client.Call("Plugin.FPDFImageObj_GetImageFilter", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFImageObj_GetImageFilterCount(request *requests.FPDFImageObj_GetImageFilterCount) (*responses.FPDFImageObj_GetImageFilterCount, error) {
	resp := &responses.FPDFImageObj_GetImageFilterCount{}
	err := g.client.Call("Plugin.FPDFImageObj_GetImageFilterCount", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFImageObj_GetImageMetadata(request *requests.FPDFImageObj_GetImageMetadata) (*responses.FPDFImageObj_GetImageMetadata, error) {
	resp := &responses.FPDFImageObj_GetImageMetadata{}
	err := g.client.Call("Plugin.FPDFImageObj_GetImageMetadata", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFImageObj_GetImagePixelSize(request *requests.FPDFImageObj_GetImagePixelSize) (*responses.FPDFImageObj_GetImagePixelSize, error) {
	resp := &responses.FPDFImageObj_GetImagePixelSize{}
	err := g.client.Call("Plugin.FPDFImageObj_GetImagePixelSize", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFImageObj_GetRenderedBitmap(request *requests.FPDFImageObj_GetRenderedBitmap) (*responses.FPDFImageObj_GetRenderedBitmap, error) {
	resp := &responses.FPDFImageObj_GetRenderedBitmap{}
	err := g.client.Call("Plugin.FPDFImageObj_GetRenderedBitmap", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFImageObj_LoadJpegFile(request *requests.FPDFImageObj_LoadJpegFile) (*responses.FPDFImageObj_LoadJpegFile, error) {
	resp := &responses.FPDFImageObj_LoadJpegFile{}
	err := g.client.Call("Plugin.FPDFImageObj_LoadJpegFile", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFImageObj_LoadJpegFileInline(request *requests.FPDFImageObj_LoadJpegFileInline) (*responses.FPDFImageObj_LoadJpegFileInline, error) {
	resp := &responses.FPDFImageObj_LoadJpegFileInline{}
	err := g.client.Call("Plugin.FPDFImageObj_LoadJpegFileInline", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFImageObj_SetBitmap(request *requests.FPDFImageObj_SetBitmap) (*responses.FPDFImageObj_SetBitmap, error) {
	resp := &responses.FPDFImageObj_SetBitmap{}
	err := g.client.Call("Plugin.FPDFImageObj_SetBitmap", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFImageObj_SetMatrix(request *requests.FPDFImageObj_SetMatrix) (*responses.FPDFImageObj_SetMatrix, error) {
	resp := &responses.FPDFImageObj_SetMatrix{}
	err := g.client.Call("Plugin.FPDFImageObj_SetMatrix", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFJavaScriptAction_GetName(request *requests.FPDFJavaScriptAction_GetName) (*responses.FPDFJavaScriptAction_GetName, error) {
	resp := &responses.FPDFJavaScriptAction_GetName{}
	err := g.client.Call("Plugin.FPDFJavaScriptAction_GetName", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFJavaScriptAction_GetScript(request *requests.FPDFJavaScriptAction_GetScript) (*responses.FPDFJavaScriptAction_GetScript, error) {
	resp := &responses.FPDFJavaScriptAction_GetScript{}
	err := g.client.Call("Plugin.FPDFJavaScriptAction_GetScript", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFLink_CloseWebLinks(request *requests.FPDFLink_CloseWebLinks) (*responses.FPDFLink_CloseWebLinks, error) {
	resp := &responses.FPDFLink_CloseWebLinks{}
	err := g.client.Call("Plugin.FPDFLink_CloseWebLinks", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFLink_CountQuadPoints(request *requests.FPDFLink_CountQuadPoints) (*responses.FPDFLink_CountQuadPoints, error) {
	resp := &responses.FPDFLink_CountQuadPoints{}
	err := g.client.Call("Plugin.FPDFLink_CountQuadPoints", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFLink_CountRects(request *requests.FPDFLink_CountRects) (*responses.FPDFLink_CountRects, error) {
	resp := &responses.FPDFLink_CountRects{}
	err := g.client.Call("Plugin.FPDFLink_CountRects", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFLink_CountWebLinks(request *requests.FPDFLink_CountWebLinks) (*responses.FPDFLink_CountWebLinks, error) {
	resp := &responses.FPDFLink_CountWebLinks{}
	err := g.client.Call("Plugin.FPDFLink_CountWebLinks", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFLink_Enumerate(request *requests.FPDFLink_Enumerate) (*responses.FPDFLink_Enumerate, error) {
	resp := &responses.FPDFLink_Enumerate{}
	err := g.client.Call("Plugin.FPDFLink_Enumerate", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFLink_GetAction(request *requests.FPDFLink_GetAction) (*responses.FPDFLink_GetAction, error) {
	resp := &responses.FPDFLink_GetAction{}
	err := g.client.Call("Plugin.FPDFLink_GetAction", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFLink_GetAnnot(request *requests.FPDFLink_GetAnnot) (*responses.FPDFLink_GetAnnot, error) {
	resp := &responses.FPDFLink_GetAnnot{}
	err := g.client.Call("Plugin.FPDFLink_GetAnnot", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFLink_GetAnnotRect(request *requests.FPDFLink_GetAnnotRect) (*responses.FPDFLink_GetAnnotRect, error) {
	resp := &responses.FPDFLink_GetAnnotRect{}
	err := g.client.Call("Plugin.FPDFLink_GetAnnotRect", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFLink_GetDest(request *requests.FPDFLink_GetDest) (*responses.FPDFLink_GetDest, error) {
	resp := &responses.FPDFLink_GetDest{}
	err := g.client.Call("Plugin.FPDFLink_GetDest", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFLink_GetLinkAtPoint(request *requests.FPDFLink_GetLinkAtPoint) (*responses.FPDFLink_GetLinkAtPoint, error) {
	resp := &responses.FPDFLink_GetLinkAtPoint{}
	err := g.client.Call("Plugin.FPDFLink_GetLinkAtPoint", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFLink_GetLinkZOrderAtPoint(request *requests.FPDFLink_GetLinkZOrderAtPoint) (*responses.FPDFLink_GetLinkZOrderAtPoint, error) {
	resp := &responses.FPDFLink_GetLinkZOrderAtPoint{}
	err := g.client.Call("Plugin.FPDFLink_GetLinkZOrderAtPoint", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFLink_GetQuadPoints(request *requests.FPDFLink_GetQuadPoints) (*responses.FPDFLink_GetQuadPoints, error) {
	resp := &responses.FPDFLink_GetQuadPoints{}
	err := g.client.Call("Plugin.FPDFLink_GetQuadPoints", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFLink_GetRect(request *requests.FPDFLink_GetRect) (*responses.FPDFLink_GetRect, error) {
	resp := &responses.FPDFLink_GetRect{}
	err := g.client.Call("Plugin.FPDFLink_GetRect", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFLink_GetTextRange(request *requests.FPDFLink_GetTextRange) (*responses.FPDFLink_GetTextRange, error) {
	resp := &responses.FPDFLink_GetTextRange{}
	err := g.client.Call("Plugin.FPDFLink_GetTextRange", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFLink_GetURL(request *requests.FPDFLink_GetURL) (*responses.FPDFLink_GetURL, error) {
	resp := &responses.FPDFLink_GetURL{}
	err := g.client.Call("Plugin.FPDFLink_GetURL", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFLink_LoadWebLinks(request *requests.FPDFLink_LoadWebLinks) (*responses.FPDFLink_LoadWebLinks, error) {
	resp := &responses.FPDFLink_LoadWebLinks{}
	err := g.client.Call("Plugin.FPDFLink_LoadWebLinks", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObjMark_CountParams(request *requests.FPDFPageObjMark_CountParams) (*responses.FPDFPageObjMark_CountParams, error) {
	resp := &responses.FPDFPageObjMark_CountParams{}
	err := g.client.Call("Plugin.FPDFPageObjMark_CountParams", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObjMark_GetName(request *requests.FPDFPageObjMark_GetName) (*responses.FPDFPageObjMark_GetName, error) {
	resp := &responses.FPDFPageObjMark_GetName{}
	err := g.client.Call("Plugin.FPDFPageObjMark_GetName", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObjMark_GetParamBlobValue(request *requests.FPDFPageObjMark_GetParamBlobValue) (*responses.FPDFPageObjMark_GetParamBlobValue, error) {
	resp := &responses.FPDFPageObjMark_GetParamBlobValue{}
	err := g.client.Call("Plugin.FPDFPageObjMark_GetParamBlobValue", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObjMark_GetParamIntValue(request *requests.FPDFPageObjMark_GetParamIntValue) (*responses.FPDFPageObjMark_GetParamIntValue, error) {
	resp := &responses.FPDFPageObjMark_GetParamIntValue{}
	err := g.client.Call("Plugin.FPDFPageObjMark_GetParamIntValue", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObjMark_GetParamKey(request *requests.FPDFPageObjMark_GetParamKey) (*responses.FPDFPageObjMark_GetParamKey, error) {
	resp := &responses.FPDFPageObjMark_GetParamKey{}
	err := g.client.Call("Plugin.FPDFPageObjMark_GetParamKey", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObjMark_GetParamStringValue(request *requests.FPDFPageObjMark_GetParamStringValue) (*responses.FPDFPageObjMark_GetParamStringValue, error) {
	resp := &responses.FPDFPageObjMark_GetParamStringValue{}
	err := g.client.Call("Plugin.FPDFPageObjMark_GetParamStringValue", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObjMark_GetParamValueType(request *requests.FPDFPageObjMark_GetParamValueType) (*responses.FPDFPageObjMark_GetParamValueType, error) {
	resp := &responses.FPDFPageObjMark_GetParamValueType{}
	err := g.client.Call("Plugin.FPDFPageObjMark_GetParamValueType", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObjMark_RemoveParam(request *requests.FPDFPageObjMark_RemoveParam) (*responses.FPDFPageObjMark_RemoveParam, error) {
	resp := &responses.FPDFPageObjMark_RemoveParam{}
	err := g.client.Call("Plugin.FPDFPageObjMark_RemoveParam", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObjMark_SetBlobParam(request *requests.FPDFPageObjMark_SetBlobParam) (*responses.FPDFPageObjMark_SetBlobParam, error) {
	resp := &responses.FPDFPageObjMark_SetBlobParam{}
	err := g.client.Call("Plugin.FPDFPageObjMark_SetBlobParam", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObjMark_SetIntParam(request *requests.FPDFPageObjMark_SetIntParam) (*responses.FPDFPageObjMark_SetIntParam, error) {
	resp := &responses.FPDFPageObjMark_SetIntParam{}
	err := g.client.Call("Plugin.FPDFPageObjMark_SetIntParam", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObjMark_SetStringParam(request *requests.FPDFPageObjMark_SetStringParam) (*responses.FPDFPageObjMark_SetStringParam, error) {
	resp := &responses.FPDFPageObjMark_SetStringParam{}
	err := g.client.Call("Plugin.FPDFPageObjMark_SetStringParam", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_AddMark(request *requests.FPDFPageObj_AddMark) (*responses.FPDFPageObj_AddMark, error) {
	resp := &responses.FPDFPageObj_AddMark{}
	err := g.client.Call("Plugin.FPDFPageObj_AddMark", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_CountMarks(request *requests.FPDFPageObj_CountMarks) (*responses.FPDFPageObj_CountMarks, error) {
	resp := &responses.FPDFPageObj_CountMarks{}
	err := g.client.Call("Plugin.FPDFPageObj_CountMarks", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_CreateNewPath(request *requests.FPDFPageObj_CreateNewPath) (*responses.FPDFPageObj_CreateNewPath, error) {
	resp := &responses.FPDFPageObj_CreateNewPath{}
	err := g.client.Call("Plugin.FPDFPageObj_CreateNewPath", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_CreateNewRect(request *requests.FPDFPageObj_CreateNewRect) (*responses.FPDFPageObj_CreateNewRect, error) {
	resp := &responses.FPDFPageObj_CreateNewRect{}
	err := g.client.Call("Plugin.FPDFPageObj_CreateNewRect", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_CreateTextObj(request *requests.FPDFPageObj_CreateTextObj) (*responses.FPDFPageObj_CreateTextObj, error) {
	resp := &responses.FPDFPageObj_CreateTextObj{}
	err := g.client.Call("Plugin.FPDFPageObj_CreateTextObj", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_Destroy(request *requests.FPDFPageObj_Destroy) (*responses.FPDFPageObj_Destroy, error) {
	resp := &responses.FPDFPageObj_Destroy{}
	err := g.client.Call("Plugin.FPDFPageObj_Destroy", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_GetBounds(request *requests.FPDFPageObj_GetBounds) (*responses.FPDFPageObj_GetBounds, error) {
	resp := &responses.FPDFPageObj_GetBounds{}
	err := g.client.Call("Plugin.FPDFPageObj_GetBounds", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_GetClipPath(request *requests.FPDFPageObj_GetClipPath) (*responses.FPDFPageObj_GetClipPath, error) {
	resp := &responses.FPDFPageObj_GetClipPath{}
	err := g.client.Call("Plugin.FPDFPageObj_GetClipPath", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_GetDashArray(request *requests.FPDFPageObj_GetDashArray) (*responses.FPDFPageObj_GetDashArray, error) {
	resp := &responses.FPDFPageObj_GetDashArray{}
	err := g.client.Call("Plugin.FPDFPageObj_GetDashArray", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_GetDashCount(request *requests.FPDFPageObj_GetDashCount) (*responses.FPDFPageObj_GetDashCount, error) {
	resp := &responses.FPDFPageObj_GetDashCount{}
	err := g.client.Call("Plugin.FPDFPageObj_GetDashCount", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_GetDashPhase(request *requests.FPDFPageObj_GetDashPhase) (*responses.FPDFPageObj_GetDashPhase, error) {
	resp := &responses.FPDFPageObj_GetDashPhase{}
	err := g.client.Call("Plugin.FPDFPageObj_GetDashPhase", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_GetFillColor(request *requests.FPDFPageObj_GetFillColor) (*responses.FPDFPageObj_GetFillColor, error) {
	resp := &responses.FPDFPageObj_GetFillColor{}
	err := g.client.Call("Plugin.FPDFPageObj_GetFillColor", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_GetIsActive(request *requests.FPDFPageObj_GetIsActive) (*responses.FPDFPageObj_GetIsActive, error) {
	resp := &responses.FPDFPageObj_GetIsActive{}
	err := g.client.Call("Plugin.FPDFPageObj_GetIsActive", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_GetLineCap(request *requests.FPDFPageObj_GetLineCap) (*responses.FPDFPageObj_GetLineCap, error) {
	resp := &responses.FPDFPageObj_GetLineCap{}
	err := g.client.Call("Plugin.FPDFPageObj_GetLineCap", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_GetLineJoin(request *requests.FPDFPageObj_GetLineJoin) (*responses.FPDFPageObj_GetLineJoin, error) {
	resp := &responses.FPDFPageObj_GetLineJoin{}
	err := g.client.Call("Plugin.FPDFPageObj_GetLineJoin", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_GetMark(request *requests.FPDFPageObj_GetMark) (*responses.FPDFPageObj_GetMark, error) {
	resp := &responses.FPDFPageObj_GetMark{}
	err := g.client.Call("Plugin.FPDFPageObj_GetMark", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_GetMarkedContentID(request *requests.FPDFPageObj_GetMarkedContentID) (*responses.FPDFPageObj_GetMarkedContentID, error) {
	resp := &responses.FPDFPageObj_GetMarkedContentID{}
	err := g.client.Call("Plugin.FPDFPageObj_GetMarkedContentID", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_GetMatrix(request *requests.FPDFPageObj_GetMatrix) (*responses.FPDFPageObj_GetMatrix, error) {
	resp := &responses.FPDFPageObj_GetMatrix{}
	err := g.client.Call("Plugin.FPDFPageObj_GetMatrix", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_GetRotatedBounds(request *requests.FPDFPageObj_GetRotatedBounds) (*responses.FPDFPageObj_GetRotatedBounds, error) {
	resp := &responses.FPDFPageObj_GetRotatedBounds{}
	err := g.client.Call("Plugin.FPDFPageObj_GetRotatedBounds", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_GetStrokeColor(request *requests.FPDFPageObj_GetStrokeColor) (*responses.FPDFPageObj_GetStrokeColor, error) {
	resp := &responses.FPDFPageObj_GetStrokeColor{}
	err := g.client.Call("Plugin.FPDFPageObj_GetStrokeColor", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_GetStrokeWidth(request *requests.FPDFPageObj_GetStrokeWidth) (*responses.FPDFPageObj_GetStrokeWidth, error) {
	resp := &responses.FPDFPageObj_GetStrokeWidth{}
	err := g.client.Call("Plugin.FPDFPageObj_GetStrokeWidth", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_GetType(request *requests.FPDFPageObj_GetType) (*responses.FPDFPageObj_GetType, error) {
	resp := &responses.FPDFPageObj_GetType{}
	err := g.client.Call("Plugin.FPDFPageObj_GetType", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_HasTransparency(request *requests.FPDFPageObj_HasTransparency) (*responses.FPDFPageObj_HasTransparency, error) {
	resp := &responses.FPDFPageObj_HasTransparency{}
	err := g.client.Call("Plugin.FPDFPageObj_HasTransparency", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_NewImageObj(request *requests.FPDFPageObj_NewImageObj) (*responses.FPDFPageObj_NewImageObj, error) {
	resp := &responses.FPDFPageObj_NewImageObj{}
	err := g.client.Call("Plugin.FPDFPageObj_NewImageObj", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_NewTextObj(request *requests.FPDFPageObj_NewTextObj) (*responses.FPDFPageObj_NewTextObj, error) {
	resp := &responses.FPDFPageObj_NewTextObj{}
	err := g.client.Call("Plugin.FPDFPageObj_NewTextObj", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_RemoveMark(request *requests.FPDFPageObj_RemoveMark) (*responses.FPDFPageObj_RemoveMark, error) {
	resp := &responses.FPDFPageObj_RemoveMark{}
	err := g.client.Call("Plugin.FPDFPageObj_RemoveMark", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_SetBlendMode(request *requests.FPDFPageObj_SetBlendMode) (*responses.FPDFPageObj_SetBlendMode, error) {
	resp := &responses.FPDFPageObj_SetBlendMode{}
	err := g.client.Call("Plugin.FPDFPageObj_SetBlendMode", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_SetDashArray(request *requests.FPDFPageObj_SetDashArray) (*responses.FPDFPageObj_SetDashArray, error) {
	resp := &responses.FPDFPageObj_SetDashArray{}
	err := g.client.Call("Plugin.FPDFPageObj_SetDashArray", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_SetDashPhase(request *requests.FPDFPageObj_SetDashPhase) (*responses.FPDFPageObj_SetDashPhase, error) {
	resp := &responses.FPDFPageObj_SetDashPhase{}
	err := g.client.Call("Plugin.FPDFPageObj_SetDashPhase", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_SetFillColor(request *requests.FPDFPageObj_SetFillColor) (*responses.FPDFPageObj_SetFillColor, error) {
	resp := &responses.FPDFPageObj_SetFillColor{}
	err := g.client.Call("Plugin.FPDFPageObj_SetFillColor", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_SetIsActive(request *requests.FPDFPageObj_SetIsActive) (*responses.FPDFPageObj_SetIsActive, error) {
	resp := &responses.FPDFPageObj_SetIsActive{}
	err := g.client.Call("Plugin.FPDFPageObj_SetIsActive", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_SetLineCap(request *requests.FPDFPageObj_SetLineCap) (*responses.FPDFPageObj_SetLineCap, error) {
	resp := &responses.FPDFPageObj_SetLineCap{}
	err := g.client.Call("Plugin.FPDFPageObj_SetLineCap", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_SetLineJoin(request *requests.FPDFPageObj_SetLineJoin) (*responses.FPDFPageObj_SetLineJoin, error) {
	resp := &responses.FPDFPageObj_SetLineJoin{}
	err := g.client.Call("Plugin.FPDFPageObj_SetLineJoin", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_SetMatrix(request *requests.FPDFPageObj_SetMatrix) (*responses.FPDFPageObj_SetMatrix, error) {
	resp := &responses.FPDFPageObj_SetMatrix{}
	err := g.client.Call("Plugin.FPDFPageObj_SetMatrix", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_SetStrokeColor(request *requests.FPDFPageObj_SetStrokeColor) (*responses.FPDFPageObj_SetStrokeColor, error) {
	resp := &responses.FPDFPageObj_SetStrokeColor{}
	err := g.client.Call("Plugin.FPDFPageObj_SetStrokeColor", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_SetStrokeWidth(request *requests.FPDFPageObj_SetStrokeWidth) (*responses.FPDFPageObj_SetStrokeWidth, error) {
	resp := &responses.FPDFPageObj_SetStrokeWidth{}
	err := g.client.Call("Plugin.FPDFPageObj_SetStrokeWidth", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_Transform(request *requests.FPDFPageObj_Transform) (*responses.FPDFPageObj_Transform, error) {
	resp := &responses.FPDFPageObj_Transform{}
	err := g.client.Call("Plugin.FPDFPageObj_Transform", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_TransformClipPath(request *requests.FPDFPageObj_TransformClipPath) (*responses.FPDFPageObj_TransformClipPath, error) {
	resp := &responses.FPDFPageObj_TransformClipPath{}
	err := g.client.Call("Plugin.FPDFPageObj_TransformClipPath", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPageObj_TransformF(request *requests.FPDFPageObj_TransformF) (*responses.FPDFPageObj_TransformF, error) {
	resp := &responses.FPDFPageObj_TransformF{}
	err := g.client.Call("Plugin.FPDFPageObj_TransformF", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_CloseAnnot(request *requests.FPDFPage_CloseAnnot) (*responses.FPDFPage_CloseAnnot, error) {
	resp := &responses.FPDFPage_CloseAnnot{}
	err := g.client.Call("Plugin.FPDFPage_CloseAnnot", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_CountObjects(request *requests.FPDFPage_CountObjects) (*responses.FPDFPage_CountObjects, error) {
	resp := &responses.FPDFPage_CountObjects{}
	err := g.client.Call("Plugin.FPDFPage_CountObjects", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_CreateAnnot(request *requests.FPDFPage_CreateAnnot) (*responses.FPDFPage_CreateAnnot, error) {
	resp := &responses.FPDFPage_CreateAnnot{}
	err := g.client.Call("Plugin.FPDFPage_CreateAnnot", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_Delete(request *requests.FPDFPage_Delete) (*responses.FPDFPage_Delete, error) {
	resp := &responses.FPDFPage_Delete{}
	err := g.client.Call("Plugin.FPDFPage_Delete", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_Flatten(request *requests.FPDFPage_Flatten) (*responses.FPDFPage_Flatten, error) {
	resp := &responses.FPDFPage_Flatten{}
	err := g.client.Call("Plugin.FPDFPage_Flatten", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_FormFieldZOrderAtPoint(request *requests.FPDFPage_FormFieldZOrderAtPoint) (*responses.FPDFPage_FormFieldZOrderAtPoint, error) {
	resp := &responses.FPDFPage_FormFieldZOrderAtPoint{}
	err := g.client.Call("Plugin.FPDFPage_FormFieldZOrderAtPoint", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_GenerateContent(request *requests.FPDFPage_GenerateContent) (*responses.FPDFPage_GenerateContent, error) {
	resp := &responses.FPDFPage_GenerateContent{}
	err := g.client.Call("Plugin.FPDFPage_GenerateContent", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_GetAnnot(request *requests.FPDFPage_GetAnnot) (*responses.FPDFPage_GetAnnot, error) {
	resp := &responses.FPDFPage_GetAnnot{}
	err := g.client.Call("Plugin.FPDFPage_GetAnnot", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_GetAnnotCount(request *requests.FPDFPage_GetAnnotCount) (*responses.FPDFPage_GetAnnotCount, error) {
	resp := &responses.FPDFPage_GetAnnotCount{}
	err := g.client.Call("Plugin.FPDFPage_GetAnnotCount", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_GetAnnotIndex(request *requests.FPDFPage_GetAnnotIndex) (*responses.FPDFPage_GetAnnotIndex, error) {
	resp := &responses.FPDFPage_GetAnnotIndex{}
	err := g.client.Call("Plugin.FPDFPage_GetAnnotIndex", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_GetArtBox(request *requests.FPDFPage_GetArtBox) (*responses.FPDFPage_GetArtBox, error) {
	resp := &responses.FPDFPage_GetArtBox{}
	err := g.client.Call("Plugin.FPDFPage_GetArtBox", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_GetBleedBox(request *requests.FPDFPage_GetBleedBox) (*responses.FPDFPage_GetBleedBox, error) {
	resp := &responses.FPDFPage_GetBleedBox{}
	err := g.client.Call("Plugin.FPDFPage_GetBleedBox", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_GetCropBox(request *requests.FPDFPage_GetCropBox) (*responses.FPDFPage_GetCropBox, error) {
	resp := &responses.FPDFPage_GetCropBox{}
	err := g.client.Call("Plugin.FPDFPage_GetCropBox", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_GetDecodedThumbnailData(request *requests.FPDFPage_GetDecodedThumbnailData) (*responses.FPDFPage_GetDecodedThumbnailData, error) {
	resp := &responses.FPDFPage_GetDecodedThumbnailData{}
	err := g.client.Call("Plugin.FPDFPage_GetDecodedThumbnailData", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_GetMediaBox(request *requests.FPDFPage_GetMediaBox) (*responses.FPDFPage_GetMediaBox, error) {
	resp := &responses.FPDFPage_GetMediaBox{}
	err := g.client.Call("Plugin.FPDFPage_GetMediaBox", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_GetObject(request *requests.FPDFPage_GetObject) (*responses.FPDFPage_GetObject, error) {
	resp := &responses.FPDFPage_GetObject{}
	err := g.client.Call("Plugin.FPDFPage_GetObject", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_GetRawThumbnailData(request *requests.FPDFPage_GetRawThumbnailData) (*responses.FPDFPage_GetRawThumbnailData, error) {
	resp := &responses.FPDFPage_GetRawThumbnailData{}
	err := g.client.Call("Plugin.FPDFPage_GetRawThumbnailData", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_GetRotation(request *requests.FPDFPage_GetRotation) (*responses.FPDFPage_GetRotation, error) {
	resp := &responses.FPDFPage_GetRotation{}
	err := g.client.Call("Plugin.FPDFPage_GetRotation", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_GetThumbnailAsBitmap(request *requests.FPDFPage_GetThumbnailAsBitmap) (*responses.FPDFPage_GetThumbnailAsBitmap, error) {
	resp := &responses.FPDFPage_GetThumbnailAsBitmap{}
	err := g.client.Call("Plugin.FPDFPage_GetThumbnailAsBitmap", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_GetTrimBox(request *requests.FPDFPage_GetTrimBox) (*responses.FPDFPage_GetTrimBox, error) {
	resp := &responses.FPDFPage_GetTrimBox{}
	err := g.client.Call("Plugin.FPDFPage_GetTrimBox", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_HasFormFieldAtPoint(request *requests.FPDFPage_HasFormFieldAtPoint) (*responses.FPDFPage_HasFormFieldAtPoint, error) {
	resp := &responses.FPDFPage_HasFormFieldAtPoint{}
	err := g.client.Call("Plugin.FPDFPage_HasFormFieldAtPoint", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_HasTransparency(request *requests.FPDFPage_HasTransparency) (*responses.FPDFPage_HasTransparency, error) {
	resp := &responses.FPDFPage_HasTransparency{}
	err := g.client.Call("Plugin.FPDFPage_HasTransparency", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_InsertClipPath(request *requests.FPDFPage_InsertClipPath) (*responses.FPDFPage_InsertClipPath, error) {
	resp := &responses.FPDFPage_InsertClipPath{}
	err := g.client.Call("Plugin.FPDFPage_InsertClipPath", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_InsertObject(request *requests.FPDFPage_InsertObject) (*responses.FPDFPage_InsertObject, error) {
	resp := &responses.FPDFPage_InsertObject{}
	err := g.client.Call("Plugin.FPDFPage_InsertObject", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_InsertObjectAtIndex(request *requests.FPDFPage_InsertObjectAtIndex) (*responses.FPDFPage_InsertObjectAtIndex, error) {
	resp := &responses.FPDFPage_InsertObjectAtIndex{}
	err := g.client.Call("Plugin.FPDFPage_InsertObjectAtIndex", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_New(request *requests.FPDFPage_New) (*responses.FPDFPage_New, error) {
	resp := &responses.FPDFPage_New{}
	err := g.client.Call("Plugin.FPDFPage_New", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_RemoveAnnot(request *requests.FPDFPage_RemoveAnnot) (*responses.FPDFPage_RemoveAnnot, error) {
	resp := &responses.FPDFPage_RemoveAnnot{}
	err := g.client.Call("Plugin.FPDFPage_RemoveAnnot", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_RemoveObject(request *requests.FPDFPage_RemoveObject) (*responses.FPDFPage_RemoveObject, error) {
	resp := &responses.FPDFPage_RemoveObject{}
	err := g.client.Call("Plugin.FPDFPage_RemoveObject", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_SetArtBox(request *requests.FPDFPage_SetArtBox) (*responses.FPDFPage_SetArtBox, error) {
	resp := &responses.FPDFPage_SetArtBox{}
	err := g.client.Call("Plugin.FPDFPage_SetArtBox", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_SetBleedBox(request *requests.FPDFPage_SetBleedBox) (*responses.FPDFPage_SetBleedBox, error) {
	resp := &responses.FPDFPage_SetBleedBox{}
	err := g.client.Call("Plugin.FPDFPage_SetBleedBox", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_SetCropBox(request *requests.FPDFPage_SetCropBox) (*responses.FPDFPage_SetCropBox, error) {
	resp := &responses.FPDFPage_SetCropBox{}
	err := g.client.Call("Plugin.FPDFPage_SetCropBox", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_SetMediaBox(request *requests.FPDFPage_SetMediaBox) (*responses.FPDFPage_SetMediaBox, error) {
	resp := &responses.FPDFPage_SetMediaBox{}
	err := g.client.Call("Plugin.FPDFPage_SetMediaBox", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_SetRotation(request *requests.FPDFPage_SetRotation) (*responses.FPDFPage_SetRotation, error) {
	resp := &responses.FPDFPage_SetRotation{}
	err := g.client.Call("Plugin.FPDFPage_SetRotation", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_SetTrimBox(request *requests.FPDFPage_SetTrimBox) (*responses.FPDFPage_SetTrimBox, error) {
	resp := &responses.FPDFPage_SetTrimBox{}
	err := g.client.Call("Plugin.FPDFPage_SetTrimBox", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_TransFormWithClip(request *requests.FPDFPage_TransFormWithClip) (*responses.FPDFPage_TransFormWithClip, error) {
	resp := &responses.FPDFPage_TransFormWithClip{}
	err := g.client.Call("Plugin.FPDFPage_TransFormWithClip", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_TransformAnnots(request *requests.FPDFPage_TransformAnnots) (*responses.FPDFPage_TransformAnnots, error) {
	resp := &responses.FPDFPage_TransformAnnots{}
	err := g.client.Call("Plugin.FPDFPage_TransformAnnots", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPathSegment_GetClose(request *requests.FPDFPathSegment_GetClose) (*responses.FPDFPathSegment_GetClose, error) {
	resp := &responses.FPDFPathSegment_GetClose{}
	err := g.client.Call("Plugin.FPDFPathSegment_GetClose", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPathSegment_GetPoint(request *requests.FPDFPathSegment_GetPoint) (*responses.FPDFPathSegment_GetPoint, error) {
	resp := &responses.FPDFPathSegment_GetPoint{}
	err := g.client.Call("Plugin.FPDFPathSegment_GetPoint", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPathSegment_GetType(request *requests.FPDFPathSegment_GetType) (*responses.FPDFPathSegment_GetType, error) {
	resp := &responses.FPDFPathSegment_GetType{}
	err := g.client.Call("Plugin.FPDFPathSegment_GetType", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPath_BezierTo(request *requests.FPDFPath_BezierTo) (*responses.FPDFPath_BezierTo, error) {
	resp := &responses.FPDFPath_BezierTo{}
	err := g.client.Call("Plugin.FPDFPath_BezierTo", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPath_Close(request *requests.FPDFPath_Close) (*responses.FPDFPath_Close, error) {
	resp := &responses.FPDFPath_Close{}
	err := g.client.Call("Plugin.FPDFPath_Close", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPath_CountSegments(request *requests.FPDFPath_CountSegments) (*responses.FPDFPath_CountSegments, error) {
	resp := &responses.FPDFPath_CountSegments{}
	err := g.client.Call("Plugin.FPDFPath_CountSegments", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPath_GetDrawMode(request *requests.FPDFPath_GetDrawMode) (*responses.FPDFPath_GetDrawMode, error) {
	resp := &responses.FPDFPath_GetDrawMode{}
	err := g.client.Call("Plugin.FPDFPath_GetDrawMode", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPath_GetPathSegment(request *requests.FPDFPath_GetPathSegment) (*responses.FPDFPath_GetPathSegment, error) {
	resp := &responses.FPDFPath_GetPathSegment{}
	err := g.client.Call("Plugin.FPDFPath_GetPathSegment", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPath_LineTo(request *requests.FPDFPath_LineTo) (*responses.FPDFPath_LineTo, error) {
	resp := &responses.FPDFPath_LineTo{}
	err := g.client.Call("Plugin.FPDFPath_LineTo", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPath_MoveTo(request *requests.FPDFPath_MoveTo) (*responses.FPDFPath_MoveTo, error) {
	resp := &responses.FPDFPath_MoveTo{}
	err := g.client.Call("Plugin.FPDFPath_MoveTo", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPath_SetDrawMode(request *requests.FPDFPath_SetDrawMode) (*responses.FPDFPath_SetDrawMode, error) {
	resp := &responses.FPDFPath_SetDrawMode{}
	err := g.client.Call("Plugin.FPDFPath_SetDrawMode", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFSignatureObj_GetByteRange(request *requests.FPDFSignatureObj_GetByteRange) (*responses.FPDFSignatureObj_GetByteRange, error) {
	resp := &responses.FPDFSignatureObj_GetByteRange{}
	err := g.client.Call("Plugin.FPDFSignatureObj_GetByteRange", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFSignatureObj_GetContents(request *requests.FPDFSignatureObj_GetContents) (*responses.FPDFSignatureObj_GetContents, error) {
	resp := &responses.FPDFSignatureObj_GetContents{}
	err := g.client.Call("Plugin.FPDFSignatureObj_GetContents", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFSignatureObj_GetDocMDPPermission(request *requests.FPDFSignatureObj_GetDocMDPPermission) (*responses.FPDFSignatureObj_GetDocMDPPermission, error) {
	resp := &responses.FPDFSignatureObj_GetDocMDPPermission{}
	err := g.client.Call("Plugin.FPDFSignatureObj_GetDocMDPPermission", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFSignatureObj_GetReason(request *requests.FPDFSignatureObj_GetReason) (*responses.FPDFSignatureObj_GetReason, error) {
	resp := &responses.FPDFSignatureObj_GetReason{}
	err := g.client.Call("Plugin.FPDFSignatureObj_GetReason", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFSignatureObj_GetSubFilter(request *requests.FPDFSignatureObj_GetSubFilter) (*responses.FPDFSignatureObj_GetSubFilter, error) {
	resp := &responses.FPDFSignatureObj_GetSubFilter{}
	err := g.client.Call("Plugin.FPDFSignatureObj_GetSubFilter", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFSignatureObj_GetTime(request *requests.FPDFSignatureObj_GetTime) (*responses.FPDFSignatureObj_GetTime, error) {
	resp := &responses.FPDFSignatureObj_GetTime{}
	err := g.client.Call("Plugin.FPDFSignatureObj_GetTime", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFTextObj_GetFont(request *requests.FPDFTextObj_GetFont) (*responses.FPDFTextObj_GetFont, error) {
	resp := &responses.FPDFTextObj_GetFont{}
	err := g.client.Call("Plugin.FPDFTextObj_GetFont", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFTextObj_GetFontSize(request *requests.FPDFTextObj_GetFontSize) (*responses.FPDFTextObj_GetFontSize, error) {
	resp := &responses.FPDFTextObj_GetFontSize{}
	err := g.client.Call("Plugin.FPDFTextObj_GetFontSize", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFTextObj_GetRenderedBitmap(request *requests.FPDFTextObj_GetRenderedBitmap) (*responses.FPDFTextObj_GetRenderedBitmap, error) {
	resp := &responses.FPDFTextObj_GetRenderedBitmap{}
	err := g.client.Call("Plugin.FPDFTextObj_GetRenderedBitmap", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFTextObj_GetText(request *requests.FPDFTextObj_GetText) (*responses.FPDFTextObj_GetText, error) {
	resp := &responses.FPDFTextObj_GetText{}
	err := g.client.Call("Plugin.FPDFTextObj_GetText", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFTextObj_GetTextRenderMode(request *requests.FPDFTextObj_GetTextRenderMode) (*responses.FPDFTextObj_GetTextRenderMode, error) {
	resp := &responses.FPDFTextObj_GetTextRenderMode{}
	err := g.client.Call("Plugin.FPDFTextObj_GetTextRenderMode", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFTextObj_SetTextRenderMode(request *requests.FPDFTextObj_SetTextRenderMode) (*responses.FPDFTextObj_SetTextRenderMode, error) {
	resp := &responses.FPDFTextObj_SetTextRenderMode{}
	err := g.client.Call("Plugin.FPDFTextObj_SetTextRenderMode", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_ClosePage(request *requests.FPDFText_ClosePage) (*responses.FPDFText_ClosePage, error) {
	resp := &responses.FPDFText_ClosePage{}
	err := g.client.Call("Plugin.FPDFText_ClosePage", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_CountChars(request *requests.FPDFText_CountChars) (*responses.FPDFText_CountChars, error) {
	resp := &responses.FPDFText_CountChars{}
	err := g.client.Call("Plugin.FPDFText_CountChars", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_CountRects(request *requests.FPDFText_CountRects) (*responses.FPDFText_CountRects, error) {
	resp := &responses.FPDFText_CountRects{}
	err := g.client.Call("Plugin.FPDFText_CountRects", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_FindClose(request *requests.FPDFText_FindClose) (*responses.FPDFText_FindClose, error) {
	resp := &responses.FPDFText_FindClose{}
	err := g.client.Call("Plugin.FPDFText_FindClose", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_FindNext(request *requests.FPDFText_FindNext) (*responses.FPDFText_FindNext, error) {
	resp := &responses.FPDFText_FindNext{}
	err := g.client.Call("Plugin.FPDFText_FindNext", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_FindPrev(request *requests.FPDFText_FindPrev) (*responses.FPDFText_FindPrev, error) {
	resp := &responses.FPDFText_FindPrev{}
	err := g.client.Call("Plugin.FPDFText_FindPrev", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_FindStart(request *requests.FPDFText_FindStart) (*responses.FPDFText_FindStart, error) {
	resp := &responses.FPDFText_FindStart{}
	err := g.client.Call("Plugin.FPDFText_FindStart", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_GetBoundedText(request *requests.FPDFText_GetBoundedText) (*responses.FPDFText_GetBoundedText, error) {
	resp := &responses.FPDFText_GetBoundedText{}
	err := g.client.Call("Plugin.FPDFText_GetBoundedText", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_GetCharAngle(request *requests.FPDFText_GetCharAngle) (*responses.FPDFText_GetCharAngle, error) {
	resp := &responses.FPDFText_GetCharAngle{}
	err := g.client.Call("Plugin.FPDFText_GetCharAngle", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_GetCharBox(request *requests.FPDFText_GetCharBox) (*responses.FPDFText_GetCharBox, error) {
	resp := &responses.FPDFText_GetCharBox{}
	err := g.client.Call("Plugin.FPDFText_GetCharBox", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_GetCharIndexAtPos(request *requests.FPDFText_GetCharIndexAtPos) (*responses.FPDFText_GetCharIndexAtPos, error) {
	resp := &responses.FPDFText_GetCharIndexAtPos{}
	err := g.client.Call("Plugin.FPDFText_GetCharIndexAtPos", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_GetCharIndexFromTextIndex(request *requests.FPDFText_GetCharIndexFromTextIndex) (*responses.FPDFText_GetCharIndexFromTextIndex, error) {
	resp := &responses.FPDFText_GetCharIndexFromTextIndex{}
	err := g.client.Call("Plugin.FPDFText_GetCharIndexFromTextIndex", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_GetCharOrigin(request *requests.FPDFText_GetCharOrigin) (*responses.FPDFText_GetCharOrigin, error) {
	resp := &responses.FPDFText_GetCharOrigin{}
	err := g.client.Call("Plugin.FPDFText_GetCharOrigin", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_GetFillColor(request *requests.FPDFText_GetFillColor) (*responses.FPDFText_GetFillColor, error) {
	resp := &responses.FPDFText_GetFillColor{}
	err := g.client.Call("Plugin.FPDFText_GetFillColor", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_GetFontInfo(request *requests.FPDFText_GetFontInfo) (*responses.FPDFText_GetFontInfo, error) {
	resp := &responses.FPDFText_GetFontInfo{}
	err := g.client.Call("Plugin.FPDFText_GetFontInfo", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_GetFontSize(request *requests.FPDFText_GetFontSize) (*responses.FPDFText_GetFontSize, error) {
	resp := &responses.FPDFText_GetFontSize{}
	err := g.client.Call("Plugin.FPDFText_GetFontSize", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_GetFontWeight(request *requests.FPDFText_GetFontWeight) (*responses.FPDFText_GetFontWeight, error) {
	resp := &responses.FPDFText_GetFontWeight{}
	err := g.client.Call("Plugin.FPDFText_GetFontWeight", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_GetLooseCharBox(request *requests.FPDFText_GetLooseCharBox) (*responses.FPDFText_GetLooseCharBox, error) {
	resp := &responses.FPDFText_GetLooseCharBox{}
	err := g.client.Call("Plugin.FPDFText_GetLooseCharBox", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_GetMatrix(request *requests.FPDFText_GetMatrix) (*responses.FPDFText_GetMatrix, error) {
	resp := &responses.FPDFText_GetMatrix{}
	err := g.client.Call("Plugin.FPDFText_GetMatrix", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_GetRect(request *requests.FPDFText_GetRect) (*responses.FPDFText_GetRect, error) {
	resp := &responses.FPDFText_GetRect{}
	err := g.client.Call("Plugin.FPDFText_GetRect", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_GetSchCount(request *requests.FPDFText_GetSchCount) (*responses.FPDFText_GetSchCount, error) {
	resp := &responses.FPDFText_GetSchCount{}
	err := g.client.Call("Plugin.FPDFText_GetSchCount", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_GetSchResultIndex(request *requests.FPDFText_GetSchResultIndex) (*responses.FPDFText_GetSchResultIndex, error) {
	resp := &responses.FPDFText_GetSchResultIndex{}
	err := g.client.Call("Plugin.FPDFText_GetSchResultIndex", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_GetStrokeColor(request *requests.FPDFText_GetStrokeColor) (*responses.FPDFText_GetStrokeColor, error) {
	resp := &responses.FPDFText_GetStrokeColor{}
	err := g.client.Call("Plugin.FPDFText_GetStrokeColor", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_GetText(request *requests.FPDFText_GetText) (*responses.FPDFText_GetText, error) {
	resp := &responses.FPDFText_GetText{}
	err := g.client.Call("Plugin.FPDFText_GetText", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_GetTextIndexFromCharIndex(request *requests.FPDFText_GetTextIndexFromCharIndex) (*responses.FPDFText_GetTextIndexFromCharIndex, error) {
	resp := &responses.FPDFText_GetTextIndexFromCharIndex{}
	err := g.client.Call("Plugin.FPDFText_GetTextIndexFromCharIndex", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_GetTextObject(request *requests.FPDFText_GetTextObject) (*responses.FPDFText_GetTextObject, error) {
	resp := &responses.FPDFText_GetTextObject{}
	err := g.client.Call("Plugin.FPDFText_GetTextObject", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_GetUnicode(request *requests.FPDFText_GetUnicode) (*responses.FPDFText_GetUnicode, error) {
	resp := &responses.FPDFText_GetUnicode{}
	err := g.client.Call("Plugin.FPDFText_GetUnicode", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_HasUnicodeMapError(request *requests.FPDFText_HasUnicodeMapError) (*responses.FPDFText_HasUnicodeMapError, error) {
	resp := &responses.FPDFText_HasUnicodeMapError{}
	err := g.client.Call("Plugin.FPDFText_HasUnicodeMapError", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_IsGenerated(request *requests.FPDFText_IsGenerated) (*responses.FPDFText_IsGenerated, error) {
	resp := &responses.FPDFText_IsGenerated{}
	err := g.client.Call("Plugin.FPDFText_IsGenerated", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_IsHyphen(request *requests.FPDFText_IsHyphen) (*responses.FPDFText_IsHyphen, error) {
	resp := &responses.FPDFText_IsHyphen{}
	err := g.client.Call("Plugin.FPDFText_IsHyphen", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_LoadCidType2Font(request *requests.FPDFText_LoadCidType2Font) (*responses.FPDFText_LoadCidType2Font, error) {
	resp := &responses.FPDFText_LoadCidType2Font{}
	err := g.client.Call("Plugin.FPDFText_LoadCidType2Font", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_LoadFont(request *requests.FPDFText_LoadFont) (*responses.FPDFText_LoadFont, error) {
	resp := &responses.FPDFText_LoadFont{}
	err := g.client.Call("Plugin.FPDFText_LoadFont", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_LoadPage(request *requests.FPDFText_LoadPage) (*responses.FPDFText_LoadPage, error) {
	resp := &responses.FPDFText_LoadPage{}
	err := g.client.Call("Plugin.FPDFText_LoadPage", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_LoadStandardFont(request *requests.FPDFText_LoadStandardFont) (*responses.FPDFText_LoadStandardFont, error) {
	resp := &responses.FPDFText_LoadStandardFont{}
	err := g.client.Call("Plugin.FPDFText_LoadStandardFont", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_SetCharcodes(request *requests.FPDFText_SetCharcodes) (*responses.FPDFText_SetCharcodes, error) {
	resp := &responses.FPDFText_SetCharcodes{}
	err := g.client.Call("Plugin.FPDFText_SetCharcodes", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFText_SetText(request *requests.FPDFText_SetText) (*responses.FPDFText_SetText, error) {
	resp := &responses.FPDFText_SetText{}
	err := g.client.Call("Plugin.FPDFText_SetText", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_CloseDocument(request *requests.FPDF_CloseDocument) (*responses.FPDF_CloseDocument, error) {
	resp := &responses.FPDF_CloseDocument{}
	err := g.client.Call("Plugin.FPDF_CloseDocument", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_ClosePage(request *requests.FPDF_ClosePage) (*responses.FPDF_ClosePage, error) {
	resp := &responses.FPDF_ClosePage{}
	err := g.client.Call("Plugin.FPDF_ClosePage", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_CloseXObject(request *requests.FPDF_CloseXObject) (*responses.FPDF_CloseXObject, error) {
	resp := &responses.FPDF_CloseXObject{}
	err := g.client.Call("Plugin.FPDF_CloseXObject", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_CopyViewerPreferences(request *requests.FPDF_CopyViewerPreferences) (*responses.FPDF_CopyViewerPreferences, error) {
	resp := &responses.FPDF_CopyViewerPreferences{}
	err := g.client.Call("Plugin.FPDF_CopyViewerPreferences", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_CountNamedDests(request *requests.FPDF_CountNamedDests) (*responses.FPDF_CountNamedDests, error) {
	resp := &responses.FPDF_CountNamedDests{}
	err := g.client.Call("Plugin.FPDF_CountNamedDests", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_CreateClipPath(request *requests.FPDF_CreateClipPath) (*responses.FPDF_CreateClipPath, error) {
	resp := &responses.FPDF_CreateClipPath{}
	err := g.client.Call("Plugin.FPDF_CreateClipPath", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_CreateNewDocument(request *requests.FPDF_CreateNewDocument) (*responses.FPDF_CreateNewDocument, error) {
	resp := &responses.FPDF_CreateNewDocument{}
	err := g.client.Call("Plugin.FPDF_CreateNewDocument", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_DestroyClipPath(request *requests.FPDF_DestroyClipPath) (*responses.FPDF_DestroyClipPath, error) {
	resp := &responses.FPDF_DestroyClipPath{}
	err := g.client.Call("Plugin.FPDF_DestroyClipPath", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_DeviceToPage(request *requests.FPDF_DeviceToPage) (*responses.FPDF_DeviceToPage, error) {
	resp := &responses.FPDF_DeviceToPage{}
	err := g.client.Call("Plugin.FPDF_DeviceToPage", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_DocumentHasValidCrossReferenceTable(request *requests.FPDF_DocumentHasValidCrossReferenceTable) (*responses.FPDF_DocumentHasValidCrossReferenceTable, error) {
	resp := &responses.FPDF_DocumentHasValidCrossReferenceTable{}
	err := g.client.Call("Plugin.FPDF_DocumentHasValidCrossReferenceTable", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_FFLDraw(request *requests.FPDF_FFLDraw) (*responses.FPDF_FFLDraw, error) {
	resp := &responses.FPDF_FFLDraw{}
	err := g.client.Call("Plugin.FPDF_FFLDraw", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetDocPermissions(request *requests.FPDF_GetDocPermissions) (*responses.FPDF_GetDocPermissions, error) {
	resp := &responses.FPDF_GetDocPermissions{}
	err := g.client.Call("Plugin.FPDF_GetDocPermissions", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetDocUserPermissions(request *requests.FPDF_GetDocUserPermissions) (*responses.FPDF_GetDocUserPermissions, error) {
	resp := &responses.FPDF_GetDocUserPermissions{}
	err := g.client.Call("Plugin.FPDF_GetDocUserPermissions", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetFileIdentifier(request *requests.FPDF_GetFileIdentifier) (*responses.FPDF_GetFileIdentifier, error) {
	resp := &responses.FPDF_GetFileIdentifier{}
	err := g.client.Call("Plugin.FPDF_GetFileIdentifier", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetFileVersion(request *requests.FPDF_GetFileVersion) (*responses.FPDF_GetFileVersion, error) {
	resp := &responses.FPDF_GetFileVersion{}
	err := g.client.Call("Plugin.FPDF_GetFileVersion", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetFormType(request *requests.FPDF_GetFormType) (*responses.FPDF_GetFormType, error) {
	resp := &responses.FPDF_GetFormType{}
	err := g.client.Call("Plugin.FPDF_GetFormType", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetLastError(request *requests.FPDF_GetLastError) (*responses.FPDF_GetLastError, error) {
	resp := &responses.FPDF_GetLastError{}
	err := g.client.Call("Plugin.FPDF_GetLastError", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetMetaText(request *requests.FPDF_GetMetaText) (*responses.FPDF_GetMetaText, error) {
	resp := &responses.FPDF_GetMetaText{}
	err := g.client.Call("Plugin.FPDF_GetMetaText", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetNamedDest(request *requests.FPDF_GetNamedDest) (*responses.FPDF_GetNamedDest, error) {
	resp := &responses.FPDF_GetNamedDest{}
	err := g.client.Call("Plugin.FPDF_GetNamedDest", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetNamedDestByName(request *requests.FPDF_GetNamedDestByName) (*responses.FPDF_GetNamedDestByName, error) {
	resp := &responses.FPDF_GetNamedDestByName{}
	err := g.client.Call("Plugin.FPDF_GetNamedDestByName", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetPageAAction(request *requests.FPDF_GetPageAAction) (*responses.FPDF_GetPageAAction, error) {
	resp := &responses.FPDF_GetPageAAction{}
	err := g.client.Call("Plugin.FPDF_GetPageAAction", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetPageBoundingBox(request *requests.FPDF_GetPageBoundingBox) (*responses.FPDF_GetPageBoundingBox, error) {
	resp := &responses.FPDF_GetPageBoundingBox{}
	err := g.client.Call("Plugin.FPDF_GetPageBoundingBox", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetPageCount(request *requests.FPDF_GetPageCount) (*responses.FPDF_GetPageCount, error) {
	resp := &responses.FPDF_GetPageCount{}
	err := g.client.Call("Plugin.FPDF_GetPageCount", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetPageHeight(request *requests.FPDF_GetPageHeight) (*responses.FPDF_GetPageHeight, error) {
	resp := &responses.FPDF_GetPageHeight{}
	err := g.client.Call("Plugin.FPDF_GetPageHeight", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetPageHeightF(request *requests.FPDF_GetPageHeightF) (*responses.FPDF_GetPageHeightF, error) {
	resp := &responses.FPDF_GetPageHeightF{}
	err := g.client.Call("Plugin.FPDF_GetPageHeightF", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetPageLabel(request *requests.FPDF_GetPageLabel) (*responses.FPDF_GetPageLabel, error) {
	resp := &responses.FPDF_GetPageLabel{}
	err := g.client.Call("Plugin.FPDF_GetPageLabel", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetPageSizeByIndex(request *requests.FPDF_GetPageSizeByIndex) (*responses.FPDF_GetPageSizeByIndex, error) {
	resp := &responses.FPDF_GetPageSizeByIndex{}
	err := g.client.Call("Plugin.FPDF_GetPageSizeByIndex", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetPageSizeByIndexF(request *requests.FPDF_GetPageSizeByIndexF) (*responses.FPDF_GetPageSizeByIndexF, error) {
	resp := &responses.FPDF_GetPageSizeByIndexF{}
	err := g.client.Call("Plugin.FPDF_GetPageSizeByIndexF", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetPageWidth(request *requests.FPDF_GetPageWidth) (*responses.FPDF_GetPageWidth, error) {
	resp := &responses.FPDF_GetPageWidth{}
	err := g.client.Call("Plugin.FPDF_GetPageWidth", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetPageWidthF(request *requests.FPDF_GetPageWidthF) (*responses.FPDF_GetPageWidthF, error) {
	resp := &responses.FPDF_GetPageWidthF{}
	err := g.client.Call("Plugin.FPDF_GetPageWidthF", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetSecurityHandlerRevision(request *requests.FPDF_GetSecurityHandlerRevision) (*responses.FPDF_GetSecurityHandlerRevision, error) {
	resp := &responses.FPDF_GetSecurityHandlerRevision{}
	err := g.client.Call("Plugin.FPDF_GetSecurityHandlerRevision", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetSignatureCount(request *requests.FPDF_GetSignatureCount) (*responses.FPDF_GetSignatureCount, error) {
	resp := &responses.FPDF_GetSignatureCount{}
	err := g.client.Call("Plugin.FPDF_GetSignatureCount", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetSignatureObject(request *requests.FPDF_GetSignatureObject) (*responses.FPDF_GetSignatureObject, error) {
	resp := &responses.FPDF_GetSignatureObject{}
	err := g.client.Call("Plugin.FPDF_GetSignatureObject", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetTrailerEnds(request *requests.FPDF_GetTrailerEnds) (*responses.FPDF_GetTrailerEnds, error) {
	resp := &responses.FPDF_GetTrailerEnds{}
	err := g.client.Call("Plugin.FPDF_GetTrailerEnds", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetXFAPacketContent(request *requests.FPDF_GetXFAPacketContent) (*responses.FPDF_GetXFAPacketContent, error) {
	resp := &responses.FPDF_GetXFAPacketContent{}
	err := g.client.Call("Plugin.FPDF_GetXFAPacketContent", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetXFAPacketCount(request *requests.FPDF_GetXFAPacketCount) (*responses.FPDF_GetXFAPacketCount, error) {
	resp := &responses.FPDF_GetXFAPacketCount{}
	err := g.client.Call("Plugin.FPDF_GetXFAPacketCount", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetXFAPacketName(request *requests.FPDF_GetXFAPacketName) (*responses.FPDF_GetXFAPacketName, error) {
	resp := &responses.FPDF_GetXFAPacketName{}
	err := g.client.Call("Plugin.FPDF_GetXFAPacketName", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_ImportNPagesToOne(request *requests.FPDF_ImportNPagesToOne) (*responses.FPDF_ImportNPagesToOne, error) {
	resp := &responses.FPDF_ImportNPagesToOne{}
	err := g.client.Call("Plugin.FPDF_ImportNPagesToOne", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_ImportPages(request *requests.FPDF_ImportPages) (*responses.FPDF_ImportPages, error) {
	resp := &responses.FPDF_ImportPages{}
	err := g.client.Call("Plugin.FPDF_ImportPages", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_ImportPagesByIndex(request *requests.FPDF_ImportPagesByIndex) (*responses.FPDF_ImportPagesByIndex, error) {
	resp := &responses.FPDF_ImportPagesByIndex{}
	err := g.client.Call("Plugin.FPDF_ImportPagesByIndex", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_LoadCustomDocument(request *requests.FPDF_LoadCustomDocument) (*responses.FPDF_LoadCustomDocument, error) {
	resp := &responses.FPDF_LoadCustomDocument{}
	err := g.client.Call("Plugin.FPDF_LoadCustomDocument", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_LoadDocument(request *requests.FPDF_LoadDocument) (*responses.FPDF_LoadDocument, error) {
	resp := &responses.FPDF_LoadDocument{}
	err := g.client.Call("Plugin.FPDF_LoadDocument", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_LoadMemDocument(request *requests.FPDF_LoadMemDocument) (*responses.FPDF_LoadMemDocument, error) {
	resp := &responses.FPDF_LoadMemDocument{}
	err := g.client.Call("Plugin.FPDF_LoadMemDocument", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_LoadMemDocument64(request *requests.FPDF_LoadMemDocument64) (*responses.FPDF_LoadMemDocument64, error) {
	resp := &responses.FPDF_LoadMemDocument64{}
	err := g.client.Call("Plugin.FPDF_LoadMemDocument64", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_LoadPage(request *requests.FPDF_LoadPage) (*responses.FPDF_LoadPage, error) {
	resp := &responses.FPDF_LoadPage{}
	err := g.client.Call("Plugin.FPDF_LoadPage", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_LoadXFA(request *requests.FPDF_LoadXFA) (*responses.FPDF_LoadXFA, error) {
	resp := &responses.FPDF_LoadXFA{}
	err := g.client.Call("Plugin.FPDF_LoadXFA", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_MovePages(request *requests.FPDF_MovePages) (*responses.FPDF_MovePages, error) {
	resp := &responses.FPDF_MovePages{}
	err := g.client.Call("Plugin.FPDF_MovePages", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_NewFormObjectFromXObject(request *requests.FPDF_NewFormObjectFromXObject) (*responses.FPDF_NewFormObjectFromXObject, error) {
	resp := &responses.FPDF_NewFormObjectFromXObject{}
	err := g.client.Call("Plugin.FPDF_NewFormObjectFromXObject", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_NewXObjectFromPage(request *requests.FPDF_NewXObjectFromPage) (*responses.FPDF_NewXObjectFromPage, error) {
	resp := &responses.FPDF_NewXObjectFromPage{}
	err := g.client.Call("Plugin.FPDF_NewXObjectFromPage", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_PageToDevice(request *requests.FPDF_PageToDevice) (*responses.FPDF_PageToDevice, error) {
	resp := &responses.FPDF_PageToDevice{}
	err := g.client.Call("Plugin.FPDF_PageToDevice", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_RemoveFormFieldHighlight(request *requests.FPDF_RemoveFormFieldHighlight) (*responses.FPDF_RemoveFormFieldHighlight, error) {
	resp := &responses.FPDF_RemoveFormFieldHighlight{}
	err := g.client.Call("Plugin.FPDF_RemoveFormFieldHighlight", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_RenderPage(request *requests.FPDF_RenderPage) (*responses.FPDF_RenderPage, error) {
	resp := &responses.FPDF_RenderPage{}
	err := g.client.Call("Plugin.FPDF_RenderPage", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_RenderPageBitmap(request *requests.FPDF_RenderPageBitmap) (*responses.FPDF_RenderPageBitmap, error) {
	resp := &responses.FPDF_RenderPageBitmap{}
	err := g.client.Call("Plugin.FPDF_RenderPageBitmap", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_RenderPageBitmapWithColorScheme_Start(request *requests.FPDF_RenderPageBitmapWithColorScheme_Start) (*responses.FPDF_RenderPageBitmapWithColorScheme_Start, error) {
	resp := &responses.FPDF_RenderPageBitmapWithColorScheme_Start{}
	err := g.client.Call("Plugin.FPDF_RenderPageBitmapWithColorScheme_Start", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_RenderPageBitmapWithMatrix(request *requests.FPDF_RenderPageBitmapWithMatrix) (*responses.FPDF_RenderPageBitmapWithMatrix, error) {
	resp := &responses.FPDF_RenderPageBitmapWithMatrix{}
	err := g.client.Call("Plugin.FPDF_RenderPageBitmapWithMatrix", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_RenderPageBitmap_Start(request *requests.FPDF_RenderPageBitmap_Start) (*responses.FPDF_RenderPageBitmap_Start, error) {
	resp := &responses.FPDF_RenderPageBitmap_Start{}
	err := g.client.Call("Plugin.FPDF_RenderPageBitmap_Start", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_RenderPage_Close(request *requests.FPDF_RenderPage_Close) (*responses.FPDF_RenderPage_Close, error) {
	resp := &responses.FPDF_RenderPage_Close{}
	err := g.client.Call("Plugin.FPDF_RenderPage_Close", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_RenderPage_Continue(request *requests.FPDF_RenderPage_Continue) (*responses.FPDF_RenderPage_Continue, error) {
	resp := &responses.FPDF_RenderPage_Continue{}
	err := g.client.Call("Plugin.FPDF_RenderPage_Continue", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_SaveAsCopy(request *requests.FPDF_SaveAsCopy) (*responses.FPDF_SaveAsCopy, error) {
	resp := &responses.FPDF_SaveAsCopy{}
	err := g.client.Call("Plugin.FPDF_SaveAsCopy", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_SaveWithVersion(request *requests.FPDF_SaveWithVersion) (*responses.FPDF_SaveWithVersion, error) {
	resp := &responses.FPDF_SaveWithVersion{}
	err := g.client.Call("Plugin.FPDF_SaveWithVersion", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_SetFormFieldHighlightAlpha(request *requests.FPDF_SetFormFieldHighlightAlpha) (*responses.FPDF_SetFormFieldHighlightAlpha, error) {
	resp := &responses.FPDF_SetFormFieldHighlightAlpha{}
	err := g.client.Call("Plugin.FPDF_SetFormFieldHighlightAlpha", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_SetFormFieldHighlightColor(request *requests.FPDF_SetFormFieldHighlightColor) (*responses.FPDF_SetFormFieldHighlightColor, error) {
	resp := &responses.FPDF_SetFormFieldHighlightColor{}
	err := g.client.Call("Plugin.FPDF_SetFormFieldHighlightColor", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_SetPrintMode(request *requests.FPDF_SetPrintMode) (*responses.FPDF_SetPrintMode, error) {
	resp := &responses.FPDF_SetPrintMode{}
	err := g.client.Call("Plugin.FPDF_SetPrintMode", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_SetSandBoxPolicy(request *requests.FPDF_SetSandBoxPolicy) (*responses.FPDF_SetSandBoxPolicy, error) {
	resp := &responses.FPDF_SetSandBoxPolicy{}
	err := g.client.Call("Plugin.FPDF_SetSandBoxPolicy", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_StructElement_Attr_CountChildren(request *requests.FPDF_StructElement_Attr_CountChildren) (*responses.FPDF_StructElement_Attr_CountChildren, error) {
	resp := &responses.FPDF_StructElement_Attr_CountChildren{}
	err := g.client.Call("Plugin.FPDF_StructElement_Attr_CountChildren", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_StructElement_Attr_GetBlobValue(request *requests.FPDF_StructElement_Attr_GetBlobValue) (*responses.FPDF_StructElement_Attr_GetBlobValue, error) {
	resp := &responses.FPDF_StructElement_Attr_GetBlobValue{}
	err := g.client.Call("Plugin.FPDF_StructElement_Attr_GetBlobValue", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_StructElement_Attr_GetBooleanValue(request *requests.FPDF_StructElement_Attr_GetBooleanValue) (*responses.FPDF_StructElement_Attr_GetBooleanValue, error) {
	resp := &responses.FPDF_StructElement_Attr_GetBooleanValue{}
	err := g.client.Call("Plugin.FPDF_StructElement_Attr_GetBooleanValue", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_StructElement_Attr_GetChildAtIndex(request *requests.FPDF_StructElement_Attr_GetChildAtIndex) (*responses.FPDF_StructElement_Attr_GetChildAtIndex, error) {
	resp := &responses.FPDF_StructElement_Attr_GetChildAtIndex{}
	err := g.client.Call("Plugin.FPDF_StructElement_Attr_GetChildAtIndex", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_StructElement_Attr_GetCount(request *requests.FPDF_StructElement_Attr_GetCount) (*responses.FPDF_StructElement_Attr_GetCount, error) {
	resp := &responses.FPDF_StructElement_Attr_GetCount{}
	err := g.client.Call("Plugin.FPDF_StructElement_Attr_GetCount", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_StructElement_Attr_GetName(request *requests.FPDF_StructElement_Attr_GetName) (*responses.FPDF_StructElement_Attr_GetName, error) {
	resp := &responses.FPDF_StructElement_Attr_GetName{}
	err := g.client.Call("Plugin.FPDF_StructElement_Attr_GetName", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_StructElement_Attr_GetNumberValue(request *requests.FPDF_StructElement_Attr_GetNumberValue) (*responses.FPDF_StructElement_Attr_GetNumberValue, error) {
	resp := &responses.FPDF_StructElement_Attr_GetNumberValue{}
	err := g.client.Call("Plugin.FPDF_StructElement_Attr_GetNumberValue", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_StructElement_Attr_GetStringValue(request *requests.FPDF_StructElement_Attr_GetStringValue) (*responses.FPDF_StructElement_Attr_GetStringValue, error) {
	resp := &responses.FPDF_StructElement_Attr_GetStringValue{}
	err := g.client.Call("Plugin.FPDF_StructElement_Attr_GetStringValue", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_StructElement_Attr_GetType(request *requests.FPDF_StructElement_Attr_GetType) (*responses.FPDF_StructElement_Attr_GetType, error) {
	resp := &responses.FPDF_StructElement_Attr_GetType{}
	err := g.client.Call("Plugin.FPDF_StructElement_Attr_GetType", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_StructElement_Attr_GetValue(request *requests.FPDF_StructElement_Attr_GetValue) (*responses.FPDF_StructElement_Attr_GetValue, error) {
	resp := &responses.FPDF_StructElement_Attr_GetValue{}
	err := g.client.Call("Plugin.FPDF_StructElement_Attr_GetValue", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_StructElement_CountChildren(request *requests.FPDF_StructElement_CountChildren) (*responses.FPDF_StructElement_CountChildren, error) {
	resp := &responses.FPDF_StructElement_CountChildren{}
	err := g.client.Call("Plugin.FPDF_StructElement_CountChildren", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_StructElement_GetActualText(request *requests.FPDF_StructElement_GetActualText) (*responses.FPDF_StructElement_GetActualText, error) {
	resp := &responses.FPDF_StructElement_GetActualText{}
	err := g.client.Call("Plugin.FPDF_StructElement_GetActualText", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_StructElement_GetAltText(request *requests.FPDF_StructElement_GetAltText) (*responses.FPDF_StructElement_GetAltText, error) {
	resp := &responses.FPDF_StructElement_GetAltText{}
	err := g.client.Call("Plugin.FPDF_StructElement_GetAltText", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_StructElement_GetAttributeAtIndex(request *requests.FPDF_StructElement_GetAttributeAtIndex) (*responses.FPDF_StructElement_GetAttributeAtIndex, error) {
	resp := &responses.FPDF_StructElement_GetAttributeAtIndex{}
	err := g.client.Call("Plugin.FPDF_StructElement_GetAttributeAtIndex", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_StructElement_GetAttributeCount(request *requests.FPDF_StructElement_GetAttributeCount) (*responses.FPDF_StructElement_GetAttributeCount, error) {
	resp := &responses.FPDF_StructElement_GetAttributeCount{}
	err := g.client.Call("Plugin.FPDF_StructElement_GetAttributeCount", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_StructElement_GetChildAtIndex(request *requests.FPDF_StructElement_GetChildAtIndex) (*responses.FPDF_StructElement_GetChildAtIndex, error) {
	resp := &responses.FPDF_StructElement_GetChildAtIndex{}
	err := g.client.Call("Plugin.FPDF_StructElement_GetChildAtIndex", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_StructElement_GetChildMarkedContentID(request *requests.FPDF_StructElement_GetChildMarkedContentID) (*responses.FPDF_StructElement_GetChildMarkedContentID, error) {
	resp := &responses.FPDF_StructElement_GetChildMarkedContentID{}
	err := g.client.Call("Plugin.FPDF_StructElement_GetChildMarkedContentID", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_StructElement_GetID(request *requests.FPDF_StructElement_GetID) (*responses.FPDF_StructElement_GetID, error) {
	resp := &responses.FPDF_StructElement_GetID{}
	err := g.client.Call("Plugin.FPDF_StructElement_GetID", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_StructElement_GetLang(request *requests.FPDF_StructElement_GetLang) (*responses.FPDF_StructElement_GetLang, error) {
	resp := &responses.FPDF_StructElement_GetLang{}
	err := g.client.Call("Plugin.FPDF_StructElement_GetLang", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_StructElement_GetMarkedContentID(request *requests.FPDF_StructElement_GetMarkedContentID) (*responses.FPDF_StructElement_GetMarkedContentID, error) {
	resp := &responses.FPDF_StructElement_GetMarkedContentID{}
	err := g.client.Call("Plugin.FPDF_StructElement_GetMarkedContentID", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_StructElement_GetMarkedContentIdAtIndex(request *requests.FPDF_StructElement_GetMarkedContentIdAtIndex) (*responses.FPDF_StructElement_GetMarkedContentIdAtIndex, error) {
	resp := &responses.FPDF_StructElement_GetMarkedContentIdAtIndex{}
	err := g.client.Call("Plugin.FPDF_StructElement_GetMarkedContentIdAtIndex", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_StructElement_GetMarkedContentIdCount(request *requests.FPDF_StructElement_GetMarkedContentIdCount) (*responses.FPDF_StructElement_GetMarkedContentIdCount, error) {
	resp := &responses.FPDF_StructElement_GetMarkedContentIdCount{}
	err := g.client.Call("Plugin.FPDF_StructElement_GetMarkedContentIdCount", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_StructElement_GetObjType(request *requests.FPDF_StructElement_GetObjType) (*responses.FPDF_StructElement_GetObjType, error) {
	resp := &responses.FPDF_StructElement_GetObjType{}
	err := g.client.Call("Plugin.FPDF_StructElement_GetObjType", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_StructElement_GetParent(request *requests.FPDF_StructElement_GetParent) (*responses.FPDF_StructElement_GetParent, error) {
	resp := &responses.FPDF_StructElement_GetParent{}
	err := g.client.Call("Plugin.FPDF_StructElement_GetParent", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_StructElement_GetStringAttribute(request *requests.FPDF_StructElement_GetStringAttribute) (*responses.FPDF_StructElement_GetStringAttribute, error) {
	resp := &responses.FPDF_StructElement_GetStringAttribute{}
	err := g.client.Call("Plugin.FPDF_StructElement_GetStringAttribute", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_StructElement_GetTitle(request *requests.FPDF_StructElement_GetTitle) (*responses.FPDF_StructElement_GetTitle, error) {
	resp := &responses.FPDF_StructElement_GetTitle{}
	err := g.client.Call("Plugin.FPDF_StructElement_GetTitle", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_StructElement_GetType(request *requests.FPDF_StructElement_GetType) (*responses.FPDF_StructElement_GetType, error) {
	resp := &responses.FPDF_StructElement_GetType{}
	err := g.client.Call("Plugin.FPDF_StructElement_GetType", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_StructTree_Close(request *requests.FPDF_StructTree_Close) (*responses.FPDF_StructTree_Close, error) {
	resp := &responses.FPDF_StructTree_Close{}
	err := g.client.Call("Plugin.FPDF_StructTree_Close", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_StructTree_CountChildren(request *requests.FPDF_StructTree_CountChildren) (*responses.FPDF_StructTree_CountChildren, error) {
	resp := &responses.FPDF_StructTree_CountChildren{}
	err := g.client.Call("Plugin.FPDF_StructTree_CountChildren", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_StructTree_GetChildAtIndex(request *requests.FPDF_StructTree_GetChildAtIndex) (*responses.FPDF_StructTree_GetChildAtIndex, error) {
	resp := &responses.FPDF_StructTree_GetChildAtIndex{}
	err := g.client.Call("Plugin.FPDF_StructTree_GetChildAtIndex", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_StructTree_GetForPage(request *requests.FPDF_StructTree_GetForPage) (*responses.FPDF_StructTree_GetForPage, error) {
	resp := &responses.FPDF_StructTree_GetForPage{}
	err := g.client.Call("Plugin.FPDF_StructTree_GetForPage", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_VIEWERREF_GetDuplex(request *requests.FPDF_VIEWERREF_GetDuplex) (*responses.FPDF_VIEWERREF_GetDuplex, error) {
	resp := &responses.FPDF_VIEWERREF_GetDuplex{}
	err := g.client.Call("Plugin.FPDF_VIEWERREF_GetDuplex", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_VIEWERREF_GetName(request *requests.FPDF_VIEWERREF_GetName) (*responses.FPDF_VIEWERREF_GetName, error) {
	resp := &responses.FPDF_VIEWERREF_GetName{}
	err := g.client.Call("Plugin.FPDF_VIEWERREF_GetName", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_VIEWERREF_GetNumCopies(request *requests.FPDF_VIEWERREF_GetNumCopies) (*responses.FPDF_VIEWERREF_GetNumCopies, error) {
	resp := &responses.FPDF_VIEWERREF_GetNumCopies{}
	err := g.client.Call("Plugin.FPDF_VIEWERREF_GetNumCopies", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_VIEWERREF_GetPrintPageRange(request *requests.FPDF_VIEWERREF_GetPrintPageRange) (*responses.FPDF_VIEWERREF_GetPrintPageRange, error) {
	resp := &responses.FPDF_VIEWERREF_GetPrintPageRange{}
	err := g.client.Call("Plugin.FPDF_VIEWERREF_GetPrintPageRange", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_VIEWERREF_GetPrintPageRangeCount(request *requests.FPDF_VIEWERREF_GetPrintPageRangeCount) (*responses.FPDF_VIEWERREF_GetPrintPageRangeCount, error) {
	resp := &responses.FPDF_VIEWERREF_GetPrintPageRangeCount{}
	err := g.client.Call("Plugin.FPDF_VIEWERREF_GetPrintPageRangeCount", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_VIEWERREF_GetPrintPageRangeElement(request *requests.FPDF_VIEWERREF_GetPrintPageRangeElement) (*responses.FPDF_VIEWERREF_GetPrintPageRangeElement, error) {
	resp := &responses.FPDF_VIEWERREF_GetPrintPageRangeElement{}
	err := g.client.Call("Plugin.FPDF_VIEWERREF_GetPrintPageRangeElement", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_VIEWERREF_GetPrintScaling(request *requests.FPDF_VIEWERREF_GetPrintScaling) (*responses.FPDF_VIEWERREF_GetPrintScaling, error) {
	resp := &responses.FPDF_VIEWERREF_GetPrintScaling{}
	err := g.client.Call("Plugin.FPDF_VIEWERREF_GetPrintScaling", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FSDK_SetLocaltimeFunction(request *requests.FSDK_SetLocaltimeFunction) (*responses.FSDK_SetLocaltimeFunction, error) {
	resp := &responses.FSDK_SetLocaltimeFunction{}
	err := g.client.Call("Plugin.FSDK_SetLocaltimeFunction", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FSDK_SetTimeFunction(request *requests.FSDK_SetTimeFunction) (*responses.FSDK_SetTimeFunction, error) {
	resp := &responses.FSDK_SetTimeFunction{}
	err := g.client.Call("Plugin.FSDK_SetTimeFunction", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FSDK_SetUnSpObjProcessHandler(request *requests.FSDK_SetUnSpObjProcessHandler) (*responses.FSDK_SetUnSpObjProcessHandler, error) {
	resp := &responses.FSDK_SetUnSpObjProcessHandler{}
	err := g.client.Call("Plugin.FSDK_SetUnSpObjProcessHandler", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) GetActionInfo(request *requests.GetActionInfo) (*responses.GetActionInfo, error) {
	resp := &responses.GetActionInfo{}
	err := g.client.Call("Plugin.GetActionInfo", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) GetAttachments(request *requests.GetAttachments) (*responses.GetAttachments, error) {
	resp := &responses.GetAttachments{}
	err := g.client.Call("Plugin.GetAttachments", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) GetBookmarks(request *requests.GetBookmarks) (*responses.GetBookmarks, error) {
	resp := &responses.GetBookmarks{}
	err := g.client.Call("Plugin.GetBookmarks", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) GetDestInfo(request *requests.GetDestInfo) (*responses.GetDestInfo, error) {
	resp := &responses.GetDestInfo{}
	err := g.client.Call("Plugin.GetDestInfo", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) GetForm(request *requests.GetForm) (*responses.GetForm, error) {
	resp := &responses.GetForm{}
	err := g.client.Call("Plugin.GetForm", request, resp)
	if err != nil {
		return nil, err
	}
any(resp).(responses.AfterUnmarshaler).AfterUnmarshal()
	return resp, nil
}

func (g *PdfiumRPC) GetJavaScriptActions(request *requests.GetJavaScriptActions) (*responses.GetJavaScriptActions, error) {
	resp := &responses.GetJavaScriptActions{}
	err := g.client.Call("Plugin.GetJavaScriptActions", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) GetMetaData(request *requests.GetMetaData) (*responses.GetMetaData, error) {
	resp := &responses.GetMetaData{}
	err := g.client.Call("Plugin.GetMetaData", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) GetPageSize(request *requests.GetPageSize) (*responses.GetPageSize, error) {
	resp := &responses.GetPageSize{}
	err := g.client.Call("Plugin.GetPageSize", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) GetPageSizeInPixels(request *requests.GetPageSizeInPixels) (*responses.GetPageSizeInPixels, error) {
	resp := &responses.GetPageSizeInPixels{}
	err := g.client.Call("Plugin.GetPageSizeInPixels", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) GetPageText(request *requests.GetPageText) (*responses.GetPageText, error) {
	resp := &responses.GetPageText{}
	err := g.client.Call("Plugin.GetPageText", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) GetPageTextStructured(request *requests.GetPageTextStructured) (*responses.GetPageTextStructured, error) {
	resp := &responses.GetPageTextStructured{}
	err := g.client.Call("Plugin.GetPageTextStructured", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) OpenDocument(request *requests.OpenDocument) (*responses.OpenDocument, error) {
	resp := &responses.OpenDocument{}
	err := g.client.Call("Plugin.OpenDocument", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) RenderPageInDPI(request *requests.RenderPageInDPI) (*responses.RenderPageInDPI, error) {
	resp := &responses.RenderPageInDPI{}
	err := g.client.Call("Plugin.RenderPageInDPI", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) RenderPageInPixels(request *requests.RenderPageInPixels) (*responses.RenderPageInPixels, error) {
	resp := &responses.RenderPageInPixels{}
	err := g.client.Call("Plugin.RenderPageInPixels", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) RenderPagesInDPI(request *requests.RenderPagesInDPI) (*responses.RenderPagesInDPI, error) {
	resp := &responses.RenderPagesInDPI{}
	err := g.client.Call("Plugin.RenderPagesInDPI", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) RenderPagesInPixels(request *requests.RenderPagesInPixels) (*responses.RenderPagesInPixels, error) {
	resp := &responses.RenderPagesInPixels{}
	err := g.client.Call("Plugin.RenderPagesInPixels", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) RenderToFile(request *requests.RenderToFile) (*responses.RenderToFile, error) {
	resp := &responses.RenderToFile{}
	err := g.client.Call("Plugin.RenderToFile", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (s *PdfiumRPCServer) FORM_CanRedo(request *requests.FORM_CanRedo, resp *responses.FORM_CanRedo) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FORM_CanRedo", panicError)
		}
	}()

	implResp, err := s.Impl.FORM_CanRedo(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FORM_CanUndo(request *requests.FORM_CanUndo, resp *responses.FORM_CanUndo) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FORM_CanUndo", panicError)
		}
	}()

	implResp, err := s.Impl.FORM_CanUndo(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FORM_DoDocumentAAction(request *requests.FORM_DoDocumentAAction, resp *responses.FORM_DoDocumentAAction) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FORM_DoDocumentAAction", panicError)
		}
	}()

	implResp, err := s.Impl.FORM_DoDocumentAAction(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FORM_DoDocumentJSAction(request *requests.FORM_DoDocumentJSAction, resp *responses.FORM_DoDocumentJSAction) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FORM_DoDocumentJSAction", panicError)
		}
	}()

	implResp, err := s.Impl.FORM_DoDocumentJSAction(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FORM_DoDocumentOpenAction(request *requests.FORM_DoDocumentOpenAction, resp *responses.FORM_DoDocumentOpenAction) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FORM_DoDocumentOpenAction", panicError)
		}
	}()

	implResp, err := s.Impl.FORM_DoDocumentOpenAction(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FORM_DoPageAAction(request *requests.FORM_DoPageAAction, resp *responses.FORM_DoPageAAction) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FORM_DoPageAAction", panicError)
		}
	}()

	implResp, err := s.Impl.FORM_DoPageAAction(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FORM_ForceToKillFocus(request *requests.FORM_ForceToKillFocus, resp *responses.FORM_ForceToKillFocus) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FORM_ForceToKillFocus", panicError)
		}
	}()

	implResp, err := s.Impl.FORM_ForceToKillFocus(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FORM_GetFocusedAnnot(request *requests.FORM_GetFocusedAnnot, resp *responses.FORM_GetFocusedAnnot) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FORM_GetFocusedAnnot", panicError)
		}
	}()

	implResp, err := s.Impl.FORM_GetFocusedAnnot(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FORM_GetFocusedText(request *requests.FORM_GetFocusedText, resp *responses.FORM_GetFocusedText) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FORM_GetFocusedText", panicError)
		}
	}()

	implResp, err := s.Impl.FORM_GetFocusedText(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FORM_GetSelectedText(request *requests.FORM_GetSelectedText, resp *responses.FORM_GetSelectedText) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FORM_GetSelectedText", panicError)
		}
	}()

	implResp, err := s.Impl.FORM_GetSelectedText(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FORM_IsIndexSelected(request *requests.FORM_IsIndexSelected, resp *responses.FORM_IsIndexSelected) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FORM_IsIndexSelected", panicError)
		}
	}()

	implResp, err := s.Impl.FORM_IsIndexSelected(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FORM_OnAfterLoadPage(request *requests.FORM_OnAfterLoadPage, resp *responses.FORM_OnAfterLoadPage) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FORM_OnAfterLoadPage", panicError)
		}
	}()

	implResp, err := s.Impl.FORM_OnAfterLoadPage(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FORM_OnBeforeClosePage(request *requests.FORM_OnBeforeClosePage, resp *responses.FORM_OnBeforeClosePage) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FORM_OnBeforeClosePage", panicError)
		}
	}()

	implResp, err := s.Impl.FORM_OnBeforeClosePage(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FORM_OnChar(request *requests.FORM_OnChar, resp *responses.FORM_OnChar) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FORM_OnChar", panicError)
		}
	}()

	implResp, err := s.Impl.FORM_OnChar(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FORM_OnFocus(request *requests.FORM_OnFocus, resp *responses.FORM_OnFocus) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FORM_OnFocus", panicError)
		}
	}()

	implResp, err := s.Impl.FORM_OnFocus(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FORM_OnKeyDown(request *requests.FORM_OnKeyDown, resp *responses.FORM_OnKeyDown) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FORM_OnKeyDown", panicError)
		}
	}()

	implResp, err := s.Impl.FORM_OnKeyDown(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FORM_OnKeyUp(request *requests.FORM_OnKeyUp, resp *responses.FORM_OnKeyUp) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FORM_OnKeyUp", panicError)
		}
	}()

	implResp, err := s.Impl.FORM_OnKeyUp(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FORM_OnLButtonDoubleClick(request *requests.FORM_OnLButtonDoubleClick, resp *responses.FORM_OnLButtonDoubleClick) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FORM_OnLButtonDoubleClick", panicError)
		}
	}()

	implResp, err := s.Impl.FORM_OnLButtonDoubleClick(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FORM_OnLButtonDown(request *requests.FORM_OnLButtonDown, resp *responses.FORM_OnLButtonDown) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FORM_OnLButtonDown", panicError)
		}
	}()

	implResp, err := s.Impl.FORM_OnLButtonDown(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FORM_OnLButtonUp(request *requests.FORM_OnLButtonUp, resp *responses.FORM_OnLButtonUp) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FORM_OnLButtonUp", panicError)
		}
	}()

	implResp, err := s.Impl.FORM_OnLButtonUp(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FORM_OnMouseMove(request *requests.FORM_OnMouseMove, resp *responses.FORM_OnMouseMove) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FORM_OnMouseMove", panicError)
		}
	}()

	implResp, err := s.Impl.FORM_OnMouseMove(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FORM_OnMouseWheel(request *requests.FORM_OnMouseWheel, resp *responses.FORM_OnMouseWheel) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FORM_OnMouseWheel", panicError)
		}
	}()

	implResp, err := s.Impl.FORM_OnMouseWheel(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FORM_OnRButtonDown(request *requests.FORM_OnRButtonDown, resp *responses.FORM_OnRButtonDown) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FORM_OnRButtonDown", panicError)
		}
	}()

	implResp, err := s.Impl.FORM_OnRButtonDown(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FORM_OnRButtonUp(request *requests.FORM_OnRButtonUp, resp *responses.FORM_OnRButtonUp) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FORM_OnRButtonUp", panicError)
		}
	}()

	implResp, err := s.Impl.FORM_OnRButtonUp(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FORM_Redo(request *requests.FORM_Redo, resp *responses.FORM_Redo) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FORM_Redo", panicError)
		}
	}()

	implResp, err := s.Impl.FORM_Redo(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FORM_ReplaceAndKeepSelection(request *requests.FORM_ReplaceAndKeepSelection, resp *responses.FORM_ReplaceAndKeepSelection) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FORM_ReplaceAndKeepSelection", panicError)
		}
	}()

	implResp, err := s.Impl.FORM_ReplaceAndKeepSelection(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FORM_ReplaceSelection(request *requests.FORM_ReplaceSelection, resp *responses.FORM_ReplaceSelection) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FORM_ReplaceSelection", panicError)
		}
	}()

	implResp, err := s.Impl.FORM_ReplaceSelection(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FORM_SelectAllText(request *requests.FORM_SelectAllText, resp *responses.FORM_SelectAllText) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FORM_SelectAllText", panicError)
		}
	}()

	implResp, err := s.Impl.FORM_SelectAllText(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FORM_SetFocusedAnnot(request *requests.FORM_SetFocusedAnnot, resp *responses.FORM_SetFocusedAnnot) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FORM_SetFocusedAnnot", panicError)
		}
	}()

	implResp, err := s.Impl.FORM_SetFocusedAnnot(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FORM_SetIndexSelected(request *requests.FORM_SetIndexSelected, resp *responses.FORM_SetIndexSelected) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FORM_SetIndexSelected", panicError)
		}
	}()

	implResp, err := s.Impl.FORM_SetIndexSelected(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FORM_Undo(request *requests.FORM_Undo, resp *responses.FORM_Undo) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FORM_Undo", panicError)
		}
	}()

	implResp, err := s.Impl.FORM_Undo(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAction_GetDest(request *requests.FPDFAction_GetDest, resp *responses.FPDFAction_GetDest) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAction_GetDest", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAction_GetDest(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAction_GetFilePath(request *requests.FPDFAction_GetFilePath, resp *responses.FPDFAction_GetFilePath) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAction_GetFilePath", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAction_GetFilePath(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAction_GetType(request *requests.FPDFAction_GetType, resp *responses.FPDFAction_GetType) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAction_GetType", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAction_GetType(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAction_GetURIPath(request *requests.FPDFAction_GetURIPath, resp *responses.FPDFAction_GetURIPath) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAction_GetURIPath", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAction_GetURIPath(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_AddFileAttachment(request *requests.FPDFAnnot_AddFileAttachment, resp *responses.FPDFAnnot_AddFileAttachment) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_AddFileAttachment", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_AddFileAttachment(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_AddInkStroke(request *requests.FPDFAnnot_AddInkStroke, resp *responses.FPDFAnnot_AddInkStroke) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_AddInkStroke", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_AddInkStroke(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_AppendAttachmentPoints(request *requests.FPDFAnnot_AppendAttachmentPoints, resp *responses.FPDFAnnot_AppendAttachmentPoints) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_AppendAttachmentPoints", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_AppendAttachmentPoints(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_AppendObject(request *requests.FPDFAnnot_AppendObject, resp *responses.FPDFAnnot_AppendObject) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_AppendObject", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_AppendObject(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_CountAttachmentPoints(request *requests.FPDFAnnot_CountAttachmentPoints, resp *responses.FPDFAnnot_CountAttachmentPoints) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_CountAttachmentPoints", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_CountAttachmentPoints(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetAP(request *requests.FPDFAnnot_GetAP, resp *responses.FPDFAnnot_GetAP) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetAP", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetAP(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetAttachmentPoints(request *requests.FPDFAnnot_GetAttachmentPoints, resp *responses.FPDFAnnot_GetAttachmentPoints) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetAttachmentPoints", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetAttachmentPoints(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetBorder(request *requests.FPDFAnnot_GetBorder, resp *responses.FPDFAnnot_GetBorder) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetBorder", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetBorder(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetColor(request *requests.FPDFAnnot_GetColor, resp *responses.FPDFAnnot_GetColor) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetColor", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetColor(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetFileAttachment(request *requests.FPDFAnnot_GetFileAttachment, resp *responses.FPDFAnnot_GetFileAttachment) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetFileAttachment", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetFileAttachment(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetFlags(request *requests.FPDFAnnot_GetFlags, resp *responses.FPDFAnnot_GetFlags) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetFlags", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetFlags(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetFocusableSubtypes(request *requests.FPDFAnnot_GetFocusableSubtypes, resp *responses.FPDFAnnot_GetFocusableSubtypes) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetFocusableSubtypes", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetFocusableSubtypes(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetFocusableSubtypesCount(request *requests.FPDFAnnot_GetFocusableSubtypesCount, resp *responses.FPDFAnnot_GetFocusableSubtypesCount) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetFocusableSubtypesCount", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetFocusableSubtypesCount(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetFontColor(request *requests.FPDFAnnot_GetFontColor, resp *responses.FPDFAnnot_GetFontColor) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetFontColor", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetFontColor(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetFontSize(request *requests.FPDFAnnot_GetFontSize, resp *responses.FPDFAnnot_GetFontSize) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetFontSize", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetFontSize(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetFormAdditionalActionJavaScript(request *requests.FPDFAnnot_GetFormAdditionalActionJavaScript, resp *responses.FPDFAnnot_GetFormAdditionalActionJavaScript) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetFormAdditionalActionJavaScript", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetFormAdditionalActionJavaScript(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetFormControlCount(request *requests.FPDFAnnot_GetFormControlCount, resp *responses.FPDFAnnot_GetFormControlCount) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetFormControlCount", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetFormControlCount(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetFormControlIndex(request *requests.FPDFAnnot_GetFormControlIndex, resp *responses.FPDFAnnot_GetFormControlIndex) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetFormControlIndex", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetFormControlIndex(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetFormFieldAlternateName(request *requests.FPDFAnnot_GetFormFieldAlternateName, resp *responses.FPDFAnnot_GetFormFieldAlternateName) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetFormFieldAlternateName", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetFormFieldAlternateName(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetFormFieldAtPoint(request *requests.FPDFAnnot_GetFormFieldAtPoint, resp *responses.FPDFAnnot_GetFormFieldAtPoint) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetFormFieldAtPoint", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetFormFieldAtPoint(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetFormFieldExportValue(request *requests.FPDFAnnot_GetFormFieldExportValue, resp *responses.FPDFAnnot_GetFormFieldExportValue) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetFormFieldExportValue", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetFormFieldExportValue(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetFormFieldFlags(request *requests.FPDFAnnot_GetFormFieldFlags, resp *responses.FPDFAnnot_GetFormFieldFlags) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetFormFieldFlags", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetFormFieldFlags(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetFormFieldName(request *requests.FPDFAnnot_GetFormFieldName, resp *responses.FPDFAnnot_GetFormFieldName) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetFormFieldName", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetFormFieldName(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetFormFieldType(request *requests.FPDFAnnot_GetFormFieldType, resp *responses.FPDFAnnot_GetFormFieldType) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetFormFieldType", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetFormFieldType(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetFormFieldValue(request *requests.FPDFAnnot_GetFormFieldValue, resp *responses.FPDFAnnot_GetFormFieldValue) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetFormFieldValue", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetFormFieldValue(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetInkListCount(request *requests.FPDFAnnot_GetInkListCount, resp *responses.FPDFAnnot_GetInkListCount) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetInkListCount", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetInkListCount(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetInkListPath(request *requests.FPDFAnnot_GetInkListPath, resp *responses.FPDFAnnot_GetInkListPath) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetInkListPath", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetInkListPath(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetLine(request *requests.FPDFAnnot_GetLine, resp *responses.FPDFAnnot_GetLine) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetLine", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetLine(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetLink(request *requests.FPDFAnnot_GetLink, resp *responses.FPDFAnnot_GetLink) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetLink", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetLink(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetLinkedAnnot(request *requests.FPDFAnnot_GetLinkedAnnot, resp *responses.FPDFAnnot_GetLinkedAnnot) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetLinkedAnnot", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetLinkedAnnot(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetNumberValue(request *requests.FPDFAnnot_GetNumberValue, resp *responses.FPDFAnnot_GetNumberValue) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetNumberValue", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetNumberValue(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetObject(request *requests.FPDFAnnot_GetObject, resp *responses.FPDFAnnot_GetObject) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetObject", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetObject(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetObjectCount(request *requests.FPDFAnnot_GetObjectCount, resp *responses.FPDFAnnot_GetObjectCount) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetObjectCount", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetObjectCount(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetOptionCount(request *requests.FPDFAnnot_GetOptionCount, resp *responses.FPDFAnnot_GetOptionCount) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetOptionCount", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetOptionCount(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetOptionLabel(request *requests.FPDFAnnot_GetOptionLabel, resp *responses.FPDFAnnot_GetOptionLabel) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetOptionLabel", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetOptionLabel(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetRect(request *requests.FPDFAnnot_GetRect, resp *responses.FPDFAnnot_GetRect) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetRect", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetRect(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetStringValue(request *requests.FPDFAnnot_GetStringValue, resp *responses.FPDFAnnot_GetStringValue) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetStringValue", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetStringValue(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetSubtype(request *requests.FPDFAnnot_GetSubtype, resp *responses.FPDFAnnot_GetSubtype) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetSubtype", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetSubtype(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetValueType(request *requests.FPDFAnnot_GetValueType, resp *responses.FPDFAnnot_GetValueType) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetValueType", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetValueType(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_GetVertices(request *requests.FPDFAnnot_GetVertices, resp *responses.FPDFAnnot_GetVertices) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_GetVertices", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_GetVertices(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_HasAttachmentPoints(request *requests.FPDFAnnot_HasAttachmentPoints, resp *responses.FPDFAnnot_HasAttachmentPoints) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_HasAttachmentPoints", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_HasAttachmentPoints(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_HasKey(request *requests.FPDFAnnot_HasKey, resp *responses.FPDFAnnot_HasKey) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_HasKey", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_HasKey(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_IsChecked(request *requests.FPDFAnnot_IsChecked, resp *responses.FPDFAnnot_IsChecked) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_IsChecked", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_IsChecked(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_IsObjectSupportedSubtype(request *requests.FPDFAnnot_IsObjectSupportedSubtype, resp *responses.FPDFAnnot_IsObjectSupportedSubtype) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_IsObjectSupportedSubtype", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_IsObjectSupportedSubtype(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_IsOptionSelected(request *requests.FPDFAnnot_IsOptionSelected, resp *responses.FPDFAnnot_IsOptionSelected) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_IsOptionSelected", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_IsOptionSelected(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_IsSupportedSubtype(request *requests.FPDFAnnot_IsSupportedSubtype, resp *responses.FPDFAnnot_IsSupportedSubtype) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_IsSupportedSubtype", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_IsSupportedSubtype(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_RemoveInkList(request *requests.FPDFAnnot_RemoveInkList, resp *responses.FPDFAnnot_RemoveInkList) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_RemoveInkList", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_RemoveInkList(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_RemoveObject(request *requests.FPDFAnnot_RemoveObject, resp *responses.FPDFAnnot_RemoveObject) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_RemoveObject", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_RemoveObject(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_SetAP(request *requests.FPDFAnnot_SetAP, resp *responses.FPDFAnnot_SetAP) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_SetAP", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_SetAP(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_SetAttachmentPoints(request *requests.FPDFAnnot_SetAttachmentPoints, resp *responses.FPDFAnnot_SetAttachmentPoints) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_SetAttachmentPoints", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_SetAttachmentPoints(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_SetBorder(request *requests.FPDFAnnot_SetBorder, resp *responses.FPDFAnnot_SetBorder) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_SetBorder", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_SetBorder(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_SetColor(request *requests.FPDFAnnot_SetColor, resp *responses.FPDFAnnot_SetColor) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_SetColor", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_SetColor(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_SetFlags(request *requests.FPDFAnnot_SetFlags, resp *responses.FPDFAnnot_SetFlags) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_SetFlags", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_SetFlags(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_SetFocusableSubtypes(request *requests.FPDFAnnot_SetFocusableSubtypes, resp *responses.FPDFAnnot_SetFocusableSubtypes) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_SetFocusableSubtypes", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_SetFocusableSubtypes(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_SetFontColor(request *requests.FPDFAnnot_SetFontColor, resp *responses.FPDFAnnot_SetFontColor) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_SetFontColor", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_SetFontColor(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_SetFormFieldFlags(request *requests.FPDFAnnot_SetFormFieldFlags, resp *responses.FPDFAnnot_SetFormFieldFlags) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_SetFormFieldFlags", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_SetFormFieldFlags(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_SetRect(request *requests.FPDFAnnot_SetRect, resp *responses.FPDFAnnot_SetRect) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_SetRect", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_SetRect(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_SetStringValue(request *requests.FPDFAnnot_SetStringValue, resp *responses.FPDFAnnot_SetStringValue) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_SetStringValue", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_SetStringValue(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_SetURI(request *requests.FPDFAnnot_SetURI, resp *responses.FPDFAnnot_SetURI) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_SetURI", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_SetURI(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAnnot_UpdateObject(request *requests.FPDFAnnot_UpdateObject, resp *responses.FPDFAnnot_UpdateObject) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAnnot_UpdateObject", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAnnot_UpdateObject(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAttachment_GetFile(request *requests.FPDFAttachment_GetFile, resp *responses.FPDFAttachment_GetFile) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAttachment_GetFile", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAttachment_GetFile(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAttachment_GetName(request *requests.FPDFAttachment_GetName, resp *responses.FPDFAttachment_GetName) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAttachment_GetName", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAttachment_GetName(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAttachment_GetStringValue(request *requests.FPDFAttachment_GetStringValue, resp *responses.FPDFAttachment_GetStringValue) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAttachment_GetStringValue", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAttachment_GetStringValue(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAttachment_GetSubtype(request *requests.FPDFAttachment_GetSubtype, resp *responses.FPDFAttachment_GetSubtype) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAttachment_GetSubtype", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAttachment_GetSubtype(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAttachment_GetValueType(request *requests.FPDFAttachment_GetValueType, resp *responses.FPDFAttachment_GetValueType) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAttachment_GetValueType", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAttachment_GetValueType(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAttachment_HasKey(request *requests.FPDFAttachment_HasKey, resp *responses.FPDFAttachment_HasKey) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAttachment_HasKey", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAttachment_HasKey(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAttachment_SetFile(request *requests.FPDFAttachment_SetFile, resp *responses.FPDFAttachment_SetFile) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAttachment_SetFile", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAttachment_SetFile(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAttachment_SetStringValue(request *requests.FPDFAttachment_SetStringValue, resp *responses.FPDFAttachment_SetStringValue) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAttachment_SetStringValue", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAttachment_SetStringValue(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAvail_Create(request *requests.FPDFAvail_Create, resp *responses.FPDFAvail_Create) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAvail_Create", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAvail_Create(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAvail_Destroy(request *requests.FPDFAvail_Destroy, resp *responses.FPDFAvail_Destroy) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAvail_Destroy", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAvail_Destroy(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAvail_GetDocument(request *requests.FPDFAvail_GetDocument, resp *responses.FPDFAvail_GetDocument) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAvail_GetDocument", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAvail_GetDocument(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAvail_GetFirstPageNum(request *requests.FPDFAvail_GetFirstPageNum, resp *responses.FPDFAvail_GetFirstPageNum) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAvail_GetFirstPageNum", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAvail_GetFirstPageNum(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAvail_IsDocAvail(request *requests.FPDFAvail_IsDocAvail, resp *responses.FPDFAvail_IsDocAvail) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAvail_IsDocAvail", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAvail_IsDocAvail(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAvail_IsFormAvail(request *requests.FPDFAvail_IsFormAvail, resp *responses.FPDFAvail_IsFormAvail) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAvail_IsFormAvail", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAvail_IsFormAvail(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAvail_IsLinearized(request *requests.FPDFAvail_IsLinearized, resp *responses.FPDFAvail_IsLinearized) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAvail_IsLinearized", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAvail_IsLinearized(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAvail_IsPageAvail(request *requests.FPDFAvail_IsPageAvail, resp *responses.FPDFAvail_IsPageAvail) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFAvail_IsPageAvail", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFAvail_IsPageAvail(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFBitmap_Create(request *requests.FPDFBitmap_Create, resp *responses.FPDFBitmap_Create) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFBitmap_Create", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFBitmap_Create(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFBitmap_CreateEx(request *requests.FPDFBitmap_CreateEx, resp *responses.FPDFBitmap_CreateEx) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFBitmap_CreateEx", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFBitmap_CreateEx(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFBitmap_Destroy(request *requests.FPDFBitmap_Destroy, resp *responses.FPDFBitmap_Destroy) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFBitmap_Destroy", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFBitmap_Destroy(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFBitmap_FillRect(request *requests.FPDFBitmap_FillRect, resp *responses.FPDFBitmap_FillRect) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFBitmap_FillRect", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFBitmap_FillRect(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFBitmap_GetBuffer(request *requests.FPDFBitmap_GetBuffer, resp *responses.FPDFBitmap_GetBuffer) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFBitmap_GetBuffer", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFBitmap_GetBuffer(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFBitmap_GetFormat(request *requests.FPDFBitmap_GetFormat, resp *responses.FPDFBitmap_GetFormat) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFBitmap_GetFormat", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFBitmap_GetFormat(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFBitmap_GetHeight(request *requests.FPDFBitmap_GetHeight, resp *responses.FPDFBitmap_GetHeight) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFBitmap_GetHeight", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFBitmap_GetHeight(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFBitmap_GetStride(request *requests.FPDFBitmap_GetStride, resp *responses.FPDFBitmap_GetStride) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFBitmap_GetStride", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFBitmap_GetStride(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFBitmap_GetWidth(request *requests.FPDFBitmap_GetWidth, resp *responses.FPDFBitmap_GetWidth) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFBitmap_GetWidth", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFBitmap_GetWidth(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFBookmark_Find(request *requests.FPDFBookmark_Find, resp *responses.FPDFBookmark_Find) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFBookmark_Find", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFBookmark_Find(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFBookmark_GetAction(request *requests.FPDFBookmark_GetAction, resp *responses.FPDFBookmark_GetAction) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFBookmark_GetAction", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFBookmark_GetAction(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFBookmark_GetCount(request *requests.FPDFBookmark_GetCount, resp *responses.FPDFBookmark_GetCount) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFBookmark_GetCount", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFBookmark_GetCount(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFBookmark_GetDest(request *requests.FPDFBookmark_GetDest, resp *responses.FPDFBookmark_GetDest) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFBookmark_GetDest", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFBookmark_GetDest(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFBookmark_GetFirstChild(request *requests.FPDFBookmark_GetFirstChild, resp *responses.FPDFBookmark_GetFirstChild) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFBookmark_GetFirstChild", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFBookmark_GetFirstChild(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFBookmark_GetNextSibling(request *requests.FPDFBookmark_GetNextSibling, resp *responses.FPDFBookmark_GetNextSibling) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFBookmark_GetNextSibling", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFBookmark_GetNextSibling(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFBookmark_GetTitle(request *requests.FPDFBookmark_GetTitle, resp *responses.FPDFBookmark_GetTitle) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFBookmark_GetTitle", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFBookmark_GetTitle(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFCatalog_IsTagged(request *requests.FPDFCatalog_IsTagged, resp *responses.FPDFCatalog_IsTagged) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFCatalog_IsTagged", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFCatalog_IsTagged(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFCatalog_SetLanguage(request *requests.FPDFCatalog_SetLanguage, resp *responses.FPDFCatalog_SetLanguage) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFCatalog_SetLanguage", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFCatalog_SetLanguage(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFClipPath_CountPathSegments(request *requests.FPDFClipPath_CountPathSegments, resp *responses.FPDFClipPath_CountPathSegments) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFClipPath_CountPathSegments", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFClipPath_CountPathSegments(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFClipPath_CountPaths(request *requests.FPDFClipPath_CountPaths, resp *responses.FPDFClipPath_CountPaths) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFClipPath_CountPaths", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFClipPath_CountPaths(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFClipPath_GetPathSegment(request *requests.FPDFClipPath_GetPathSegment, resp *responses.FPDFClipPath_GetPathSegment) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFClipPath_GetPathSegment", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFClipPath_GetPathSegment(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFDOC_ExitFormFillEnvironment(request *requests.FPDFDOC_ExitFormFillEnvironment, resp *responses.FPDFDOC_ExitFormFillEnvironment) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFDOC_ExitFormFillEnvironment", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFDOC_ExitFormFillEnvironment(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFDOC_InitFormFillEnvironment(request *requests.FPDFDOC_InitFormFillEnvironment, resp *responses.FPDFDOC_InitFormFillEnvironment) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFDOC_InitFormFillEnvironment", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFDOC_InitFormFillEnvironment(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFDest_GetDestPageIndex(request *requests.FPDFDest_GetDestPageIndex, resp *responses.FPDFDest_GetDestPageIndex) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFDest_GetDestPageIndex", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFDest_GetDestPageIndex(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFDest_GetLocationInPage(request *requests.FPDFDest_GetLocationInPage, resp *responses.FPDFDest_GetLocationInPage) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFDest_GetLocationInPage", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFDest_GetLocationInPage(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFDest_GetView(request *requests.FPDFDest_GetView, resp *responses.FPDFDest_GetView) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFDest_GetView", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFDest_GetView(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFDoc_AddAttachment(request *requests.FPDFDoc_AddAttachment, resp *responses.FPDFDoc_AddAttachment) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFDoc_AddAttachment", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFDoc_AddAttachment(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFDoc_CloseJavaScriptAction(request *requests.FPDFDoc_CloseJavaScriptAction, resp *responses.FPDFDoc_CloseJavaScriptAction) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFDoc_CloseJavaScriptAction", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFDoc_CloseJavaScriptAction(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFDoc_DeleteAttachment(request *requests.FPDFDoc_DeleteAttachment, resp *responses.FPDFDoc_DeleteAttachment) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFDoc_DeleteAttachment", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFDoc_DeleteAttachment(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFDoc_GetAttachment(request *requests.FPDFDoc_GetAttachment, resp *responses.FPDFDoc_GetAttachment) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFDoc_GetAttachment", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFDoc_GetAttachment(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFDoc_GetAttachmentCount(request *requests.FPDFDoc_GetAttachmentCount, resp *responses.FPDFDoc_GetAttachmentCount) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFDoc_GetAttachmentCount", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFDoc_GetAttachmentCount(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFDoc_GetJavaScriptAction(request *requests.FPDFDoc_GetJavaScriptAction, resp *responses.FPDFDoc_GetJavaScriptAction) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFDoc_GetJavaScriptAction", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFDoc_GetJavaScriptAction(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFDoc_GetJavaScriptActionCount(request *requests.FPDFDoc_GetJavaScriptActionCount, resp *responses.FPDFDoc_GetJavaScriptActionCount) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFDoc_GetJavaScriptActionCount", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFDoc_GetJavaScriptActionCount(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFDoc_GetPageMode(request *requests.FPDFDoc_GetPageMode, resp *responses.FPDFDoc_GetPageMode) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFDoc_GetPageMode", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFDoc_GetPageMode(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFFont_Close(request *requests.FPDFFont_Close, resp *responses.FPDFFont_Close) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFFont_Close", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFFont_Close(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFFont_GetAscent(request *requests.FPDFFont_GetAscent, resp *responses.FPDFFont_GetAscent) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFFont_GetAscent", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFFont_GetAscent(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFFont_GetBaseFontName(request *requests.FPDFFont_GetBaseFontName, resp *responses.FPDFFont_GetBaseFontName) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFFont_GetBaseFontName", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFFont_GetBaseFontName(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFFont_GetDescent(request *requests.FPDFFont_GetDescent, resp *responses.FPDFFont_GetDescent) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFFont_GetDescent", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFFont_GetDescent(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFFont_GetFamilyName(request *requests.FPDFFont_GetFamilyName, resp *responses.FPDFFont_GetFamilyName) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFFont_GetFamilyName", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFFont_GetFamilyName(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFFont_GetFlags(request *requests.FPDFFont_GetFlags, resp *responses.FPDFFont_GetFlags) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFFont_GetFlags", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFFont_GetFlags(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFFont_GetFontData(request *requests.FPDFFont_GetFontData, resp *responses.FPDFFont_GetFontData) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFFont_GetFontData", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFFont_GetFontData(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFFont_GetGlyphPath(request *requests.FPDFFont_GetGlyphPath, resp *responses.FPDFFont_GetGlyphPath) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFFont_GetGlyphPath", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFFont_GetGlyphPath(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFFont_GetGlyphWidth(request *requests.FPDFFont_GetGlyphWidth, resp *responses.FPDFFont_GetGlyphWidth) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFFont_GetGlyphWidth", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFFont_GetGlyphWidth(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFFont_GetIsEmbedded(request *requests.FPDFFont_GetIsEmbedded, resp *responses.FPDFFont_GetIsEmbedded) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFFont_GetIsEmbedded", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFFont_GetIsEmbedded(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFFont_GetItalicAngle(request *requests.FPDFFont_GetItalicAngle, resp *responses.FPDFFont_GetItalicAngle) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFFont_GetItalicAngle", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFFont_GetItalicAngle(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFFont_GetWeight(request *requests.FPDFFont_GetWeight, resp *responses.FPDFFont_GetWeight) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFFont_GetWeight", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFFont_GetWeight(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFFormObj_CountObjects(request *requests.FPDFFormObj_CountObjects, resp *responses.FPDFFormObj_CountObjects) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFFormObj_CountObjects", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFFormObj_CountObjects(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFFormObj_GetObject(request *requests.FPDFFormObj_GetObject, resp *responses.FPDFFormObj_GetObject) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFFormObj_GetObject", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFFormObj_GetObject(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFFormObj_RemoveObject(request *requests.FPDFFormObj_RemoveObject, resp *responses.FPDFFormObj_RemoveObject) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFFormObj_RemoveObject", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFFormObj_RemoveObject(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFGlyphPath_CountGlyphSegments(request *requests.FPDFGlyphPath_CountGlyphSegments, resp *responses.FPDFGlyphPath_CountGlyphSegments) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFGlyphPath_CountGlyphSegments", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFGlyphPath_CountGlyphSegments(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFGlyphPath_GetGlyphPathSegment(request *requests.FPDFGlyphPath_GetGlyphPathSegment, resp *responses.FPDFGlyphPath_GetGlyphPathSegment) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFGlyphPath_GetGlyphPathSegment", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFGlyphPath_GetGlyphPathSegment(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFImageObj_GetBitmap(request *requests.FPDFImageObj_GetBitmap, resp *responses.FPDFImageObj_GetBitmap) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFImageObj_GetBitmap", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFImageObj_GetBitmap(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFImageObj_GetIccProfileDataDecoded(request *requests.FPDFImageObj_GetIccProfileDataDecoded, resp *responses.FPDFImageObj_GetIccProfileDataDecoded) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFImageObj_GetIccProfileDataDecoded", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFImageObj_GetIccProfileDataDecoded(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFImageObj_GetImageDataDecoded(request *requests.FPDFImageObj_GetImageDataDecoded, resp *responses.FPDFImageObj_GetImageDataDecoded) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFImageObj_GetImageDataDecoded", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFImageObj_GetImageDataDecoded(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFImageObj_GetImageDataRaw(request *requests.FPDFImageObj_GetImageDataRaw, resp *responses.FPDFImageObj_GetImageDataRaw) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFImageObj_GetImageDataRaw", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFImageObj_GetImageDataRaw(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFImageObj_GetImageFilter(request *requests.FPDFImageObj_GetImageFilter, resp *responses.FPDFImageObj_GetImageFilter) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFImageObj_GetImageFilter", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFImageObj_GetImageFilter(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFImageObj_GetImageFilterCount(request *requests.FPDFImageObj_GetImageFilterCount, resp *responses.FPDFImageObj_GetImageFilterCount) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFImageObj_GetImageFilterCount", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFImageObj_GetImageFilterCount(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFImageObj_GetImageMetadata(request *requests.FPDFImageObj_GetImageMetadata, resp *responses.FPDFImageObj_GetImageMetadata) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFImageObj_GetImageMetadata", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFImageObj_GetImageMetadata(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFImageObj_GetImagePixelSize(request *requests.FPDFImageObj_GetImagePixelSize, resp *responses.FPDFImageObj_GetImagePixelSize) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFImageObj_GetImagePixelSize", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFImageObj_GetImagePixelSize(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFImageObj_GetRenderedBitmap(request *requests.FPDFImageObj_GetRenderedBitmap, resp *responses.FPDFImageObj_GetRenderedBitmap) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFImageObj_GetRenderedBitmap", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFImageObj_GetRenderedBitmap(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFImageObj_LoadJpegFile(request *requests.FPDFImageObj_LoadJpegFile, resp *responses.FPDFImageObj_LoadJpegFile) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFImageObj_LoadJpegFile", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFImageObj_LoadJpegFile(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFImageObj_LoadJpegFileInline(request *requests.FPDFImageObj_LoadJpegFileInline, resp *responses.FPDFImageObj_LoadJpegFileInline) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFImageObj_LoadJpegFileInline", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFImageObj_LoadJpegFileInline(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFImageObj_SetBitmap(request *requests.FPDFImageObj_SetBitmap, resp *responses.FPDFImageObj_SetBitmap) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFImageObj_SetBitmap", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFImageObj_SetBitmap(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFImageObj_SetMatrix(request *requests.FPDFImageObj_SetMatrix, resp *responses.FPDFImageObj_SetMatrix) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFImageObj_SetMatrix", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFImageObj_SetMatrix(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFJavaScriptAction_GetName(request *requests.FPDFJavaScriptAction_GetName, resp *responses.FPDFJavaScriptAction_GetName) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFJavaScriptAction_GetName", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFJavaScriptAction_GetName(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFJavaScriptAction_GetScript(request *requests.FPDFJavaScriptAction_GetScript, resp *responses.FPDFJavaScriptAction_GetScript) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFJavaScriptAction_GetScript", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFJavaScriptAction_GetScript(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFLink_CloseWebLinks(request *requests.FPDFLink_CloseWebLinks, resp *responses.FPDFLink_CloseWebLinks) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFLink_CloseWebLinks", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFLink_CloseWebLinks(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFLink_CountQuadPoints(request *requests.FPDFLink_CountQuadPoints, resp *responses.FPDFLink_CountQuadPoints) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFLink_CountQuadPoints", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFLink_CountQuadPoints(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFLink_CountRects(request *requests.FPDFLink_CountRects, resp *responses.FPDFLink_CountRects) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFLink_CountRects", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFLink_CountRects(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFLink_CountWebLinks(request *requests.FPDFLink_CountWebLinks, resp *responses.FPDFLink_CountWebLinks) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFLink_CountWebLinks", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFLink_CountWebLinks(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFLink_Enumerate(request *requests.FPDFLink_Enumerate, resp *responses.FPDFLink_Enumerate) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFLink_Enumerate", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFLink_Enumerate(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFLink_GetAction(request *requests.FPDFLink_GetAction, resp *responses.FPDFLink_GetAction) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFLink_GetAction", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFLink_GetAction(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFLink_GetAnnot(request *requests.FPDFLink_GetAnnot, resp *responses.FPDFLink_GetAnnot) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFLink_GetAnnot", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFLink_GetAnnot(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFLink_GetAnnotRect(request *requests.FPDFLink_GetAnnotRect, resp *responses.FPDFLink_GetAnnotRect) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFLink_GetAnnotRect", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFLink_GetAnnotRect(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFLink_GetDest(request *requests.FPDFLink_GetDest, resp *responses.FPDFLink_GetDest) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFLink_GetDest", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFLink_GetDest(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFLink_GetLinkAtPoint(request *requests.FPDFLink_GetLinkAtPoint, resp *responses.FPDFLink_GetLinkAtPoint) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFLink_GetLinkAtPoint", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFLink_GetLinkAtPoint(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFLink_GetLinkZOrderAtPoint(request *requests.FPDFLink_GetLinkZOrderAtPoint, resp *responses.FPDFLink_GetLinkZOrderAtPoint) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFLink_GetLinkZOrderAtPoint", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFLink_GetLinkZOrderAtPoint(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFLink_GetQuadPoints(request *requests.FPDFLink_GetQuadPoints, resp *responses.FPDFLink_GetQuadPoints) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFLink_GetQuadPoints", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFLink_GetQuadPoints(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFLink_GetRect(request *requests.FPDFLink_GetRect, resp *responses.FPDFLink_GetRect) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFLink_GetRect", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFLink_GetRect(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFLink_GetTextRange(request *requests.FPDFLink_GetTextRange, resp *responses.FPDFLink_GetTextRange) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFLink_GetTextRange", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFLink_GetTextRange(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFLink_GetURL(request *requests.FPDFLink_GetURL, resp *responses.FPDFLink_GetURL) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFLink_GetURL", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFLink_GetURL(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFLink_LoadWebLinks(request *requests.FPDFLink_LoadWebLinks, resp *responses.FPDFLink_LoadWebLinks) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFLink_LoadWebLinks", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFLink_LoadWebLinks(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObjMark_CountParams(request *requests.FPDFPageObjMark_CountParams, resp *responses.FPDFPageObjMark_CountParams) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObjMark_CountParams", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObjMark_CountParams(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObjMark_GetName(request *requests.FPDFPageObjMark_GetName, resp *responses.FPDFPageObjMark_GetName) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObjMark_GetName", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObjMark_GetName(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObjMark_GetParamBlobValue(request *requests.FPDFPageObjMark_GetParamBlobValue, resp *responses.FPDFPageObjMark_GetParamBlobValue) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObjMark_GetParamBlobValue", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObjMark_GetParamBlobValue(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObjMark_GetParamIntValue(request *requests.FPDFPageObjMark_GetParamIntValue, resp *responses.FPDFPageObjMark_GetParamIntValue) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObjMark_GetParamIntValue", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObjMark_GetParamIntValue(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObjMark_GetParamKey(request *requests.FPDFPageObjMark_GetParamKey, resp *responses.FPDFPageObjMark_GetParamKey) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObjMark_GetParamKey", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObjMark_GetParamKey(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObjMark_GetParamStringValue(request *requests.FPDFPageObjMark_GetParamStringValue, resp *responses.FPDFPageObjMark_GetParamStringValue) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObjMark_GetParamStringValue", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObjMark_GetParamStringValue(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObjMark_GetParamValueType(request *requests.FPDFPageObjMark_GetParamValueType, resp *responses.FPDFPageObjMark_GetParamValueType) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObjMark_GetParamValueType", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObjMark_GetParamValueType(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObjMark_RemoveParam(request *requests.FPDFPageObjMark_RemoveParam, resp *responses.FPDFPageObjMark_RemoveParam) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObjMark_RemoveParam", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObjMark_RemoveParam(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObjMark_SetBlobParam(request *requests.FPDFPageObjMark_SetBlobParam, resp *responses.FPDFPageObjMark_SetBlobParam) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObjMark_SetBlobParam", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObjMark_SetBlobParam(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObjMark_SetIntParam(request *requests.FPDFPageObjMark_SetIntParam, resp *responses.FPDFPageObjMark_SetIntParam) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObjMark_SetIntParam", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObjMark_SetIntParam(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObjMark_SetStringParam(request *requests.FPDFPageObjMark_SetStringParam, resp *responses.FPDFPageObjMark_SetStringParam) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObjMark_SetStringParam", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObjMark_SetStringParam(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_AddMark(request *requests.FPDFPageObj_AddMark, resp *responses.FPDFPageObj_AddMark) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_AddMark", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_AddMark(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_CountMarks(request *requests.FPDFPageObj_CountMarks, resp *responses.FPDFPageObj_CountMarks) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_CountMarks", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_CountMarks(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_CreateNewPath(request *requests.FPDFPageObj_CreateNewPath, resp *responses.FPDFPageObj_CreateNewPath) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_CreateNewPath", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_CreateNewPath(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_CreateNewRect(request *requests.FPDFPageObj_CreateNewRect, resp *responses.FPDFPageObj_CreateNewRect) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_CreateNewRect", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_CreateNewRect(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_CreateTextObj(request *requests.FPDFPageObj_CreateTextObj, resp *responses.FPDFPageObj_CreateTextObj) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_CreateTextObj", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_CreateTextObj(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_Destroy(request *requests.FPDFPageObj_Destroy, resp *responses.FPDFPageObj_Destroy) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_Destroy", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_Destroy(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_GetBounds(request *requests.FPDFPageObj_GetBounds, resp *responses.FPDFPageObj_GetBounds) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_GetBounds", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_GetBounds(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_GetClipPath(request *requests.FPDFPageObj_GetClipPath, resp *responses.FPDFPageObj_GetClipPath) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_GetClipPath", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_GetClipPath(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_GetDashArray(request *requests.FPDFPageObj_GetDashArray, resp *responses.FPDFPageObj_GetDashArray) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_GetDashArray", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_GetDashArray(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_GetDashCount(request *requests.FPDFPageObj_GetDashCount, resp *responses.FPDFPageObj_GetDashCount) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_GetDashCount", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_GetDashCount(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_GetDashPhase(request *requests.FPDFPageObj_GetDashPhase, resp *responses.FPDFPageObj_GetDashPhase) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_GetDashPhase", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_GetDashPhase(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_GetFillColor(request *requests.FPDFPageObj_GetFillColor, resp *responses.FPDFPageObj_GetFillColor) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_GetFillColor", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_GetFillColor(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_GetIsActive(request *requests.FPDFPageObj_GetIsActive, resp *responses.FPDFPageObj_GetIsActive) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_GetIsActive", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_GetIsActive(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_GetLineCap(request *requests.FPDFPageObj_GetLineCap, resp *responses.FPDFPageObj_GetLineCap) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_GetLineCap", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_GetLineCap(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_GetLineJoin(request *requests.FPDFPageObj_GetLineJoin, resp *responses.FPDFPageObj_GetLineJoin) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_GetLineJoin", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_GetLineJoin(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_GetMark(request *requests.FPDFPageObj_GetMark, resp *responses.FPDFPageObj_GetMark) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_GetMark", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_GetMark(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_GetMarkedContentID(request *requests.FPDFPageObj_GetMarkedContentID, resp *responses.FPDFPageObj_GetMarkedContentID) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_GetMarkedContentID", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_GetMarkedContentID(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_GetMatrix(request *requests.FPDFPageObj_GetMatrix, resp *responses.FPDFPageObj_GetMatrix) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_GetMatrix", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_GetMatrix(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_GetRotatedBounds(request *requests.FPDFPageObj_GetRotatedBounds, resp *responses.FPDFPageObj_GetRotatedBounds) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_GetRotatedBounds", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_GetRotatedBounds(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_GetStrokeColor(request *requests.FPDFPageObj_GetStrokeColor, resp *responses.FPDFPageObj_GetStrokeColor) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_GetStrokeColor", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_GetStrokeColor(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_GetStrokeWidth(request *requests.FPDFPageObj_GetStrokeWidth, resp *responses.FPDFPageObj_GetStrokeWidth) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_GetStrokeWidth", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_GetStrokeWidth(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_GetType(request *requests.FPDFPageObj_GetType, resp *responses.FPDFPageObj_GetType) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_GetType", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_GetType(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_HasTransparency(request *requests.FPDFPageObj_HasTransparency, resp *responses.FPDFPageObj_HasTransparency) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_HasTransparency", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_HasTransparency(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_NewImageObj(request *requests.FPDFPageObj_NewImageObj, resp *responses.FPDFPageObj_NewImageObj) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_NewImageObj", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_NewImageObj(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_NewTextObj(request *requests.FPDFPageObj_NewTextObj, resp *responses.FPDFPageObj_NewTextObj) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_NewTextObj", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_NewTextObj(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_RemoveMark(request *requests.FPDFPageObj_RemoveMark, resp *responses.FPDFPageObj_RemoveMark) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_RemoveMark", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_RemoveMark(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_SetBlendMode(request *requests.FPDFPageObj_SetBlendMode, resp *responses.FPDFPageObj_SetBlendMode) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_SetBlendMode", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_SetBlendMode(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_SetDashArray(request *requests.FPDFPageObj_SetDashArray, resp *responses.FPDFPageObj_SetDashArray) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_SetDashArray", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_SetDashArray(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_SetDashPhase(request *requests.FPDFPageObj_SetDashPhase, resp *responses.FPDFPageObj_SetDashPhase) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_SetDashPhase", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_SetDashPhase(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_SetFillColor(request *requests.FPDFPageObj_SetFillColor, resp *responses.FPDFPageObj_SetFillColor) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_SetFillColor", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_SetFillColor(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_SetIsActive(request *requests.FPDFPageObj_SetIsActive, resp *responses.FPDFPageObj_SetIsActive) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_SetIsActive", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_SetIsActive(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_SetLineCap(request *requests.FPDFPageObj_SetLineCap, resp *responses.FPDFPageObj_SetLineCap) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_SetLineCap", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_SetLineCap(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_SetLineJoin(request *requests.FPDFPageObj_SetLineJoin, resp *responses.FPDFPageObj_SetLineJoin) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_SetLineJoin", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_SetLineJoin(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_SetMatrix(request *requests.FPDFPageObj_SetMatrix, resp *responses.FPDFPageObj_SetMatrix) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_SetMatrix", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_SetMatrix(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_SetStrokeColor(request *requests.FPDFPageObj_SetStrokeColor, resp *responses.FPDFPageObj_SetStrokeColor) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_SetStrokeColor", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_SetStrokeColor(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_SetStrokeWidth(request *requests.FPDFPageObj_SetStrokeWidth, resp *responses.FPDFPageObj_SetStrokeWidth) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_SetStrokeWidth", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_SetStrokeWidth(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_Transform(request *requests.FPDFPageObj_Transform, resp *responses.FPDFPageObj_Transform) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_Transform", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_Transform(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_TransformClipPath(request *requests.FPDFPageObj_TransformClipPath, resp *responses.FPDFPageObj_TransformClipPath) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_TransformClipPath", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_TransformClipPath(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPageObj_TransformF(request *requests.FPDFPageObj_TransformF, resp *responses.FPDFPageObj_TransformF) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPageObj_TransformF", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPageObj_TransformF(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_CloseAnnot(request *requests.FPDFPage_CloseAnnot, resp *responses.FPDFPage_CloseAnnot) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_CloseAnnot", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_CloseAnnot(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_CountObjects(request *requests.FPDFPage_CountObjects, resp *responses.FPDFPage_CountObjects) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_CountObjects", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_CountObjects(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_CreateAnnot(request *requests.FPDFPage_CreateAnnot, resp *responses.FPDFPage_CreateAnnot) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_CreateAnnot", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_CreateAnnot(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_Delete(request *requests.FPDFPage_Delete, resp *responses.FPDFPage_Delete) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_Delete", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_Delete(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_Flatten(request *requests.FPDFPage_Flatten, resp *responses.FPDFPage_Flatten) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_Flatten", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_Flatten(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_FormFieldZOrderAtPoint(request *requests.FPDFPage_FormFieldZOrderAtPoint, resp *responses.FPDFPage_FormFieldZOrderAtPoint) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_FormFieldZOrderAtPoint", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_FormFieldZOrderAtPoint(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_GenerateContent(request *requests.FPDFPage_GenerateContent, resp *responses.FPDFPage_GenerateContent) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_GenerateContent", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_GenerateContent(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_GetAnnot(request *requests.FPDFPage_GetAnnot, resp *responses.FPDFPage_GetAnnot) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_GetAnnot", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_GetAnnot(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_GetAnnotCount(request *requests.FPDFPage_GetAnnotCount, resp *responses.FPDFPage_GetAnnotCount) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_GetAnnotCount", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_GetAnnotCount(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_GetAnnotIndex(request *requests.FPDFPage_GetAnnotIndex, resp *responses.FPDFPage_GetAnnotIndex) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_GetAnnotIndex", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_GetAnnotIndex(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_GetArtBox(request *requests.FPDFPage_GetArtBox, resp *responses.FPDFPage_GetArtBox) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_GetArtBox", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_GetArtBox(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_GetBleedBox(request *requests.FPDFPage_GetBleedBox, resp *responses.FPDFPage_GetBleedBox) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_GetBleedBox", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_GetBleedBox(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_GetCropBox(request *requests.FPDFPage_GetCropBox, resp *responses.FPDFPage_GetCropBox) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_GetCropBox", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_GetCropBox(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_GetDecodedThumbnailData(request *requests.FPDFPage_GetDecodedThumbnailData, resp *responses.FPDFPage_GetDecodedThumbnailData) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_GetDecodedThumbnailData", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_GetDecodedThumbnailData(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_GetMediaBox(request *requests.FPDFPage_GetMediaBox, resp *responses.FPDFPage_GetMediaBox) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_GetMediaBox", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_GetMediaBox(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_GetObject(request *requests.FPDFPage_GetObject, resp *responses.FPDFPage_GetObject) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_GetObject", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_GetObject(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_GetRawThumbnailData(request *requests.FPDFPage_GetRawThumbnailData, resp *responses.FPDFPage_GetRawThumbnailData) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_GetRawThumbnailData", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_GetRawThumbnailData(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_GetRotation(request *requests.FPDFPage_GetRotation, resp *responses.FPDFPage_GetRotation) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_GetRotation", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_GetRotation(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_GetThumbnailAsBitmap(request *requests.FPDFPage_GetThumbnailAsBitmap, resp *responses.FPDFPage_GetThumbnailAsBitmap) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_GetThumbnailAsBitmap", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_GetThumbnailAsBitmap(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_GetTrimBox(request *requests.FPDFPage_GetTrimBox, resp *responses.FPDFPage_GetTrimBox) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_GetTrimBox", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_GetTrimBox(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_HasFormFieldAtPoint(request *requests.FPDFPage_HasFormFieldAtPoint, resp *responses.FPDFPage_HasFormFieldAtPoint) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_HasFormFieldAtPoint", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_HasFormFieldAtPoint(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_HasTransparency(request *requests.FPDFPage_HasTransparency, resp *responses.FPDFPage_HasTransparency) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_HasTransparency", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_HasTransparency(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_InsertClipPath(request *requests.FPDFPage_InsertClipPath, resp *responses.FPDFPage_InsertClipPath) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_InsertClipPath", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_InsertClipPath(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_InsertObject(request *requests.FPDFPage_InsertObject, resp *responses.FPDFPage_InsertObject) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_InsertObject", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_InsertObject(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_InsertObjectAtIndex(request *requests.FPDFPage_InsertObjectAtIndex, resp *responses.FPDFPage_InsertObjectAtIndex) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_InsertObjectAtIndex", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_InsertObjectAtIndex(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_New(request *requests.FPDFPage_New, resp *responses.FPDFPage_New) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_New", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_New(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_RemoveAnnot(request *requests.FPDFPage_RemoveAnnot, resp *responses.FPDFPage_RemoveAnnot) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_RemoveAnnot", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_RemoveAnnot(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_RemoveObject(request *requests.FPDFPage_RemoveObject, resp *responses.FPDFPage_RemoveObject) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_RemoveObject", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_RemoveObject(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_SetArtBox(request *requests.FPDFPage_SetArtBox, resp *responses.FPDFPage_SetArtBox) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_SetArtBox", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_SetArtBox(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_SetBleedBox(request *requests.FPDFPage_SetBleedBox, resp *responses.FPDFPage_SetBleedBox) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_SetBleedBox", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_SetBleedBox(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_SetCropBox(request *requests.FPDFPage_SetCropBox, resp *responses.FPDFPage_SetCropBox) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_SetCropBox", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_SetCropBox(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_SetMediaBox(request *requests.FPDFPage_SetMediaBox, resp *responses.FPDFPage_SetMediaBox) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_SetMediaBox", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_SetMediaBox(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_SetRotation(request *requests.FPDFPage_SetRotation, resp *responses.FPDFPage_SetRotation) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_SetRotation", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_SetRotation(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_SetTrimBox(request *requests.FPDFPage_SetTrimBox, resp *responses.FPDFPage_SetTrimBox) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_SetTrimBox", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_SetTrimBox(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_TransFormWithClip(request *requests.FPDFPage_TransFormWithClip, resp *responses.FPDFPage_TransFormWithClip) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_TransFormWithClip", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_TransFormWithClip(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_TransformAnnots(request *requests.FPDFPage_TransformAnnots, resp *responses.FPDFPage_TransformAnnots) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPage_TransformAnnots", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPage_TransformAnnots(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPathSegment_GetClose(request *requests.FPDFPathSegment_GetClose, resp *responses.FPDFPathSegment_GetClose) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPathSegment_GetClose", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPathSegment_GetClose(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPathSegment_GetPoint(request *requests.FPDFPathSegment_GetPoint, resp *responses.FPDFPathSegment_GetPoint) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPathSegment_GetPoint", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPathSegment_GetPoint(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPathSegment_GetType(request *requests.FPDFPathSegment_GetType, resp *responses.FPDFPathSegment_GetType) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPathSegment_GetType", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPathSegment_GetType(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPath_BezierTo(request *requests.FPDFPath_BezierTo, resp *responses.FPDFPath_BezierTo) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPath_BezierTo", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPath_BezierTo(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPath_Close(request *requests.FPDFPath_Close, resp *responses.FPDFPath_Close) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPath_Close", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPath_Close(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPath_CountSegments(request *requests.FPDFPath_CountSegments, resp *responses.FPDFPath_CountSegments) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPath_CountSegments", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPath_CountSegments(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPath_GetDrawMode(request *requests.FPDFPath_GetDrawMode, resp *responses.FPDFPath_GetDrawMode) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPath_GetDrawMode", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPath_GetDrawMode(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPath_GetPathSegment(request *requests.FPDFPath_GetPathSegment, resp *responses.FPDFPath_GetPathSegment) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPath_GetPathSegment", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPath_GetPathSegment(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPath_LineTo(request *requests.FPDFPath_LineTo, resp *responses.FPDFPath_LineTo) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPath_LineTo", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPath_LineTo(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPath_MoveTo(request *requests.FPDFPath_MoveTo, resp *responses.FPDFPath_MoveTo) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPath_MoveTo", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPath_MoveTo(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPath_SetDrawMode(request *requests.FPDFPath_SetDrawMode, resp *responses.FPDFPath_SetDrawMode) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFPath_SetDrawMode", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFPath_SetDrawMode(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFSignatureObj_GetByteRange(request *requests.FPDFSignatureObj_GetByteRange, resp *responses.FPDFSignatureObj_GetByteRange) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFSignatureObj_GetByteRange", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFSignatureObj_GetByteRange(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFSignatureObj_GetContents(request *requests.FPDFSignatureObj_GetContents, resp *responses.FPDFSignatureObj_GetContents) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFSignatureObj_GetContents", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFSignatureObj_GetContents(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFSignatureObj_GetDocMDPPermission(request *requests.FPDFSignatureObj_GetDocMDPPermission, resp *responses.FPDFSignatureObj_GetDocMDPPermission) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFSignatureObj_GetDocMDPPermission", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFSignatureObj_GetDocMDPPermission(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFSignatureObj_GetReason(request *requests.FPDFSignatureObj_GetReason, resp *responses.FPDFSignatureObj_GetReason) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFSignatureObj_GetReason", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFSignatureObj_GetReason(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFSignatureObj_GetSubFilter(request *requests.FPDFSignatureObj_GetSubFilter, resp *responses.FPDFSignatureObj_GetSubFilter) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFSignatureObj_GetSubFilter", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFSignatureObj_GetSubFilter(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFSignatureObj_GetTime(request *requests.FPDFSignatureObj_GetTime, resp *responses.FPDFSignatureObj_GetTime) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFSignatureObj_GetTime", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFSignatureObj_GetTime(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFTextObj_GetFont(request *requests.FPDFTextObj_GetFont, resp *responses.FPDFTextObj_GetFont) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFTextObj_GetFont", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFTextObj_GetFont(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFTextObj_GetFontSize(request *requests.FPDFTextObj_GetFontSize, resp *responses.FPDFTextObj_GetFontSize) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFTextObj_GetFontSize", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFTextObj_GetFontSize(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFTextObj_GetRenderedBitmap(request *requests.FPDFTextObj_GetRenderedBitmap, resp *responses.FPDFTextObj_GetRenderedBitmap) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFTextObj_GetRenderedBitmap", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFTextObj_GetRenderedBitmap(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFTextObj_GetText(request *requests.FPDFTextObj_GetText, resp *responses.FPDFTextObj_GetText) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFTextObj_GetText", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFTextObj_GetText(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFTextObj_GetTextRenderMode(request *requests.FPDFTextObj_GetTextRenderMode, resp *responses.FPDFTextObj_GetTextRenderMode) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFTextObj_GetTextRenderMode", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFTextObj_GetTextRenderMode(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFTextObj_SetTextRenderMode(request *requests.FPDFTextObj_SetTextRenderMode, resp *responses.FPDFTextObj_SetTextRenderMode) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFTextObj_SetTextRenderMode", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFTextObj_SetTextRenderMode(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_ClosePage(request *requests.FPDFText_ClosePage, resp *responses.FPDFText_ClosePage) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_ClosePage", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_ClosePage(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_CountChars(request *requests.FPDFText_CountChars, resp *responses.FPDFText_CountChars) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_CountChars", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_CountChars(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_CountRects(request *requests.FPDFText_CountRects, resp *responses.FPDFText_CountRects) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_CountRects", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_CountRects(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_FindClose(request *requests.FPDFText_FindClose, resp *responses.FPDFText_FindClose) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_FindClose", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_FindClose(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_FindNext(request *requests.FPDFText_FindNext, resp *responses.FPDFText_FindNext) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_FindNext", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_FindNext(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_FindPrev(request *requests.FPDFText_FindPrev, resp *responses.FPDFText_FindPrev) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_FindPrev", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_FindPrev(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_FindStart(request *requests.FPDFText_FindStart, resp *responses.FPDFText_FindStart) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_FindStart", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_FindStart(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_GetBoundedText(request *requests.FPDFText_GetBoundedText, resp *responses.FPDFText_GetBoundedText) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_GetBoundedText", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_GetBoundedText(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_GetCharAngle(request *requests.FPDFText_GetCharAngle, resp *responses.FPDFText_GetCharAngle) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_GetCharAngle", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_GetCharAngle(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_GetCharBox(request *requests.FPDFText_GetCharBox, resp *responses.FPDFText_GetCharBox) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_GetCharBox", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_GetCharBox(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_GetCharIndexAtPos(request *requests.FPDFText_GetCharIndexAtPos, resp *responses.FPDFText_GetCharIndexAtPos) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_GetCharIndexAtPos", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_GetCharIndexAtPos(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_GetCharIndexFromTextIndex(request *requests.FPDFText_GetCharIndexFromTextIndex, resp *responses.FPDFText_GetCharIndexFromTextIndex) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_GetCharIndexFromTextIndex", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_GetCharIndexFromTextIndex(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_GetCharOrigin(request *requests.FPDFText_GetCharOrigin, resp *responses.FPDFText_GetCharOrigin) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_GetCharOrigin", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_GetCharOrigin(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_GetFillColor(request *requests.FPDFText_GetFillColor, resp *responses.FPDFText_GetFillColor) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_GetFillColor", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_GetFillColor(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_GetFontInfo(request *requests.FPDFText_GetFontInfo, resp *responses.FPDFText_GetFontInfo) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_GetFontInfo", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_GetFontInfo(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_GetFontSize(request *requests.FPDFText_GetFontSize, resp *responses.FPDFText_GetFontSize) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_GetFontSize", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_GetFontSize(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_GetFontWeight(request *requests.FPDFText_GetFontWeight, resp *responses.FPDFText_GetFontWeight) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_GetFontWeight", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_GetFontWeight(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_GetLooseCharBox(request *requests.FPDFText_GetLooseCharBox, resp *responses.FPDFText_GetLooseCharBox) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_GetLooseCharBox", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_GetLooseCharBox(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_GetMatrix(request *requests.FPDFText_GetMatrix, resp *responses.FPDFText_GetMatrix) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_GetMatrix", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_GetMatrix(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_GetRect(request *requests.FPDFText_GetRect, resp *responses.FPDFText_GetRect) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_GetRect", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_GetRect(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_GetSchCount(request *requests.FPDFText_GetSchCount, resp *responses.FPDFText_GetSchCount) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_GetSchCount", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_GetSchCount(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_GetSchResultIndex(request *requests.FPDFText_GetSchResultIndex, resp *responses.FPDFText_GetSchResultIndex) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_GetSchResultIndex", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_GetSchResultIndex(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_GetStrokeColor(request *requests.FPDFText_GetStrokeColor, resp *responses.FPDFText_GetStrokeColor) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_GetStrokeColor", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_GetStrokeColor(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_GetText(request *requests.FPDFText_GetText, resp *responses.FPDFText_GetText) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_GetText", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_GetText(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_GetTextIndexFromCharIndex(request *requests.FPDFText_GetTextIndexFromCharIndex, resp *responses.FPDFText_GetTextIndexFromCharIndex) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_GetTextIndexFromCharIndex", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_GetTextIndexFromCharIndex(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_GetTextObject(request *requests.FPDFText_GetTextObject, resp *responses.FPDFText_GetTextObject) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_GetTextObject", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_GetTextObject(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_GetUnicode(request *requests.FPDFText_GetUnicode, resp *responses.FPDFText_GetUnicode) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_GetUnicode", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_GetUnicode(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_HasUnicodeMapError(request *requests.FPDFText_HasUnicodeMapError, resp *responses.FPDFText_HasUnicodeMapError) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_HasUnicodeMapError", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_HasUnicodeMapError(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_IsGenerated(request *requests.FPDFText_IsGenerated, resp *responses.FPDFText_IsGenerated) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_IsGenerated", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_IsGenerated(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_IsHyphen(request *requests.FPDFText_IsHyphen, resp *responses.FPDFText_IsHyphen) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_IsHyphen", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_IsHyphen(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_LoadCidType2Font(request *requests.FPDFText_LoadCidType2Font, resp *responses.FPDFText_LoadCidType2Font) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_LoadCidType2Font", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_LoadCidType2Font(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_LoadFont(request *requests.FPDFText_LoadFont, resp *responses.FPDFText_LoadFont) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_LoadFont", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_LoadFont(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_LoadPage(request *requests.FPDFText_LoadPage, resp *responses.FPDFText_LoadPage) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_LoadPage", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_LoadPage(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_LoadStandardFont(request *requests.FPDFText_LoadStandardFont, resp *responses.FPDFText_LoadStandardFont) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_LoadStandardFont", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_LoadStandardFont(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_SetCharcodes(request *requests.FPDFText_SetCharcodes, resp *responses.FPDFText_SetCharcodes) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_SetCharcodes", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_SetCharcodes(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFText_SetText(request *requests.FPDFText_SetText, resp *responses.FPDFText_SetText) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDFText_SetText", panicError)
		}
	}()

	implResp, err := s.Impl.FPDFText_SetText(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_CloseDocument(request *requests.FPDF_CloseDocument, resp *responses.FPDF_CloseDocument) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_CloseDocument", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_CloseDocument(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_ClosePage(request *requests.FPDF_ClosePage, resp *responses.FPDF_ClosePage) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_ClosePage", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_ClosePage(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_CloseXObject(request *requests.FPDF_CloseXObject, resp *responses.FPDF_CloseXObject) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_CloseXObject", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_CloseXObject(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_CopyViewerPreferences(request *requests.FPDF_CopyViewerPreferences, resp *responses.FPDF_CopyViewerPreferences) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_CopyViewerPreferences", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_CopyViewerPreferences(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_CountNamedDests(request *requests.FPDF_CountNamedDests, resp *responses.FPDF_CountNamedDests) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_CountNamedDests", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_CountNamedDests(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_CreateClipPath(request *requests.FPDF_CreateClipPath, resp *responses.FPDF_CreateClipPath) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_CreateClipPath", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_CreateClipPath(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_CreateNewDocument(request *requests.FPDF_CreateNewDocument, resp *responses.FPDF_CreateNewDocument) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_CreateNewDocument", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_CreateNewDocument(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_DestroyClipPath(request *requests.FPDF_DestroyClipPath, resp *responses.FPDF_DestroyClipPath) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_DestroyClipPath", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_DestroyClipPath(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_DeviceToPage(request *requests.FPDF_DeviceToPage, resp *responses.FPDF_DeviceToPage) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_DeviceToPage", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_DeviceToPage(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_DocumentHasValidCrossReferenceTable(request *requests.FPDF_DocumentHasValidCrossReferenceTable, resp *responses.FPDF_DocumentHasValidCrossReferenceTable) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_DocumentHasValidCrossReferenceTable", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_DocumentHasValidCrossReferenceTable(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_FFLDraw(request *requests.FPDF_FFLDraw, resp *responses.FPDF_FFLDraw) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_FFLDraw", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_FFLDraw(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetDocPermissions(request *requests.FPDF_GetDocPermissions, resp *responses.FPDF_GetDocPermissions) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_GetDocPermissions", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_GetDocPermissions(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetDocUserPermissions(request *requests.FPDF_GetDocUserPermissions, resp *responses.FPDF_GetDocUserPermissions) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_GetDocUserPermissions", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_GetDocUserPermissions(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetFileIdentifier(request *requests.FPDF_GetFileIdentifier, resp *responses.FPDF_GetFileIdentifier) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_GetFileIdentifier", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_GetFileIdentifier(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetFileVersion(request *requests.FPDF_GetFileVersion, resp *responses.FPDF_GetFileVersion) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_GetFileVersion", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_GetFileVersion(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetFormType(request *requests.FPDF_GetFormType, resp *responses.FPDF_GetFormType) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_GetFormType", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_GetFormType(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetLastError(request *requests.FPDF_GetLastError, resp *responses.FPDF_GetLastError) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_GetLastError", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_GetLastError(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetMetaText(request *requests.FPDF_GetMetaText, resp *responses.FPDF_GetMetaText) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_GetMetaText", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_GetMetaText(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetNamedDest(request *requests.FPDF_GetNamedDest, resp *responses.FPDF_GetNamedDest) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_GetNamedDest", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_GetNamedDest(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetNamedDestByName(request *requests.FPDF_GetNamedDestByName, resp *responses.FPDF_GetNamedDestByName) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_GetNamedDestByName", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_GetNamedDestByName(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetPageAAction(request *requests.FPDF_GetPageAAction, resp *responses.FPDF_GetPageAAction) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_GetPageAAction", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_GetPageAAction(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetPageBoundingBox(request *requests.FPDF_GetPageBoundingBox, resp *responses.FPDF_GetPageBoundingBox) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_GetPageBoundingBox", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_GetPageBoundingBox(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetPageCount(request *requests.FPDF_GetPageCount, resp *responses.FPDF_GetPageCount) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_GetPageCount", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_GetPageCount(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetPageHeight(request *requests.FPDF_GetPageHeight, resp *responses.FPDF_GetPageHeight) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_GetPageHeight", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_GetPageHeight(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetPageHeightF(request *requests.FPDF_GetPageHeightF, resp *responses.FPDF_GetPageHeightF) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_GetPageHeightF", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_GetPageHeightF(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetPageLabel(request *requests.FPDF_GetPageLabel, resp *responses.FPDF_GetPageLabel) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_GetPageLabel", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_GetPageLabel(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetPageSizeByIndex(request *requests.FPDF_GetPageSizeByIndex, resp *responses.FPDF_GetPageSizeByIndex) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_GetPageSizeByIndex", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_GetPageSizeByIndex(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetPageSizeByIndexF(request *requests.FPDF_GetPageSizeByIndexF, resp *responses.FPDF_GetPageSizeByIndexF) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_GetPageSizeByIndexF", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_GetPageSizeByIndexF(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetPageWidth(request *requests.FPDF_GetPageWidth, resp *responses.FPDF_GetPageWidth) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_GetPageWidth", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_GetPageWidth(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetPageWidthF(request *requests.FPDF_GetPageWidthF, resp *responses.FPDF_GetPageWidthF) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_GetPageWidthF", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_GetPageWidthF(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetSecurityHandlerRevision(request *requests.FPDF_GetSecurityHandlerRevision, resp *responses.FPDF_GetSecurityHandlerRevision) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_GetSecurityHandlerRevision", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_GetSecurityHandlerRevision(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetSignatureCount(request *requests.FPDF_GetSignatureCount, resp *responses.FPDF_GetSignatureCount) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_GetSignatureCount", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_GetSignatureCount(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetSignatureObject(request *requests.FPDF_GetSignatureObject, resp *responses.FPDF_GetSignatureObject) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_GetSignatureObject", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_GetSignatureObject(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetTrailerEnds(request *requests.FPDF_GetTrailerEnds, resp *responses.FPDF_GetTrailerEnds) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_GetTrailerEnds", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_GetTrailerEnds(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetXFAPacketContent(request *requests.FPDF_GetXFAPacketContent, resp *responses.FPDF_GetXFAPacketContent) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_GetXFAPacketContent", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_GetXFAPacketContent(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetXFAPacketCount(request *requests.FPDF_GetXFAPacketCount, resp *responses.FPDF_GetXFAPacketCount) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_GetXFAPacketCount", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_GetXFAPacketCount(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetXFAPacketName(request *requests.FPDF_GetXFAPacketName, resp *responses.FPDF_GetXFAPacketName) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_GetXFAPacketName", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_GetXFAPacketName(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_ImportNPagesToOne(request *requests.FPDF_ImportNPagesToOne, resp *responses.FPDF_ImportNPagesToOne) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_ImportNPagesToOne", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_ImportNPagesToOne(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_ImportPages(request *requests.FPDF_ImportPages, resp *responses.FPDF_ImportPages) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_ImportPages", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_ImportPages(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_ImportPagesByIndex(request *requests.FPDF_ImportPagesByIndex, resp *responses.FPDF_ImportPagesByIndex) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_ImportPagesByIndex", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_ImportPagesByIndex(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_LoadCustomDocument(request *requests.FPDF_LoadCustomDocument, resp *responses.FPDF_LoadCustomDocument) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_LoadCustomDocument", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_LoadCustomDocument(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_LoadDocument(request *requests.FPDF_LoadDocument, resp *responses.FPDF_LoadDocument) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_LoadDocument", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_LoadDocument(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_LoadMemDocument(request *requests.FPDF_LoadMemDocument, resp *responses.FPDF_LoadMemDocument) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_LoadMemDocument", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_LoadMemDocument(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_LoadMemDocument64(request *requests.FPDF_LoadMemDocument64, resp *responses.FPDF_LoadMemDocument64) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_LoadMemDocument64", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_LoadMemDocument64(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_LoadPage(request *requests.FPDF_LoadPage, resp *responses.FPDF_LoadPage) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_LoadPage", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_LoadPage(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_LoadXFA(request *requests.FPDF_LoadXFA, resp *responses.FPDF_LoadXFA) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_LoadXFA", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_LoadXFA(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_MovePages(request *requests.FPDF_MovePages, resp *responses.FPDF_MovePages) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_MovePages", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_MovePages(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_NewFormObjectFromXObject(request *requests.FPDF_NewFormObjectFromXObject, resp *responses.FPDF_NewFormObjectFromXObject) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_NewFormObjectFromXObject", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_NewFormObjectFromXObject(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_NewXObjectFromPage(request *requests.FPDF_NewXObjectFromPage, resp *responses.FPDF_NewXObjectFromPage) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_NewXObjectFromPage", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_NewXObjectFromPage(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_PageToDevice(request *requests.FPDF_PageToDevice, resp *responses.FPDF_PageToDevice) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_PageToDevice", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_PageToDevice(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_RemoveFormFieldHighlight(request *requests.FPDF_RemoveFormFieldHighlight, resp *responses.FPDF_RemoveFormFieldHighlight) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_RemoveFormFieldHighlight", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_RemoveFormFieldHighlight(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_RenderPage(request *requests.FPDF_RenderPage, resp *responses.FPDF_RenderPage) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_RenderPage", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_RenderPage(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_RenderPageBitmap(request *requests.FPDF_RenderPageBitmap, resp *responses.FPDF_RenderPageBitmap) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_RenderPageBitmap", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_RenderPageBitmap(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_RenderPageBitmapWithColorScheme_Start(request *requests.FPDF_RenderPageBitmapWithColorScheme_Start, resp *responses.FPDF_RenderPageBitmapWithColorScheme_Start) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_RenderPageBitmapWithColorScheme_Start", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_RenderPageBitmapWithColorScheme_Start(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_RenderPageBitmapWithMatrix(request *requests.FPDF_RenderPageBitmapWithMatrix, resp *responses.FPDF_RenderPageBitmapWithMatrix) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_RenderPageBitmapWithMatrix", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_RenderPageBitmapWithMatrix(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_RenderPageBitmap_Start(request *requests.FPDF_RenderPageBitmap_Start, resp *responses.FPDF_RenderPageBitmap_Start) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_RenderPageBitmap_Start", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_RenderPageBitmap_Start(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_RenderPage_Close(request *requests.FPDF_RenderPage_Close, resp *responses.FPDF_RenderPage_Close) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_RenderPage_Close", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_RenderPage_Close(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_RenderPage_Continue(request *requests.FPDF_RenderPage_Continue, resp *responses.FPDF_RenderPage_Continue) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_RenderPage_Continue", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_RenderPage_Continue(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_SaveAsCopy(request *requests.FPDF_SaveAsCopy, resp *responses.FPDF_SaveAsCopy) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_SaveAsCopy", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_SaveAsCopy(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_SaveWithVersion(request *requests.FPDF_SaveWithVersion, resp *responses.FPDF_SaveWithVersion) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_SaveWithVersion", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_SaveWithVersion(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_SetFormFieldHighlightAlpha(request *requests.FPDF_SetFormFieldHighlightAlpha, resp *responses.FPDF_SetFormFieldHighlightAlpha) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_SetFormFieldHighlightAlpha", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_SetFormFieldHighlightAlpha(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_SetFormFieldHighlightColor(request *requests.FPDF_SetFormFieldHighlightColor, resp *responses.FPDF_SetFormFieldHighlightColor) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_SetFormFieldHighlightColor", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_SetFormFieldHighlightColor(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_SetPrintMode(request *requests.FPDF_SetPrintMode, resp *responses.FPDF_SetPrintMode) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_SetPrintMode", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_SetPrintMode(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_SetSandBoxPolicy(request *requests.FPDF_SetSandBoxPolicy, resp *responses.FPDF_SetSandBoxPolicy) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_SetSandBoxPolicy", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_SetSandBoxPolicy(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_StructElement_Attr_CountChildren(request *requests.FPDF_StructElement_Attr_CountChildren, resp *responses.FPDF_StructElement_Attr_CountChildren) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_StructElement_Attr_CountChildren", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_StructElement_Attr_CountChildren(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_StructElement_Attr_GetBlobValue(request *requests.FPDF_StructElement_Attr_GetBlobValue, resp *responses.FPDF_StructElement_Attr_GetBlobValue) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_StructElement_Attr_GetBlobValue", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_StructElement_Attr_GetBlobValue(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_StructElement_Attr_GetBooleanValue(request *requests.FPDF_StructElement_Attr_GetBooleanValue, resp *responses.FPDF_StructElement_Attr_GetBooleanValue) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_StructElement_Attr_GetBooleanValue", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_StructElement_Attr_GetBooleanValue(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_StructElement_Attr_GetChildAtIndex(request *requests.FPDF_StructElement_Attr_GetChildAtIndex, resp *responses.FPDF_StructElement_Attr_GetChildAtIndex) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_StructElement_Attr_GetChildAtIndex", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_StructElement_Attr_GetChildAtIndex(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_StructElement_Attr_GetCount(request *requests.FPDF_StructElement_Attr_GetCount, resp *responses.FPDF_StructElement_Attr_GetCount) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_StructElement_Attr_GetCount", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_StructElement_Attr_GetCount(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_StructElement_Attr_GetName(request *requests.FPDF_StructElement_Attr_GetName, resp *responses.FPDF_StructElement_Attr_GetName) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_StructElement_Attr_GetName", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_StructElement_Attr_GetName(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_StructElement_Attr_GetNumberValue(request *requests.FPDF_StructElement_Attr_GetNumberValue, resp *responses.FPDF_StructElement_Attr_GetNumberValue) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_StructElement_Attr_GetNumberValue", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_StructElement_Attr_GetNumberValue(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_StructElement_Attr_GetStringValue(request *requests.FPDF_StructElement_Attr_GetStringValue, resp *responses.FPDF_StructElement_Attr_GetStringValue) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_StructElement_Attr_GetStringValue", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_StructElement_Attr_GetStringValue(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_StructElement_Attr_GetType(request *requests.FPDF_StructElement_Attr_GetType, resp *responses.FPDF_StructElement_Attr_GetType) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_StructElement_Attr_GetType", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_StructElement_Attr_GetType(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_StructElement_Attr_GetValue(request *requests.FPDF_StructElement_Attr_GetValue, resp *responses.FPDF_StructElement_Attr_GetValue) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_StructElement_Attr_GetValue", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_StructElement_Attr_GetValue(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_StructElement_CountChildren(request *requests.FPDF_StructElement_CountChildren, resp *responses.FPDF_StructElement_CountChildren) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_StructElement_CountChildren", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_StructElement_CountChildren(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_StructElement_GetActualText(request *requests.FPDF_StructElement_GetActualText, resp *responses.FPDF_StructElement_GetActualText) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_StructElement_GetActualText", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_StructElement_GetActualText(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_StructElement_GetAltText(request *requests.FPDF_StructElement_GetAltText, resp *responses.FPDF_StructElement_GetAltText) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_StructElement_GetAltText", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_StructElement_GetAltText(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_StructElement_GetAttributeAtIndex(request *requests.FPDF_StructElement_GetAttributeAtIndex, resp *responses.FPDF_StructElement_GetAttributeAtIndex) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_StructElement_GetAttributeAtIndex", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_StructElement_GetAttributeAtIndex(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_StructElement_GetAttributeCount(request *requests.FPDF_StructElement_GetAttributeCount, resp *responses.FPDF_StructElement_GetAttributeCount) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_StructElement_GetAttributeCount", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_StructElement_GetAttributeCount(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_StructElement_GetChildAtIndex(request *requests.FPDF_StructElement_GetChildAtIndex, resp *responses.FPDF_StructElement_GetChildAtIndex) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_StructElement_GetChildAtIndex", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_StructElement_GetChildAtIndex(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_StructElement_GetChildMarkedContentID(request *requests.FPDF_StructElement_GetChildMarkedContentID, resp *responses.FPDF_StructElement_GetChildMarkedContentID) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_StructElement_GetChildMarkedContentID", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_StructElement_GetChildMarkedContentID(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_StructElement_GetID(request *requests.FPDF_StructElement_GetID, resp *responses.FPDF_StructElement_GetID) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_StructElement_GetID", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_StructElement_GetID(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_StructElement_GetLang(request *requests.FPDF_StructElement_GetLang, resp *responses.FPDF_StructElement_GetLang) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_StructElement_GetLang", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_StructElement_GetLang(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_StructElement_GetMarkedContentID(request *requests.FPDF_StructElement_GetMarkedContentID, resp *responses.FPDF_StructElement_GetMarkedContentID) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_StructElement_GetMarkedContentID", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_StructElement_GetMarkedContentID(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_StructElement_GetMarkedContentIdAtIndex(request *requests.FPDF_StructElement_GetMarkedContentIdAtIndex, resp *responses.FPDF_StructElement_GetMarkedContentIdAtIndex) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_StructElement_GetMarkedContentIdAtIndex", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_StructElement_GetMarkedContentIdAtIndex(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_StructElement_GetMarkedContentIdCount(request *requests.FPDF_StructElement_GetMarkedContentIdCount, resp *responses.FPDF_StructElement_GetMarkedContentIdCount) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_StructElement_GetMarkedContentIdCount", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_StructElement_GetMarkedContentIdCount(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_StructElement_GetObjType(request *requests.FPDF_StructElement_GetObjType, resp *responses.FPDF_StructElement_GetObjType) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_StructElement_GetObjType", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_StructElement_GetObjType(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_StructElement_GetParent(request *requests.FPDF_StructElement_GetParent, resp *responses.FPDF_StructElement_GetParent) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_StructElement_GetParent", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_StructElement_GetParent(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_StructElement_GetStringAttribute(request *requests.FPDF_StructElement_GetStringAttribute, resp *responses.FPDF_StructElement_GetStringAttribute) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_StructElement_GetStringAttribute", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_StructElement_GetStringAttribute(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_StructElement_GetTitle(request *requests.FPDF_StructElement_GetTitle, resp *responses.FPDF_StructElement_GetTitle) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_StructElement_GetTitle", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_StructElement_GetTitle(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_StructElement_GetType(request *requests.FPDF_StructElement_GetType, resp *responses.FPDF_StructElement_GetType) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_StructElement_GetType", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_StructElement_GetType(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_StructTree_Close(request *requests.FPDF_StructTree_Close, resp *responses.FPDF_StructTree_Close) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_StructTree_Close", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_StructTree_Close(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_StructTree_CountChildren(request *requests.FPDF_StructTree_CountChildren, resp *responses.FPDF_StructTree_CountChildren) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_StructTree_CountChildren", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_StructTree_CountChildren(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_StructTree_GetChildAtIndex(request *requests.FPDF_StructTree_GetChildAtIndex, resp *responses.FPDF_StructTree_GetChildAtIndex) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_StructTree_GetChildAtIndex", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_StructTree_GetChildAtIndex(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_StructTree_GetForPage(request *requests.FPDF_StructTree_GetForPage, resp *responses.FPDF_StructTree_GetForPage) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_StructTree_GetForPage", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_StructTree_GetForPage(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_VIEWERREF_GetDuplex(request *requests.FPDF_VIEWERREF_GetDuplex, resp *responses.FPDF_VIEWERREF_GetDuplex) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_VIEWERREF_GetDuplex", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_VIEWERREF_GetDuplex(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_VIEWERREF_GetName(request *requests.FPDF_VIEWERREF_GetName, resp *responses.FPDF_VIEWERREF_GetName) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_VIEWERREF_GetName", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_VIEWERREF_GetName(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_VIEWERREF_GetNumCopies(request *requests.FPDF_VIEWERREF_GetNumCopies, resp *responses.FPDF_VIEWERREF_GetNumCopies) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_VIEWERREF_GetNumCopies", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_VIEWERREF_GetNumCopies(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_VIEWERREF_GetPrintPageRange(request *requests.FPDF_VIEWERREF_GetPrintPageRange, resp *responses.FPDF_VIEWERREF_GetPrintPageRange) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_VIEWERREF_GetPrintPageRange", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_VIEWERREF_GetPrintPageRange(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_VIEWERREF_GetPrintPageRangeCount(request *requests.FPDF_VIEWERREF_GetPrintPageRangeCount, resp *responses.FPDF_VIEWERREF_GetPrintPageRangeCount) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_VIEWERREF_GetPrintPageRangeCount", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_VIEWERREF_GetPrintPageRangeCount(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_VIEWERREF_GetPrintPageRangeElement(request *requests.FPDF_VIEWERREF_GetPrintPageRangeElement, resp *responses.FPDF_VIEWERREF_GetPrintPageRangeElement) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_VIEWERREF_GetPrintPageRangeElement", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_VIEWERREF_GetPrintPageRangeElement(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_VIEWERREF_GetPrintScaling(request *requests.FPDF_VIEWERREF_GetPrintScaling, resp *responses.FPDF_VIEWERREF_GetPrintScaling) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FPDF_VIEWERREF_GetPrintScaling", panicError)
		}
	}()

	implResp, err := s.Impl.FPDF_VIEWERREF_GetPrintScaling(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FSDK_SetLocaltimeFunction(request *requests.FSDK_SetLocaltimeFunction, resp *responses.FSDK_SetLocaltimeFunction) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FSDK_SetLocaltimeFunction", panicError)
		}
	}()

	implResp, err := s.Impl.FSDK_SetLocaltimeFunction(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FSDK_SetTimeFunction(request *requests.FSDK_SetTimeFunction, resp *responses.FSDK_SetTimeFunction) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FSDK_SetTimeFunction", panicError)
		}
	}()

	implResp, err := s.Impl.FSDK_SetTimeFunction(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FSDK_SetUnSpObjProcessHandler(request *requests.FSDK_SetUnSpObjProcessHandler, resp *responses.FSDK_SetUnSpObjProcessHandler) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "FSDK_SetUnSpObjProcessHandler", panicError)
		}
	}()

	implResp, err := s.Impl.FSDK_SetUnSpObjProcessHandler(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) GetActionInfo(request *requests.GetActionInfo, resp *responses.GetActionInfo) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "GetActionInfo", panicError)
		}
	}()

	implResp, err := s.Impl.GetActionInfo(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) GetAttachments(request *requests.GetAttachments, resp *responses.GetAttachments) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "GetAttachments", panicError)
		}
	}()

	implResp, err := s.Impl.GetAttachments(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) GetBookmarks(request *requests.GetBookmarks, resp *responses.GetBookmarks) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "GetBookmarks", panicError)
		}
	}()

	implResp, err := s.Impl.GetBookmarks(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) GetDestInfo(request *requests.GetDestInfo, resp *responses.GetDestInfo) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "GetDestInfo", panicError)
		}
	}()

	implResp, err := s.Impl.GetDestInfo(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) GetForm(request *requests.GetForm, resp *responses.GetForm) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "GetForm", panicError)
		}
	}()

	implResp, err := s.Impl.GetForm(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) GetJavaScriptActions(request *requests.GetJavaScriptActions, resp *responses.GetJavaScriptActions) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "GetJavaScriptActions", panicError)
		}
	}()

	implResp, err := s.Impl.GetJavaScriptActions(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) GetMetaData(request *requests.GetMetaData, resp *responses.GetMetaData) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "GetMetaData", panicError)
		}
	}()

	implResp, err := s.Impl.GetMetaData(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) GetPageSize(request *requests.GetPageSize, resp *responses.GetPageSize) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "GetPageSize", panicError)
		}
	}()

	implResp, err := s.Impl.GetPageSize(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) GetPageSizeInPixels(request *requests.GetPageSizeInPixels, resp *responses.GetPageSizeInPixels) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "GetPageSizeInPixels", panicError)
		}
	}()

	implResp, err := s.Impl.GetPageSizeInPixels(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) GetPageText(request *requests.GetPageText, resp *responses.GetPageText) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "GetPageText", panicError)
		}
	}()

	implResp, err := s.Impl.GetPageText(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) GetPageTextStructured(request *requests.GetPageTextStructured, resp *responses.GetPageTextStructured) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "GetPageTextStructured", panicError)
		}
	}()

	implResp, err := s.Impl.GetPageTextStructured(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) OpenDocument(request *requests.OpenDocument, resp *responses.OpenDocument) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "OpenDocument", panicError)
		}
	}()

	implResp, err := s.Impl.OpenDocument(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) RenderPageInDPI(request *requests.RenderPageInDPI, resp *responses.RenderPageInDPI) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "RenderPageInDPI", panicError)
		}
	}()

	implResp, err := s.Impl.RenderPageInDPI(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) RenderPageInPixels(request *requests.RenderPageInPixels, resp *responses.RenderPageInPixels) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "RenderPageInPixels", panicError)
		}
	}()

	implResp, err := s.Impl.RenderPageInPixels(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) RenderPagesInDPI(request *requests.RenderPagesInDPI, resp *responses.RenderPagesInDPI) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "RenderPagesInDPI", panicError)
		}
	}()

	implResp, err := s.Impl.RenderPagesInDPI(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) RenderPagesInPixels(request *requests.RenderPagesInPixels, resp *responses.RenderPagesInPixels) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "RenderPagesInPixels", panicError)
		}
	}()

	implResp, err := s.Impl.RenderPagesInPixels(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) RenderToFile(request *requests.RenderToFile, resp *responses.RenderToFile) (err error) {
	defer func() {
		if panicError := recover(); panicError != nil {
			err = fmt.Errorf("panic occurred in %s: %v", "RenderToFile", panicError)
		}
	}()

	implResp, err := s.Impl.RenderToFile(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}
